
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b74  08009b74  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009b74  08009b74  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b74  08009b74  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033e8  20000184  08009d00  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000356c  08009d00  0002356c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b71  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049af  00000000  00000000  00044d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b18  00000000  00000000  000496d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  0004b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006b49  00000000  00000000  0004cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017aa9  00000000  00000000  00053649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdc6  00000000  00000000  0006b0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013aeb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007070  00000000  00000000  0013af34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009a90 	.word	0x08009a90

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	08009a90 	.word	0x08009a90

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b096      	sub	sp, #88	; 0x58
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f001 f900 	bl	800142a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f863 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa23 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f9d3 	bl	80005dc <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f901 	bl	800043c <MX_TIM2_Init>
  MX_USB_Device_Init();
 800023a:	f008 ff29 	bl	8009090 <MX_USB_Device_Init>
  MX_SPI1_Init();
 800023e:	f000 f8bf 	bl	80003c0 <MX_SPI1_Init>
  MX_TIM17_Init();
 8000242:	f000 f953 	bl	80004ec <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8000246:	f000 fe75 	bl	8000f34 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	2014      	movs	r0, #20
 800024e:	f000 fe87 	bl	8000f60 <ws2812Begin>

	bool led_flg=false;
 8000252:	2300      	movs	r3, #0
 8000254:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t test_count = 0;
 8000256:	2300      	movs	r3, #0
 8000258:	653b      	str	r3, [r7, #80]	; 0x50

  uint32_t led_index = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	64fb      	str	r3, [r7, #76]	; 0x4c
  int32_t  led_index_pre = -1;
 800025e:	f04f 33ff 	mov.w	r3, #4294967295
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t led_color = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t led_mask= 0b1110000111;
 800026a:	f240 3387 	movw	r3, #903	; 0x387
 800026e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t current_led=0;
 8000270:	2300      	movs	r3, #0
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartDefaultTask, osPriorityNormal, 0, 128);
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <main+0xbc>)
 8000276:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f007 fdb3 	bl	8007df6 <osThreadCreate>
 8000290:	4602      	mov	r2, r0
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <main+0xc0>)
 8000294:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartTask02, osPriorityLow, 0, 128);
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <main+0xc4>)
 8000298:	f107 0414 	add.w	r4, r7, #20
 800029c:	461d      	mov	r5, r3
 800029e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a2:	682b      	ldr	r3, [r5, #0]
 80002a4:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f007 fda2 	bl	8007df6 <osThreadCreate>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <main+0xc8>)
 80002b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartTask03, osPriorityLow, 0, 128);
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <main+0xcc>)
 80002ba:	463c      	mov	r4, r7
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	682b      	ldr	r3, [r5, #0]
 80002c4:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 80002c6:	463b      	mov	r3, r7
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f007 fd93 	bl	8007df6 <osThreadCreate>
 80002d0:	4602      	mov	r2, r0
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <main+0xd0>)
 80002d4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002d6:	f007 fd87 	bl	8007de8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002da:	e7fe      	b.n	80002da <main+0xba>
 80002dc:	08009ab4 	.word	0x08009ab4
 80002e0:	20002428 	.word	0x20002428
 80002e4:	08009ad8 	.word	0x08009ad8
 80002e8:	200024e4 	.word	0x200024e4
 80002ec:	08009af8 	.word	0x08009af8
 80002f0:	200023d8 	.word	0x200023d8

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b0a4      	sub	sp, #144	; 0x90
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002fe:	2238      	movs	r2, #56	; 0x38
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f009 fbbc 	bl	8009a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2244      	movs	r2, #68	; 0x44
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f009 fbae 	bl	8009a80 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000324:	2000      	movs	r0, #0
 8000326:	f002 fcb9 	bl	8002c9c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800032a:	2321      	movs	r3, #33	; 0x21
 800032c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000338:	2302      	movs	r3, #2
 800033a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033c:	2303      	movs	r3, #3
 800033e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000340:	2304      	movs	r3, #4
 8000342:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000344:	2355      	movs	r3, #85	; 0x55
 8000346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000350:	2302      	movs	r3, #2
 8000352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000356:	2302      	movs	r3, #2
 8000358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fd3f 	bl	8002de4 <HAL_RCC_OscConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800036c:	f000 fb2e 	bl	80009cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000370:	230f      	movs	r3, #15
 8000372:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000374:	2303      	movs	r3, #3
 8000376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000384:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000388:	2108      	movs	r1, #8
 800038a:	4618      	mov	r0, r3
 800038c:	f003 f842 	bl	8003414 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000396:	f000 fb19 	bl	80009cc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800039a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003a0:	2300      	movs	r3, #0
 80003a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4618      	mov	r0, r3
 80003a8:	f003 fa68 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003b2:	f000 fb0b 	bl	80009cc <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3790      	adds	r7, #144	; 0x90
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_SPI1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_SPI1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_SPI1_Init+0x74>)
 80003cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_SPI1_Init+0x74>)
 80003da:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80003de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_SPI1_Init+0x74>)
 80003ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_SPI1_Init+0x74>)
 80003f6:	2218      	movs	r2, #24
 80003f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_SPI1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_SPI1_Init+0x74>)
 800040e:	2207      	movs	r2, #7
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_SPI1_Init+0x74>)
 800041a:	2208      	movs	r2, #8
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_SPI1_Init+0x74>)
 8000420:	f003 fc1c 	bl	8003c5c <HAL_SPI_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 facf 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20002434 	.word	0x20002434
 8000438:	40013000 	.word	0x40013000

0800043c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b08a      	sub	sp, #40	; 0x28
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000442:	f107 031c 	add.w	r3, r7, #28
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800044e:	463b      	mov	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
 800045c:	615a      	str	r2, [r3, #20]
 800045e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <MX_TIM2_Init+0xac>)
 8000462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <MX_TIM2_Init+0xac>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <MX_TIM2_Init+0xac>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <MX_TIM2_Init+0xac>)
 8000476:	22d4      	movs	r2, #212	; 0xd4
 8000478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_TIM2_Init+0xac>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <MX_TIM2_Init+0xac>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000486:	4818      	ldr	r0, [pc, #96]	; (80004e8 <MX_TIM2_Init+0xac>)
 8000488:	f003 fd08 	bl	8003e9c <HAL_TIM_PWM_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000492:	f000 fa9b 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049e:	f107 031c 	add.w	r3, r7, #28
 80004a2:	4619      	mov	r1, r3
 80004a4:	4810      	ldr	r0, [pc, #64]	; (80004e8 <MX_TIM2_Init+0xac>)
 80004a6:	f004 fe7f 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004b0:	f000 fa8c 	bl	80009cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b4:	2360      	movs	r3, #96	; 0x60
 80004b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004bc:	2300      	movs	r3, #0
 80004be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <MX_TIM2_Init+0xac>)
 80004cc:	f004 f8a2 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80004d6:	f000 fa79 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004da:	4803      	ldr	r0, [pc, #12]	; (80004e8 <MX_TIM2_Init+0xac>)
 80004dc:	f000 fc0e 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 80004e0:	bf00      	nop
 80004e2:	3728      	adds	r7, #40	; 0x28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20002498 	.word	0x20002498

080004ec <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2234      	movs	r2, #52	; 0x34
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f009 fab7 	bl	8009a80 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <MX_TIM17_Init+0xec>)
 8000516:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <MX_TIM17_Init+0xe8>)
 800051a:	2200      	movs	r2, #0
 800051c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000526:	22d4      	movs	r2, #212	; 0xd4
 8000528:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_TIM17_Init+0xe8>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000532:	2200      	movs	r2, #0
 8000534:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800053c:	4825      	ldr	r0, [pc, #148]	; (80005d4 <MX_TIM17_Init+0xe8>)
 800053e:	f003 fc1f 	bl	8003d80 <HAL_TIM_Base_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fa40 	bl	80009cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800054c:	4821      	ldr	r0, [pc, #132]	; (80005d4 <MX_TIM17_Init+0xe8>)
 800054e:	f003 fca5 	bl	8003e9c <HAL_TIM_PWM_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000558:	f000 fa38 	bl	80009cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000568:	2300      	movs	r3, #0
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000570:	2300      	movs	r3, #0
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000574:	2300      	movs	r3, #0
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800057c:	2200      	movs	r2, #0
 800057e:	4619      	mov	r1, r3
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <MX_TIM17_Init+0xe8>)
 8000582:	f004 f847 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800058c:	f000 fa1e 	bl	80009cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	4807      	ldr	r0, [pc, #28]	; (80005d4 <MX_TIM17_Init+0xe8>)
 80005b8:	f004 fe78 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80005c2:	f000 fa03 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <MX_TIM17_Init+0xe8>)
 80005c8:	f000 fb98 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200023dc 	.word	0x200023dc
 80005d8:	40014800 	.word	0x40014800

080005dc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_DMA_Init+0x98>)
 80005e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e6:	4a23      	ldr	r2, [pc, #140]	; (8000674 <MX_DMA_Init+0x98>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6493      	str	r3, [r2, #72]	; 0x48
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_DMA_Init+0x98>)
 80005f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_DMA_Init+0x98>)
 80005fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fe:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <MX_DMA_Init+0x98>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6493      	str	r3, [r2, #72]	; 0x48
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_DMA_Init+0x98>)
 8000608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_DMA_Init+0x98>)
 8000614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_DMA_Init+0x98>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6493      	str	r3, [r2, #72]	; 0x48
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_DMA_Init+0x98>)
 8000620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	200b      	movs	r0, #11
 8000630:	f000 ffea 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000634:	200b      	movs	r0, #11
 8000636:	f001 f801 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	200c      	movs	r0, #12
 8000640:	f000 ffe2 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000644:	200c      	movs	r0, #12
 8000646:	f000 fff9 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2105      	movs	r1, #5
 800064e:	2038      	movs	r0, #56	; 0x38
 8000650:	f000 ffda 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000654:	2038      	movs	r0, #56	; 0x38
 8000656:	f000 fff1 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2105      	movs	r1, #5
 800065e:	2039      	movs	r0, #57	; 0x39
 8000660:	f000 ffd2 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000664:	2039      	movs	r0, #57	; 0x39
 8000666:	f000 ffe9 	bl	800163c <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_GPIO_Init+0xd4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2e      	ldr	r2, [pc, #184]	; (800074c <MX_GPIO_Init+0xd4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_GPIO_Init+0xd4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_GPIO_Init+0xd4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a28      	ldr	r2, [pc, #160]	; (800074c <MX_GPIO_Init+0xd4>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_GPIO_Init+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <MX_GPIO_Init+0xd4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_GPIO_Init+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <MX_GPIO_Init+0xd8>)
 80006f6:	f001 fba3 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_GPIO_Init+0xdc>)
 8000702:	f001 fb9d 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000706:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_GPIO_Init+0xd8>)
 8000720:	f001 fa0c 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_GPIO_Init+0xdc>)
 800073e:	f001 f9fd 	bl	8001b3c <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3728      	adds	r7, #40	; 0x28
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	48000400 	.word	0x48000400

08000758 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800075c:	f000 fe90 	bl	8001480 <HAL_GetTick>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <rotateLeft+0x50>)
 8000776:	fba3 1302 	umull	r1, r3, r3, r2
 800077a:	0919      	lsrs	r1, r3, #4
 800077c:	460b      	mov	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	440b      	add	r3, r1
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8000788:	e009      	b.n	800079e <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	151b      	asrs	r3, r3, #20
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4313      	orrs	r3, r2
 800079c:	607b      	str	r3, [r7, #4]
    while(rotation--)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	1e5a      	subs	r2, r3, #1
 80007a2:	603a      	str	r2, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f0      	bne.n	800078a <rotateLeft+0x22>
    }

    return num;
 80007a8:	687b      	ldr	r3, [r7, #4]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	cccccccd 	.word	0xcccccccd

080007bc <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <rotateRight+0x58>)
 80007ca:	fba3 1302 	umull	r1, r3, r3, r2
 80007ce:	0919      	lsrs	r1, r3, #4
 80007d0:	460b      	mov	r3, r1
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80007dc:	e00d      	b.n	80007fa <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007ee:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	051b      	lsls	r3, r3, #20
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	603a      	str	r2, [r7, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1ec      	bne.n	80007de <rotateRight+0x22>
    }

    return num;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	cccccccd 	.word	0xcccccccd

08000818 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t pre_time = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t led_time = 200;
 8000824:	23c8      	movs	r3, #200	; 0xc8
 8000826:	617b      	str	r3, [r7, #20]
	uint32_t firstled = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
	uint32_t led_mask= 0b1110000111;
 8000834:	f240 3387 	movw	r3, #903	; 0x387
 8000838:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 800083a:	f7ff ff8d 	bl	8000758 <millis>
 800083e:	4602      	mov	r2, r0
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	429a      	cmp	r2, r3
 8000848:	d862      	bhi.n	8000910 <StartDefaultTask+0xf8>
		{
			pre_time = millis();
 800084a:	f7ff ff85 	bl	8000758 <millis>
 800084e:	6278      	str	r0, [r7, #36]	; 0x24
			firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 8000850:	68b8      	ldr	r0, [r7, #8]
 8000852:	6a39      	ldr	r1, [r7, #32]
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <StartDefaultTask+0x100>)
 8000856:	fba3 2301 	umull	r2, r3, r3, r1
 800085a:	091a      	lsrs	r2, r3, #4
 800085c:	4613      	mov	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	1aca      	subs	r2, r1, r3
 8000866:	4611      	mov	r1, r2
 8000868:	f7ff ff7e 	bl	8000768 <rotateLeft>
 800086c:	4603      	mov	r3, r0
 800086e:	613b      	str	r3, [r7, #16]
			halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 8000870:	68b8      	ldr	r0, [r7, #8]
 8000872:	6a39      	ldr	r1, [r7, #32]
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <StartDefaultTask+0x100>)
 8000876:	fba3 2301 	umull	r2, r3, r3, r1
 800087a:	091a      	lsrs	r2, r3, #4
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	1aca      	subs	r2, r1, r3
 8000886:	4611      	mov	r1, r2
 8000888:	f7ff ff98 	bl	80007bc <rotateRight>
 800088c:	4603      	mov	r3, r0
 800088e:	60fb      	str	r3, [r7, #12]

			led_index++;
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	3301      	adds	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
			for(uint32_t j=0; j<12; j++) {
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
 800089a:	e017      	b.n	80008cc <StartDefaultTask+0xb4>
				if( firstled >> j & 0x01){
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa22 f303 	lsr.w	r3, r2, r3
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d006      	beq.n	80008ba <StartDefaultTask+0xa2>
						ws2812SetColor(j, 255, 255, 255);
 80008ac:	23ff      	movs	r3, #255	; 0xff
 80008ae:	22ff      	movs	r2, #255	; 0xff
 80008b0:	21ff      	movs	r1, #255	; 0xff
 80008b2:	69f8      	ldr	r0, [r7, #28]
 80008b4:	f000 fb8c 	bl	8000fd0 <ws2812SetColor>
 80008b8:	e005      	b.n	80008c6 <StartDefaultTask+0xae>
				}else {
					ws2812SetColor(j, 0, 0, 0);
 80008ba:	2300      	movs	r3, #0
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	69f8      	ldr	r0, [r7, #28]
 80008c2:	f000 fb85 	bl	8000fd0 <ws2812SetColor>
			for(uint32_t j=0; j<12; j++) {
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	2b0b      	cmp	r3, #11
 80008d0:	d9e4      	bls.n	800089c <StartDefaultTask+0x84>
				}
			}
			for(uint32_t j=20; j>11; j--) {
 80008d2:	2314      	movs	r3, #20
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	e018      	b.n	800090a <StartDefaultTask+0xf2>
				if( halfled >> (j-11) & 0x01){
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	3b0b      	subs	r3, #11
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	fa22 f303 	lsr.w	r3, r2, r3
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <StartDefaultTask+0xe0>
						ws2812SetColor(j, 255, 255, 255);
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	22ff      	movs	r2, #255	; 0xff
 80008ee:	21ff      	movs	r1, #255	; 0xff
 80008f0:	69b8      	ldr	r0, [r7, #24]
 80008f2:	f000 fb6d 	bl	8000fd0 <ws2812SetColor>
 80008f6:	e005      	b.n	8000904 <StartDefaultTask+0xec>
				}else {
					ws2812SetColor(j, 0, 0, 0);
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	69b8      	ldr	r0, [r7, #24]
 8000900:	f000 fb66 	bl	8000fd0 <ws2812SetColor>
			for(uint32_t j=20; j>11; j--) {
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	3b01      	subs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	2b0b      	cmp	r3, #11
 800090e:	d8e3      	bhi.n	80008d8 <StartDefaultTask+0xc0>
				}
			}
		}
    osDelay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f007 fa97 	bl	8007e44 <osDelay>
		if(millis()-pre_time >= led_time)
 8000916:	e790      	b.n	800083a <StartDefaultTask+0x22>
 8000918:	cccccccd 	.word	0xcccccccd

0800091c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  uint32_t rainbow_pre_time=0;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  uint32_t rainbow_led_time=10;
 8000928:	230a      	movs	r3, #10
 800092a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 800092c:	2300      	movs	r3, #0
 800092e:	823b      	strh	r3, [r7, #16]
 8000930:	e02a      	b.n	8000988 <StartTask02+0x6c>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 8000932:	f7ff ff11 	bl	8000758 <millis>
 8000936:	4602      	mov	r2, r0
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	429a      	cmp	r2, r3
 8000940:	d822      	bhi.n	8000988 <StartTask02+0x6c>
			{
				rainbow_pre_time = millis();
 8000942:	f7ff ff09 	bl	8000758 <millis>
 8000946:	6178      	str	r0, [r7, #20]
				j++;
 8000948:	8a3b      	ldrh	r3, [r7, #16]
 800094a:	3301      	adds	r3, #1
 800094c:	823b      	strh	r3, [r7, #16]
				for(i=0; i< R_LED_CNT; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	827b      	strh	r3, [r7, #18]
 8000952:	e016      	b.n	8000982 <StartTask02+0x66>
					setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 8000954:	8a7b      	ldrh	r3, [r7, #18]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	2b00      	cmp	r3, #0
 800095a:	da00      	bge.n	800095e <StartTask02+0x42>
 800095c:	337f      	adds	r3, #127	; 0x7f
 800095e:	11db      	asrs	r3, r3, #7
 8000960:	b2da      	uxtb	r2, r3
 8000962:	8a3b      	ldrh	r3, [r7, #16]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fcd0 	bl	8001310 <Wheel>
 8000970:	4602      	mov	r2, r0
 8000972:	8a7b      	ldrh	r3, [r7, #18]
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fc46 	bl	8001208 <setPixelColor>
				for(i=0; i< R_LED_CNT; i++) {
 800097c:	8a7b      	ldrh	r3, [r7, #18]
 800097e:	3301      	adds	r3, #1
 8000980:	827b      	strh	r3, [r7, #18]
 8000982:	8a7b      	ldrh	r3, [r7, #18]
 8000984:	2b7f      	cmp	r3, #127	; 0x7f
 8000986:	d9e5      	bls.n	8000954 <StartTask02+0x38>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000988:	8a3b      	ldrh	r3, [r7, #16]
 800098a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800098e:	d3d0      	bcc.n	8000932 <StartTask02+0x16>
				}
			}
		}
		osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f007 fa57 	bl	8007e44 <osDelay>
  {
 8000996:	e7c9      	b.n	800092c <StartTask02+0x10>

08000998 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f007 fa4f 	bl	8007e44 <osDelay>
 80009a6:	e7fb      	b.n	80009a0 <StartTask03+0x8>

080009a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d101      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ba:	f000 fd4f 	bl	800145c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40012c00 	.word	0x40012c00

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80009e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ea:	6093      	str	r3, [r2, #8]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40007000 	.word	0x40007000

080009fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_MspInit+0x50>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <HAL_MspInit+0x50>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x50>)
 8000a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_MspInit+0x50>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_MspInit+0x50>)
 8000a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x50>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	f06f 0001 	mvn.w	r0, #1
 8000a3a:	f000 fde5 	bl	8001608 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000a3e:	f7ff ffcd 	bl	80009dc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a51      	ldr	r2, [pc, #324]	; (8000bb4 <HAL_SPI_MspInit+0x164>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	f040 809b 	bne.w	8000baa <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a74:	4b50      	ldr	r3, [pc, #320]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a78:	4a4f      	ldr	r2, [pc, #316]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a80:	4b4d      	ldr	r3, [pc, #308]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a49      	ldr	r2, [pc, #292]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a43      	ldr	r2, [pc, #268]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b41      	ldr	r3, [pc, #260]	; (8000bb8 <HAL_SPI_MspInit+0x168>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000abc:	2360      	movs	r3, #96	; 0x60
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000acc:	2305      	movs	r3, #5
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f001 f82f 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ade:	2320      	movs	r3, #32
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aee:	2305      	movs	r3, #5
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4830      	ldr	r0, [pc, #192]	; (8000bbc <HAL_SPI_MspInit+0x16c>)
 8000afa:	f001 f81f 	bl	8001b3c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel1;
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b00:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <HAL_SPI_MspInit+0x174>)
 8000b02:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b06:	220a      	movs	r2, #10
 8000b08:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b10:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b22:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b24:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b3a:	f000 fd8d 	bl	8001658 <HAL_DMA_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000b44:	f7ff ff42 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b4c:	659a      	str	r2, [r3, #88]	; 0x58
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <HAL_SPI_MspInit+0x170>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel2;
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_SPI_MspInit+0x17c>)
 8000b58:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b5c:	220b      	movs	r2, #11
 8000b5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b62:	2210      	movs	r2, #16
 8000b64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b78:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000b90:	f000 fd62 	bl	8001658 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000b9a:	f7ff ff17 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_SPI_MspInit+0x178>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	200024e8 	.word	0x200024e8
 8000bc4:	40020408 	.word	0x40020408
 8000bc8:	200025ac 	.word	0x200025ac
 8000bcc:	4002041c 	.word	0x4002041c

08000bd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be0:	d135      	bne.n	8000c4e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_TIM_PWM_MspInit+0x88>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <HAL_TIM_PWM_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_TIM_PWM_MspInit+0x88>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_TIM_PWM_MspInit+0x90>)
 8000bfe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c02:	2238      	movs	r2, #56	; 0x38
 8000c04:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c08:	2210      	movs	r2, #16
 8000c0a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000c32:	480a      	ldr	r0, [pc, #40]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c34:	f000 fd10 	bl	8001658 <HAL_DMA_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000c3e:	f7ff fec5 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_TIM_PWM_MspInit+0x8c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	20002378 	.word	0x20002378
 8000c60:	40020008 	.word	0x40020008

08000c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <HAL_TIM_Base_MspInit+0x88>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d135      	bne.n	8000ce2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_TIM_Base_MspInit+0x8c>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_TIM_Base_MspInit+0x94>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000c96:	2254      	movs	r2, #84	; 0x54
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cc8:	f000 fcc6 	bl	8001658 <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000cd2:	f7ff fe7b 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <HAL_TIM_Base_MspInit+0x90>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40014800 	.word	0x40014800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	2000254c 	.word	0x2000254c
 8000cf8:	4002001c 	.word	0x4002001c

08000cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d11d      	bne.n	8000d5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f000 fef2 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000d58:	e021      	b.n	8000d9e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_TIM_MspPostInit+0xb0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d11c      	bne.n	8000d9e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_MspPostInit+0xac>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fecf 	bl	8001b3c <HAL_GPIO_Init>
}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40014800 	.word	0x40014800

08000db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2019      	movs	r0, #25
 8000dc6:	f000 fc1f 	bl	8001608 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 fc36 	bl	800163c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dda:	6613      	str	r3, [r2, #96]	; 0x60
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_InitTick+0x9c>)
 8000dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 0210 	add.w	r2, r7, #16
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fccc 	bl	8003790 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000df8:	f002 fcb4 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8000dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_InitTick+0xa0>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	0c9b      	lsrs	r3, r3, #18
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_InitTick+0xa8>)
 8000e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e2e:	f002 ffa7 	bl	8003d80 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d104      	bne.n	8000e42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <HAL_InitTick+0xa4>)
 8000e3a:	f002 fff9 	bl	8003e30 <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3730      	adds	r7, #48	; 0x30
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	431bde83 	.word	0x431bde83
 8000e54:	20002610 	.word	0x20002610
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA1_Channel1_IRQHandler+0x10>)
 8000e96:	f000 fd02 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20002378 	.word	0x20002378

08000ea4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Channel2_IRQHandler+0x10>)
 8000eaa:	f000 fcf8 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000254c 	.word	0x2000254c

08000eb8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USB_LP_IRQHandler+0x10>)
 8000ebe:	f001 f8b4 	bl	800202a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200032f8 	.word	0x200032f8

08000ecc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ed2:	f003 fa1f 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20002610 	.word	0x20002610

08000ee0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <DMA2_Channel1_IRQHandler+0x10>)
 8000ee6:	f000 fcda 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200024e8 	.word	0x200024e8

08000ef4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA2_Channel2_IRQHandler+0x10>)
 8000efa:	f000 fcd0 	bl	800189e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200025ac 	.word	0x200025ac

08000f08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <SystemInit+0x28>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <SystemInit+0x28>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SystemInit+0x28>)
 8000f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f22:	609a      	str	r2, [r3, #8]
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8000f38:	f240 6232 	movw	r2, #1586	; 0x632
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <ws2812Init+0x24>)
 8000f40:	f008 fd9e 	bl	8009a80 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8000f44:	f240 6232 	movw	r2, #1586	; 0x632
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <ws2812Init+0x28>)
 8000f4c:	f008 fd98 	bl	8009a80 <memset>

  return true;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001a0 	.word	0x200001a0
 8000f5c:	200007d4 	.word	0x200007d4

08000f60 <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <ws2812Begin+0x5c>)
 8000f70:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <ws2812Begin+0x5c>)
 8000f78:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <ws2812Begin+0x5c>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	0052      	lsls	r2, r2, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3332      	adds	r3, #50	; 0x32
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <ws2812Begin+0x60>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <ws2812Begin+0x64>)
 8000f92:	f002 ffdb 	bl	8003f4c <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <ws2812Begin+0x5c>)
 8000f98:	885b      	ldrh	r3, [r3, #2]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3332      	adds	r3, #50	; 0x32
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <ws2812Begin+0x68>)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <ws2812Begin+0x6c>)
 8000fae:	f002 ffcd 	bl	8003f4c <HAL_TIM_PWM_Start_DMA>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000265c 	.word	0x2000265c
 8000fc0:	200001a0 	.word	0x200001a0
 8000fc4:	20002498 	.word	0x20002498
 8000fc8:	200007d4 	.word	0x200007d4
 8000fcc:	200023dc 	.word	0x200023dc

08000fd0 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b08b      	sub	sp, #44	; 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	4608      	mov	r0, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70bb      	strb	r3, [r7, #2]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
 8000fee:	e03e      	b.n	800106e <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8000ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da06      	bge.n	8001006 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8000ff8:	f107 0218 	add.w	r2, r7, #24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	4413      	add	r3, r2
 8001000:	2287      	movs	r2, #135	; 0x87
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e005      	b.n	8001012 <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001006:	f107 0218 	add.w	r2, r7, #24
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	4413      	add	r3, r2
 800100e:	2243      	movs	r2, #67	; 0x43
 8001010:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001018:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da06      	bge.n	800102e <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	4413      	add	r3, r2
 8001028:	2287      	movs	r2, #135	; 0x87
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e005      	b.n	800103a <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 800102e:	f107 0210 	add.w	r2, r7, #16
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	4413      	add	r3, r2
 8001036:	2243      	movs	r2, #67	; 0x43
 8001038:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 800103a:	78bb      	ldrb	r3, [r7, #2]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001040:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001044:	2b00      	cmp	r3, #0
 8001046:	da06      	bge.n	8001056 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001048:	f107 0208 	add.w	r2, r7, #8
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	4413      	add	r3, r2
 8001050:	2287      	movs	r2, #135	; 0x87
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e005      	b.n	8001062 <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	4413      	add	r3, r2
 800105e:	2243      	movs	r2, #67	; 0x43
 8001060:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8001062:	787b      	ldrb	r3, [r7, #1]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	3301      	adds	r3, #1
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	2b07      	cmp	r3, #7
 8001072:	ddbd      	ble.n	8000ff0 <ws2812SetColor+0x20>
  }

  offset = 50;
 8001074:	2332      	movs	r3, #50	; 0x32
 8001076:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	461a      	mov	r2, r3
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	4413      	add	r3, r2
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <ws2812SetColor+0x118>)
 800108a:	4413      	add	r3, r2
 800108c:	461a      	mov	r2, r3
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	cb03      	ldmia	r3!, {r0, r1}
 8001094:	6010      	str	r0, [r2, #0]
 8001096:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	461a      	mov	r2, r3
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	3308      	adds	r3, #8
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <ws2812SetColor+0x118>)
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	cb03      	ldmia	r3!, {r0, r1}
 80010b6:	6010      	str	r0, [r2, #0]
 80010b8:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	461a      	mov	r2, r3
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	4413      	add	r3, r2
 80010ca:	3310      	adds	r3, #16
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <ws2812SetColor+0x118>)
 80010ce:	4413      	add	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	cb03      	ldmia	r3!, {r0, r1}
 80010d8:	6010      	str	r0, [r2, #0]
 80010da:	6051      	str	r1, [r2, #4]
}
 80010dc:	bf00      	nop
 80010de:	372c      	adds	r7, #44	; 0x2c
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	200001a0 	.word	0x200001a0

080010ec <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b08b      	sub	sp, #44	; 0x2c
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	4608      	mov	r0, r1
 80010f6:	4611      	mov	r1, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	70fb      	strb	r3, [r7, #3]
 80010fe:	460b      	mov	r3, r1
 8001100:	70bb      	strb	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	e03e      	b.n	800118a <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 800110c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da06      	bge.n	8001122 <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001114:	f107 0218 	add.w	r2, r7, #24
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	4413      	add	r3, r2
 800111c:	2287      	movs	r2, #135	; 0x87
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e005      	b.n	800112e <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001122:	f107 0218 	add.w	r2, r7, #24
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	4413      	add	r3, r2
 800112a:	2243      	movs	r2, #67	; 0x43
 800112c:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001134:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001138:	2b00      	cmp	r3, #0
 800113a:	da06      	bge.n	800114a <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 800113c:	f107 0210 	add.w	r2, r7, #16
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	4413      	add	r3, r2
 8001144:	2287      	movs	r2, #135	; 0x87
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e005      	b.n	8001156 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 800114a:	f107 0210 	add.w	r2, r7, #16
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	4413      	add	r3, r2
 8001152:	2243      	movs	r2, #67	; 0x43
 8001154:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001156:	78bb      	ldrb	r3, [r7, #2]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 800115c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da06      	bge.n	8001172 <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	4413      	add	r3, r2
 800116c:	2287      	movs	r2, #135	; 0x87
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e005      	b.n	800117e <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001172:	f107 0208 	add.w	r2, r7, #8
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	4413      	add	r3, r2
 800117a:	2243      	movs	r2, #67	; 0x43
 800117c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 800117e:	787b      	ldrb	r3, [r7, #1]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3301      	adds	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	2b07      	cmp	r3, #7
 800118e:	ddbd      	ble.n	800110c <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	461a      	mov	r2, r3
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <ws2812SetRanbowColor+0x118>)
 80011a6:	4413      	add	r3, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	cb03      	ldmia	r3!, {r0, r1}
 80011b0:	6010      	str	r0, [r2, #0]
 80011b2:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	461a      	mov	r2, r3
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	4413      	add	r3, r2
 80011c4:	3308      	adds	r3, #8
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <ws2812SetRanbowColor+0x118>)
 80011c8:	4413      	add	r3, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	cb03      	ldmia	r3!, {r0, r1}
 80011d2:	6010      	str	r0, [r2, #0]
 80011d4:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	461a      	mov	r2, r3
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	4413      	add	r3, r2
 80011e6:	3310      	adds	r3, #16
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <ws2812SetRanbowColor+0x118>)
 80011ea:	4413      	add	r3, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	cb03      	ldmia	r3!, {r0, r1}
 80011f4:	6010      	str	r0, [r2, #0]
 80011f6:	6051      	str	r1, [r2, #4]
}
 80011f8:	bf00      	nop
 80011fa:	372c      	adds	r7, #44	; 0x2c
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200007d4 	.word	0x200007d4

08001208 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <setPixelColor+0xec>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	429a      	cmp	r2, r3
 800121c:	d266      	bcs.n	80012ec <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <setPixelColor+0xf0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d014      	beq.n	8001260 <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <setPixelColor+0xf0>)
 800123a:	7812      	ldrb	r2, [r2, #0]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	121b      	asrs	r3, r3, #8
 8001242:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	4a2c      	ldr	r2, [pc, #176]	; (80012f8 <setPixelColor+0xf0>)
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	121b      	asrs	r3, r3, #8
 8001250:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 8001252:	7a7b      	ldrb	r3, [r7, #9]
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <setPixelColor+0xf0>)
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	121b      	asrs	r3, r3, #8
 800125e:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <setPixelColor+0xf4>)
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <setPixelColor+0xf8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d108      	bne.n	800127e <setPixelColor+0x76>
      p = &pixels[n * 3];
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <setPixelColor+0xfc>)
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	440b      	add	r3, r1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e01b      	b.n	80012b6 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <setPixelColor+0xfc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	0e1b      	lsrs	r3, r3, #24
 800128e:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <setPixelColor+0xf0>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <setPixelColor+0xa0>
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <setPixelColor+0xf0>)
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	121b      	asrs	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	e000      	b.n	80012aa <setPixelColor+0xa2>
 80012a8:	7a3b      	ldrb	r3, [r7, #8]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <setPixelColor+0xf4>)
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	4611      	mov	r1, r2
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	440a      	add	r2, r1
 80012b4:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <setPixelColor+0xf8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	7afa      	ldrb	r2, [r7, #11]
 80012c2:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <setPixelColor+0x100>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	7aba      	ldrb	r2, [r7, #10]
 80012d0:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <setPixelColor+0x104>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	7a7a      	ldrb	r2, [r7, #9]
 80012de:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 80012e0:	88f8      	ldrh	r0, [r7, #6]
 80012e2:	7a7b      	ldrb	r3, [r7, #9]
 80012e4:	7aba      	ldrb	r2, [r7, #10]
 80012e6:	7af9      	ldrb	r1, [r7, #11]
 80012e8:	f7ff ff00 	bl	80010ec <ws2812SetRanbowColor>
  }

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000265c 	.word	0x2000265c
 80012f8:	20002548 	.word	0x20002548
 80012fc:	2000242c 	.word	0x2000242c
 8001300:	2000260c 	.word	0x2000260c
 8001304:	20002374 	.word	0x20002374
 8001308:	20002430 	.word	0x20002430
 800130c:	20002549 	.word	0x20002549

08001310 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	43db      	mvns	r3, r3
 800131e:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b54      	cmp	r3, #84	; 0x54
 8001324:	d811      	bhi.n	800134a <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	461a      	mov	r2, r3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2d8      	uxtb	r0, r3
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	461a      	mov	r2, r3
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	4413      	add	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	2100      	movs	r1, #0
 8001342:	f000 f832 	bl	80013aa <Color>
 8001346:	4603      	mov	r3, r0
 8001348:	e02b      	b.n	80013a2 <Wheel+0x92>
  }
  if(WheelPos < 170) {
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2ba9      	cmp	r3, #169	; 0xa9
 800134e:	d814      	bhi.n	800137a <Wheel+0x6a>
  		WheelPos -= 85;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	3b55      	subs	r3, #85	; 0x55
 8001354:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	461a      	mov	r2, r3
 800135a:	0052      	lsls	r2, r2, #1
 800135c:	4413      	add	r3, r2
 800135e:	b2d9      	uxtb	r1, r3
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	461a      	mov	r2, r3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	461a      	mov	r2, r3
 8001370:	2000      	movs	r0, #0
 8001372:	f000 f81a 	bl	80013aa <Color>
 8001376:	4603      	mov	r3, r0
 8001378:	e013      	b.n	80013a2 <Wheel+0x92>
  }
  WheelPos -= 170;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3356      	adds	r3, #86	; 0x56
 800137e:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	461a      	mov	r2, r3
 8001384:	0052      	lsls	r2, r2, #1
 8001386:	4413      	add	r3, r2
 8001388:	b2d8      	uxtb	r0, r3
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	461a      	mov	r2, r3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	f000 f805 	bl	80013aa <Color>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	460b      	mov	r3, r1
 80013b6:	71bb      	strb	r3, [r7, #6]
 80013b8:	4613      	mov	r3, r2
 80013ba:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	431a      	orrs	r2, r3
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	4313      	orrs	r3, r2
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001402:	f7ff fd81 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f008 fb17 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140a:	f7fe ff09 	bl	8000220 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   r0, =_estack
 8001410:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800141c:	08009b7c 	.word	0x08009b7c
  ldr r2, =_sbss
 8001420:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001424:	2000356c 	.word	0x2000356c

08001428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC1_2_IRQHandler>

0800142a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f8dc 	bl	80015f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fcb8 	bl	8000db0 <HAL_InitTick>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e001      	b.n	8001450 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144c:	f7ff fad6 	bl	80009fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001450:	79fb      	ldrb	r3, [r7, #7]

}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	4a03      	ldr	r2, [pc, #12]	; (8001478 <HAL_IncTick+0x1c>)
 800146c:	6013      	str	r3, [r2, #0]
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	20002660 	.word	0x20002660
 800147c:	20000008 	.word	0x20000008

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20002660 	.word	0x20002660

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ff4c 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001616:	f7ff ff63 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 800161a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7ff ffb3 	bl	800158c <NVIC_EncodePriority>
 8001626:	4602      	mov	r2, r0
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff82 	bl	8001538 <__NVIC_SetPriority>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff56 	bl	80014fc <__NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e08d      	b.n	8001786 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_DMA_Init+0x138>)
 8001672:	429a      	cmp	r2, r3
 8001674:	d80f      	bhi.n	8001696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_DMA_Init+0x13c>)
 800167e:	4413      	add	r3, r2
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_DMA_Init+0x140>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	009a      	lsls	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a42      	ldr	r2, [pc, #264]	; (800179c <HAL_DMA_Init+0x144>)
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
 8001694:	e00e      	b.n	80016b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_DMA_Init+0x148>)
 800169e:	4413      	add	r3, r2
 80016a0:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_DMA_Init+0x140>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	009a      	lsls	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a3c      	ldr	r2, [pc, #240]	; (80017a4 <HAL_DMA_Init+0x14c>)
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f9b6 	bl	8001a78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001714:	d102      	bne.n	800171c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001730:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_DMA_Init+0x104>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d80c      	bhi.n	800175c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f9d6 	bl	8001af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	e008      	b.n	800176e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020407 	.word	0x40020407
 8001794:	bffdfff8 	.word	0xbffdfff8
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40020000 	.word	0x40020000
 80017a0:	bffdfbf8 	.word	0xbffdfbf8
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_DMA_Start_IT+0x20>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e066      	b.n	8001896 <HAL_DMA_Start_IT+0xee>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d155      	bne.n	8001888 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 f8fb 	bl	80019fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 020e 	orr.w	r2, r2, #14
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e00f      	b.n	8001840 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0204 	bic.w	r2, r2, #4
 800182e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 020a 	orr.w	r2, r2, #10
 800183e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800185c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	2b00      	cmp	r3, #0
 8001864:	d007      	beq.n	8001876 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0201 	orr.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e005      	b.n	8001894 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001890:	2302      	movs	r3, #2
 8001892:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001894:	7dfb      	ldrb	r3, [r7, #23]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	2204      	movs	r2, #4
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d026      	beq.n	8001918 <HAL_DMA_IRQHandler+0x7a>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d021      	beq.n	8001918 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0204 	bic.w	r2, r2, #4
 80018f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f003 021f 	and.w	r2, r3, #31
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2104      	movs	r1, #4
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d071      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001916:	e06c      	b.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2202      	movs	r2, #2
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d02e      	beq.n	800198a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d029      	beq.n	800198a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020a 	bic.w	r2, r2, #10
 8001952:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2102      	movs	r1, #2
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2b00      	cmp	r3, #0
 800197e:	d038      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001988:	e033      	b.n	80019f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f003 031f 	and.w	r3, r3, #31
 8001992:	2208      	movs	r2, #8
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02a      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d025      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
}
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 021f 	and.w	r2, r3, #31
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d108      	bne.n	8001a5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a5a:	e007      	b.n	8001a6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d802      	bhi.n	8001a92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e001      	b.n	8001a96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a94:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	3b08      	subs	r3, #8
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	009a      	lsls	r2, r3, #2
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001ac2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ad2:	bf00      	nop
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40020407 	.word	0x40020407
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020820 	.word	0x40020820
 8001aec:	cccccccd 	.word	0xcccccccd
 8001af0:	40020880 	.word	0x40020880

08001af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2201      	movs	r2, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	1000823f 	.word	0x1000823f
 8001b38:	40020940 	.word	0x40020940

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b4a:	e15a      	b.n	8001e02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 814c 	beq.w	8001dfc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d00b      	beq.n	8001b84 <HAL_GPIO_Init+0x48>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b78:	2b11      	cmp	r3, #17
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b12      	cmp	r3, #18
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0xea>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	6939      	ldr	r1, [r7, #16]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80a6 	beq.w	8001dfc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbc:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x2e4>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cf2:	d01f      	beq.n	8001d34 <HAL_GPIO_Init+0x1f8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_GPIO_Init+0x2ec>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d019      	beq.n	8001d30 <HAL_GPIO_Init+0x1f4>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_GPIO_Init+0x2f0>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d013      	beq.n	8001d2c <HAL_GPIO_Init+0x1f0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <HAL_GPIO_Init+0x2f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00d      	beq.n	8001d28 <HAL_GPIO_Init+0x1ec>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_GPIO_Init+0x2f8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d007      	beq.n	8001d24 <HAL_GPIO_Init+0x1e8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2fc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_GPIO_Init+0x1e4>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e00a      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d20:	2306      	movs	r3, #6
 8001d22:	e008      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e004      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_GPIO_Init+0x1fa>
 8001d34:	2300      	movs	r3, #0
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	f002 0203 	and.w	r2, r2, #3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d46:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_GPIO_Init+0x2e8>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d78:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da2:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_GPIO_Init+0x300>)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f47f ae9d 	bne.w	8001b4c <HAL_GPIO_Init+0x10>
  }
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40010000 	.word	0x40010000
 8001e28:	48000400 	.word	0x48000400
 8001e2c:	48000800 	.word	0x48000800
 8001e30:	48000c00 	.word	0x48000c00
 8001e34:	48001000 	.word	0x48001000
 8001e38:	48001400 	.word	0x48001400
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	b08b      	sub	sp, #44	; 0x2c
 8001e74:	af06      	add	r7, sp, #24
 8001e76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0ad      	b.n	8001fde <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f007 fac6 	bl	8009428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 fafe 	bl	80054aa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e035      	b.n	8001f20 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	4413      	add	r3, r2
 8001ebc:	3329      	adds	r3, #41	; 0x29
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	015b      	lsls	r3, r3, #5
 8001ec8:	4413      	add	r3, r2
 8001eca:	3328      	adds	r3, #40	; 0x28
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	b291      	uxth	r1, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	4413      	add	r3, r2
 8001edc:	3336      	adds	r3, #54	; 0x36
 8001ede:	460a      	mov	r2, r1
 8001ee0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	015b      	lsls	r3, r3, #5
 8001ee8:	4413      	add	r3, r2
 8001eea:	332b      	adds	r3, #43	; 0x2b
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	015b      	lsls	r3, r3, #5
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	4413      	add	r3, r2
 8001f06:	333c      	adds	r3, #60	; 0x3c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	3302      	adds	r3, #2
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	4413      	add	r3, r2
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3c4      	bcc.n	8001eb4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e031      	b.n	8001f94 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	015b      	lsls	r3, r3, #5
 8001f36:	4413      	add	r3, r2
 8001f38:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	015b      	lsls	r3, r3, #5
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	015b      	lsls	r3, r3, #5
 8001f56:	4413      	add	r3, r2
 8001f58:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	330a      	adds	r3, #10
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	4413      	add	r3, r2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	3301      	adds	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3c8      	bcc.n	8001f30 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	687e      	ldr	r6, [r7, #4]
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	1d33      	adds	r3, r6, #4
 8001fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f003 fa91 	bl	80054e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fe35 	bl	8002c46 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_PCD_Start+0x16>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e012      	b.n	8002022 <HAL_PCD_Start+0x3c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fab5 	bl	8006578 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fa30 	bl	8005478 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fab5 	bl	80065a6 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002046:	d102      	bne.n	800204e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fb33 	bl	80026b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f004 faa7 	bl	80065a6 <USB_ReadInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	d112      	bne.n	800208a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	b292      	uxth	r2, r2
 8002078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f007 fa6a 	bl	8009556 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002082:	2100      	movs	r1, #0
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f91e 	bl	80022c6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa89 	bl	80065a6 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209e:	d10b      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020b2:	b292      	uxth	r2, r2
 80020b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 fa72 	bl	80065a6 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020cc:	d10b      	bne.n	80020e6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e0:	b292      	uxth	r2, r2
 80020e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fa5b 	bl	80065a6 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d133      	bne.n	8002164 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0204 	bic.w	r2, r2, #4
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800211c:	b29a      	uxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0208 	bic.w	r2, r2, #8
 8002126:	b292      	uxth	r2, r2
 8002128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002132:	2b01      	cmp	r3, #1
 8002134:	d107      	bne.n	8002146 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800213e:	2100      	movs	r1, #0
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f007 fbf9 	bl	8009938 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f007 fa3e 	bl	80095c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800215e:	b292      	uxth	r2, r2
 8002160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 fa1c 	bl	80065a6 <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002178:	d126      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0208 	orr.w	r2, r2, #8
 800218c:	b292      	uxth	r2, r2
 800218e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a4:	b292      	uxth	r2, r2
 80021a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0204 	orr.w	r2, r2, #4
 80021bc:	b292      	uxth	r2, r2
 80021be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f007 f9e6 	bl	8009594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9ea 	bl	80065a6 <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d13f      	bne.n	800225c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12b      	bne.n	8002256 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0204 	orr.w	r2, r2, #4
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0208 	orr.w	r2, r2, #8
 8002228:	b292      	uxth	r2, r2
 800222a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800223e:	b29b      	uxth	r3, r3
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800224c:	2101      	movs	r1, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f007 fb72 	bl	8009938 <HAL_PCDEx_LPM_Callback>
 8002254:	e002      	b.n	800225c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f007 f99c 	bl	8009594 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f004 f9a0 	bl	80065a6 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002270:	d10e      	bne.n	8002290 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002284:	b292      	uxth	r2, r2
 8002286:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f007 f955 	bl	800953a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f986 	bl	80065a6 <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d10b      	bne.n	80022be <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	b292      	uxth	r2, r2
 80022ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_PCD_SetAddress+0x1a>
 80022dc:	2302      	movs	r3, #2
 80022de:	e013      	b.n	8002308 <HAL_PCD_SetAddress+0x42>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 f929 	bl	8006550 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4603      	mov	r3, r0
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	460b      	mov	r3, r1
 8002324:	803b      	strh	r3, [r7, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800232e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002332:	2b00      	cmp	r3, #0
 8002334:	da0b      	bge.n	800234e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	015b      	lsls	r3, r3, #5
 800233e:	3328      	adds	r3, #40	; 0x28
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	705a      	strb	r2, [r3, #1]
 800234c:	e00b      	b.n	8002366 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800234e:	78fb      	ldrb	r3, [r7, #3]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	015b      	lsls	r3, r3, #5
 8002356:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002372:	883a      	ldrh	r2, [r7, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	78ba      	ldrb	r2, [r7, #2]
 800237c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002390:	78bb      	ldrb	r3, [r7, #2]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_PCD_EP_Open+0x9a>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Open+0xb8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f003 f8b5 	bl	8005528 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80023c6:	7afb      	ldrb	r3, [r7, #11]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da0b      	bge.n	80023fc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	015b      	lsls	r3, r3, #5
 80023ec:	3328      	adds	r3, #40	; 0x28
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	705a      	strb	r2, [r3, #1]
 80023fa:	e00b      	b.n	8002414 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	015b      	lsls	r3, r3, #5
 8002404:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	b2da      	uxtb	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_PCD_EP_Close+0x5e>
 800242a:	2302      	movs	r3, #2
 800242c:	e00e      	b.n	800244c <HAL_PCD_EP_Close+0x7c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fb63 	bl	8005b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	460b      	mov	r3, r1
 8002462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002464:	7afb      	ldrb	r3, [r7, #11]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2200      	movs	r2, #0
 800248c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	b2da      	uxtb	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6979      	ldr	r1, [r7, #20]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fcc2 	bl	8005e34 <USB_EPStartXfer>
 80024b0:	e005      	b.n	80024be <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6979      	ldr	r1, [r7, #20]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fcbb 	bl	8005e34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	330a      	adds	r3, #10
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	4413      	add	r3, r2
 80024e2:	3304      	adds	r3, #4
 80024e4:	681b      	ldr	r3, [r3, #0]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	460b      	mov	r3, r1
 8002500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	015b      	lsls	r3, r3, #5
 800250a:	3328      	adds	r3, #40	; 0x28
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2201      	movs	r2, #1
 8002528:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	b2da      	uxtb	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6979      	ldr	r1, [r7, #20]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fc74 	bl	8005e34 <USB_EPStartXfer>
 800254c:	e005      	b.n	800255a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fc6d 	bl	8005e34 <USB_EPStartXfer>
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 0207 	and.w	r2, r3, #7
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d901      	bls.n	8002582 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e046      	b.n	8002610 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002586:	2b00      	cmp	r3, #0
 8002588:	da0b      	bge.n	80025a2 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	3328      	adds	r3, #40	; 0x28
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	705a      	strb	r2, [r3, #1]
 80025a0:	e009      	b.n	80025b6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_PCD_EP_SetStall+0x72>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e01c      	b.n	8002610 <HAL_PCD_EP_SetStall+0xac>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fedd 	bl	80063a4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f003 ffe0 	bl	80065c6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	f003 020f 	and.w	r2, r3, #15
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	d901      	bls.n	8002636 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e03a      	b.n	80026ac <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800263a:	2b00      	cmp	r3, #0
 800263c:	da0b      	bge.n	8002656 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	3328      	adds	r3, #40	; 0x28
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	705a      	strb	r2, [r3, #1]
 8002654:	e00b      	b.n	800266e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	015b      	lsls	r3, r3, #5
 800265e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_PCD_EP_ClrStall+0x76>
 800268a:	2302      	movs	r3, #2
 800268c:	e00e      	b.n	80026ac <HAL_PCD_EP_ClrStall+0x94>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fec3 	bl	8006428 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026bc:	e274      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026c6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026c8:	8afb      	ldrh	r3, [r7, #22]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80026d2:	7d7b      	ldrb	r3, [r7, #21]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 813c 	bne.w	8002952 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026da:	8afb      	ldrh	r3, [r7, #22]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d14f      	bne.n	8002784 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f4:	b29c      	uxth	r4, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002702:	b29b      	uxth	r3, r3
 8002704:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3328      	adds	r3, #40	; 0x28
 800270a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002714:	b29b      	uxth	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4413      	add	r3, r2
 8002726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	441a      	add	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f006 fee1 	bl	800950c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8228 	beq.w	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 8223 	bne.w	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b292      	uxth	r2, r2
 8002776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002782:	e211      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800278a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279a:	2b00      	cmp	r3, #0
 800279c:	d031      	beq.n	8002802 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f003 ff41 	bl	8006660 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027ea:	4013      	ands	r3, r2
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80027f6:	b292      	uxth	r2, r2
 80027f8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f006 fe5c 	bl	80094b8 <HAL_PCD_SetupStageCallback>
 8002800:	e1d2      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002802:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f280 81ce 	bge.w	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002818:	4013      	ands	r3, r2
 800281a:	b29c      	uxth	r4, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002824:	b292      	uxth	r2, r2
 8002826:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d019      	beq.n	800288c <PCD_EP_ISR_Handler+0x1d8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002870:	b29b      	uxth	r3, r3
 8002872:	f003 fef5 	bl	8006660 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	441a      	add	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002884:	2100      	movs	r1, #0
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f006 fe28 	bl	80094dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461c      	mov	r4, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	441c      	add	r4, r3
 800289e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80028a2:	461c      	mov	r4, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10e      	bne.n	80028ca <PCD_EP_ISR_Handler+0x216>
 80028ac:	8823      	ldrh	r3, [r4, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	8023      	strh	r3, [r4, #0]
 80028b8:	8823      	ldrh	r3, [r4, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	8023      	strh	r3, [r4, #0]
 80028c8:	e02d      	b.n	8002926 <PCD_EP_ISR_Handler+0x272>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b3e      	cmp	r3, #62	; 0x3e
 80028d0:	d812      	bhi.n	80028f8 <PCD_EP_ISR_Handler+0x244>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <PCD_EP_ISR_Handler+0x238>
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8023      	strh	r3, [r4, #0]
 80028f6:	e016      	b.n	8002926 <PCD_EP_ISR_Handler+0x272>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <PCD_EP_ISR_Handler+0x25e>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	3b01      	subs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	b29b      	uxth	r3, r3
 8002916:	029b      	lsls	r3, r3, #10
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29b      	uxth	r3, r3
 8002924:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	b29c      	uxth	r4, r3
 8002938:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800293c:	b29c      	uxth	r4, r3
 800293e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002942:	b29c      	uxth	r4, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <PCD_EP_ISR_Handler+0x510>)
 800294a:	4323      	orrs	r3, r4
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
 8002950:	e12a      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	7d7b      	ldrb	r3, [r7, #21]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f280 80cb 	bge.w	8002b02 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	7d7b      	ldrb	r3, [r7, #21]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29a      	uxth	r2, r3
 800297c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002980:	4013      	ands	r3, r2
 8002982:	b29c      	uxth	r4, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	7d7b      	ldrb	r3, [r7, #21]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002994:	b292      	uxth	r2, r2
 8002996:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002998:	7d7b      	ldrb	r3, [r7, #21]
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	7b1b      	ldrb	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11f      	bne.n	80029ee <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80029d4:	8bfb      	ldrh	r3, [r7, #30]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06e      	beq.n	8002ab8 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88da      	ldrh	r2, [r3, #6]
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	f003 fe3a 	bl	8006660 <USB_ReadPMA>
 80029ec:	e064      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a08:	b29c      	uxth	r4, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <PCD_EP_ISR_Handler+0x514>)
 8002a1a:	4323      	orrs	r3, r4
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01f      	beq.n	8002a7a <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002a60:	8bfb      	ldrh	r3, [r7, #30]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d028      	beq.n	8002ab8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6959      	ldr	r1, [r3, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	891a      	ldrh	r2, [r3, #8]
 8002a72:	8bfb      	ldrh	r3, [r7, #30]
 8002a74:	f003 fdf4 	bl	8006660 <USB_ReadPMA>
 8002a78:	e01e      	b.n	8002ab8 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a9e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002aa0:	8bfb      	ldrh	r3, [r7, #30]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6959      	ldr	r1, [r3, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	895a      	ldrh	r2, [r3, #10]
 8002ab2:	8bfb      	ldrh	r3, [r7, #30]
 8002ab4:	f003 fdd4 	bl	8006660 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	8bfb      	ldrh	r3, [r7, #30]
 8002abe:	441a      	add	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	8bfb      	ldrh	r3, [r7, #30]
 8002aca:	441a      	add	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <PCD_EP_ISR_Handler+0x42e>
 8002ad8:	8bfa      	ldrh	r2, [r7, #30]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d206      	bcs.n	8002af0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f006 fcf7 	bl	80094dc <HAL_PCD_DataOutStageCallback>
 8002aee:	e008      	b.n	8002b02 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	7819      	ldrb	r1, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fca9 	bl	8002454 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b02:	8a7b      	ldrh	r3, [r7, #18]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04d      	beq.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b0c:	7d7b      	ldrb	r3, [r7, #21]
 8002b0e:	015b      	lsls	r3, r3, #5
 8002b10:	3328      	adds	r3, #40	; 0x28
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	7d7b      	ldrb	r3, [r7, #21]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	b29c      	uxth	r4, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	7d7b      	ldrb	r3, [r7, #21]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f006 fcbc 	bl	800950c <HAL_PCD_DataInStageCallback>
 8002b94:	e008      	b.n	8002ba8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	7819      	ldrb	r1, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fca5 	bl	80024f2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f6ff ad82 	blt.w	80026be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3724      	adds	r7, #36	; 0x24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	ffff8080 	.word	0xffff8080
 8002bc8:	ffff80c0 	.word	0xffff80c0

08002bcc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	015b      	lsls	r3, r3, #5
 8002bf2:	3328      	adds	r3, #40	; 0x28
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	e006      	b.n	8002c0a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bfc:	897b      	ldrh	r3, [r7, #10]
 8002bfe:	015b      	lsls	r3, r3, #5
 8002c00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2200      	movs	r2, #0
 8002c14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	80da      	strh	r2, [r3, #6]
 8002c1e:	e00b      	b.n	8002c38 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2201      	movs	r2, #1
 8002c24:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d141      	bne.n	8002d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d131      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd0:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2232      	movs	r2, #50	; 0x32
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9b      	lsrs	r3, r3, #18
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cee:	e002      	b.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d02:	d102      	bne.n	8002d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f2      	bne.n	8002cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d16:	d158      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e057      	b.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a2d      	ldr	r2, [pc, #180]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d2c:	e04d      	b.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d141      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d36:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d131      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4a:	4a23      	ldr	r2, [pc, #140]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d54:	4b20      	ldr	r3, [pc, #128]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d5c:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2232      	movs	r2, #50	; 0x32
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	0c9b      	lsrs	r3, r3, #18
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7a:	e002      	b.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d102      	bne.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f2      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da2:	d112      	bne.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e011      	b.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002db8:	e007      	b.n	8002dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	431bde83 	.word	0x431bde83

08002de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e308      	b.n	8003408 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d075      	beq.n	8002eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4ba3      	ldr	r3, [pc, #652]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d102      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3e>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_OscConfig+0x44>
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d10b      	bne.n	8002e40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	4b99      	ldr	r3, [pc, #612]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <HAL_RCC_OscConfig+0x108>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e2e3      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x74>
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	e01d      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x98>
 8002e62:	4b8b      	ldr	r3, [pc, #556]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a8a      	ldr	r2, [pc, #552]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0xb0>
 8002e7c:	4b84      	ldr	r3, [pc, #528]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a83      	ldr	r2, [pc, #524]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a80      	ldr	r2, [pc, #512]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d013      	beq.n	8002ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe faf0 	bl	8001480 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fe faec 	bl	8001480 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e2a8      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb6:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xc0>
 8002ec2:	e014      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fadc 	bl	8001480 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fad8 	bl	8001480 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	; 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e294      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ede:	4b6c      	ldr	r3, [pc, #432]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0xe8>
 8002eea:	e000      	b.n	8002eee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d075      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f04:	4b62      	ldr	r3, [pc, #392]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d102      	bne.n	8002f1a <HAL_RCC_OscConfig+0x136>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_OscConfig+0x13c>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d11f      	bne.n	8002f60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f20:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x154>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e267      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	4952      	ldr	r1, [pc, #328]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f4c:	4b51      	ldr	r3, [pc, #324]	; (8003094 <HAL_RCC_OscConfig+0x2b0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd ff2d 	bl	8000db0 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d043      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e253      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a48      	ldr	r2, [pc, #288]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fa84 	bl	8001480 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fa80 	bl	8001480 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e23c      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f8e:	4b40      	ldr	r3, [pc, #256]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	4939      	ldr	r1, [pc, #228]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
 8002fae:	e01a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fa60 	bl	8001480 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fa5c 	bl	8001480 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e218      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1e0>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03c      	beq.n	800306c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01c      	beq.n	8003034 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	4a23      	ldr	r2, [pc, #140]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fe fa39 	bl	8001480 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe fa35 	bl	8001480 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1f1      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0ef      	beq.n	8003012 <HAL_RCC_OscConfig+0x22e>
 8003032:	e01b      	b.n	800306c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	4a15      	ldr	r2, [pc, #84]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fa1c 	bl	8001480 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fa18 	bl	8001480 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1d4      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ef      	bne.n	800304c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80ab 	beq.w	80031d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x2b4>
 800308a:	2301      	movs	r3, #1
 800308c:	e005      	b.n	800309a <HAL_RCC_OscConfig+0x2b6>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	20000004 	.word	0x20000004
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4baf      	ldr	r3, [pc, #700]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	4aae      	ldr	r2, [pc, #696]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
 80030aa:	4bac      	ldr	r3, [pc, #688]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ba:	4ba9      	ldr	r3, [pc, #676]	; (8003360 <HAL_RCC_OscConfig+0x57c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c6:	4ba6      	ldr	r3, [pc, #664]	; (8003360 <HAL_RCC_OscConfig+0x57c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4aa5      	ldr	r2, [pc, #660]	; (8003360 <HAL_RCC_OscConfig+0x57c>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe f9d5 	bl	8001480 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe f9d1 	bl	8001480 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e18d      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b9c      	ldr	r3, [pc, #624]	; (8003360 <HAL_RCC_OscConfig+0x57c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d108      	bne.n	8003112 <HAL_RCC_OscConfig+0x32e>
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	4a95      	ldr	r2, [pc, #596]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003110:	e024      	b.n	800315c <HAL_RCC_OscConfig+0x378>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b05      	cmp	r3, #5
 8003118:	d110      	bne.n	800313c <HAL_RCC_OscConfig+0x358>
 800311a:	4b90      	ldr	r3, [pc, #576]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a8e      	ldr	r2, [pc, #568]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312a:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	4a8a      	ldr	r2, [pc, #552]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800313a:	e00f      	b.n	800315c <HAL_RCC_OscConfig+0x378>
 800313c:	4b87      	ldr	r3, [pc, #540]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a86      	ldr	r2, [pc, #536]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800314c:	4b83      	ldr	r3, [pc, #524]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a82      	ldr	r2, [pc, #520]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d016      	beq.n	8003192 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe f98c 	bl	8001480 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe f988 	bl	8001480 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e142      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ed      	beq.n	800316c <HAL_RCC_OscConfig+0x388>
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe f975 	bl	8001480 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fe f971 	bl	8001480 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e12b      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b0:	4b6a      	ldr	r3, [pc, #424]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ed      	bne.n	800319a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031be:	7ffb      	ldrb	r3, [r7, #31]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b65      	ldr	r3, [pc, #404]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a64      	ldr	r2, [pc, #400]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03c      	beq.n	8003256 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01c      	beq.n	800321e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031e4:	4b5d      	ldr	r3, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80031e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ea:	4a5c      	ldr	r2, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe f944 	bl	8001480 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031fc:	f7fe f940 	bl	8001480 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0fc      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800320e:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0ef      	beq.n	80031fc <HAL_RCC_OscConfig+0x418>
 800321c:	e01b      	b.n	8003256 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800321e:	4b4f      	ldr	r3, [pc, #316]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003224:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe f927 	bl	8001480 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003236:	f7fe f923 	bl	8001480 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0df      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003248:	4b44      	ldr	r3, [pc, #272]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800324a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ef      	bne.n	8003236 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80d3 	beq.w	8003406 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003260:	4b3e      	ldr	r3, [pc, #248]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b0c      	cmp	r3, #12
 800326a:	f000 808d 	beq.w	8003388 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d15a      	bne.n	800332c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800327c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe f8fd 	bl	8001480 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe f8f9 	bl	8001480 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0b5      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a8:	4b2c      	ldr	r3, [pc, #176]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x580>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6a11      	ldr	r1, [r2, #32]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032c2:	0212      	lsls	r2, r2, #8
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0552      	lsls	r2, r2, #21
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d6:	0852      	lsrs	r2, r2, #1
 80032d8:	3a01      	subs	r2, #1
 80032da:	0652      	lsls	r2, r2, #25
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032e2:	06d2      	lsls	r2, r2, #27
 80032e4:	430a      	orrs	r2, r1
 80032e6:	491d      	ldr	r1, [pc, #116]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <HAL_RCC_OscConfig+0x578>)
 80032fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003302:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f8bc 	bl	8001480 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe f8b8 	bl	8001480 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e074      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x528>
 800332a:	e06c      	b.n	8003406 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a07      	ldr	r2, [pc, #28]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_OscConfig+0x578>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <HAL_RCC_OscConfig+0x578>)
 800334a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f894 	bl	8001480 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335a:	e00e      	b.n	800337a <HAL_RCC_OscConfig+0x596>
 800335c:	40021000 	.word	0x40021000
 8003360:	40007000 	.word	0x40007000
 8003364:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003368:	f7fe f88a 	bl	8001480 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e046      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <HAL_RCC_OscConfig+0x62c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x584>
 8003386:	e03e      	b.n	8003406 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e039      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_RCC_OscConfig+0x62c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0203 	and.w	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d12c      	bne.n	8003402 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	3b01      	subs	r3, #1
 80033b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d123      	bne.n	8003402 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d11b      	bne.n	8003402 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d113      	bne.n	8003402 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	085b      	lsrs	r3, r3, #1
 80033fa:	3b01      	subs	r3, #1
 80033fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e11e      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b8e      	ldr	r3, [pc, #568]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 020f 	bic.w	r2, r3, #15
 8003442:	498c      	ldr	r1, [pc, #560]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b8a      	ldr	r3, [pc, #552]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e106      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d073      	beq.n	8003550 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d129      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0f4      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003480:	f000 f9b8 	bl	80037f4 <RCC_GetSysClockFreqFromPLLSource>
 8003484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4a7c      	ldr	r2, [pc, #496]	; (800367c <HAL_RCC_ClockConfig+0x268>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d93f      	bls.n	800350e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d033      	beq.n	800350e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d12f      	bne.n	800350e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ae:	4b72      	ldr	r3, [pc, #456]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b6:	4a70      	ldr	r2, [pc, #448]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e024      	b.n	800350e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034cc:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0c6      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	4b66      	ldr	r3, [pc, #408]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e0be      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034ec:	f000 f8ce 	bl	800368c <HAL_RCC_GetSysClockFreq>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4a61      	ldr	r2, [pc, #388]	; (800367c <HAL_RCC_ClockConfig+0x268>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d909      	bls.n	800350e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	4a5d      	ldr	r2, [pc, #372]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003508:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4957      	ldr	r1, [pc, #348]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003520:	f7fd ffae 	bl	8001480 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fd ffaa 	bl	8001480 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e095      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b4e      	ldr	r3, [pc, #312]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	4b43      	ldr	r3, [pc, #268]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a42      	ldr	r2, [pc, #264]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800356e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003572:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800358a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800358e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4936      	ldr	r1, [pc, #216]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d105      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a32      	ldr	r2, [pc, #200]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d21d      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 020f 	bic.w	r2, r3, #15
 80035cc:	4929      	ldr	r1, [pc, #164]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d4:	f7fd ff54 	bl	8001480 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fd ff50 	bl	8001480 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e03b      	b.n	800366a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1ed      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4917      	ldr	r1, [pc, #92]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490f      	ldr	r1, [pc, #60]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800363e:	f000 f825 	bl	800368c <HAL_RCC_GetSysClockFreq>
 8003642:	4601      	mov	r1, r0
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <HAL_RCC_ClockConfig+0x264>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <HAL_RCC_ClockConfig+0x26c>)
 8003650:	5cd3      	ldrb	r3, [r2, r3]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	fa21 f303 	lsr.w	r3, r1, r3
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x270>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd fba4 	bl	8000db0 <HAL_InitTick>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40022000 	.word	0x40022000
 8003678:	40021000 	.word	0x40021000
 800367c:	04c4b400 	.word	0x04c4b400
 8003680:	08009b5c 	.word	0x08009b5c
 8003684:	20000000 	.word	0x20000000
 8003688:	20000004 	.word	0x20000004

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003692:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800369e:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e047      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e03e      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d136      	bne.n	8003730 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3301      	adds	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	4a16      	ldr	r2, [pc, #88]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ea:	68d2      	ldr	r2, [r2, #12]
 80036ec:	0a12      	lsrs	r2, r2, #8
 80036ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	0a12      	lsrs	r2, r2, #8
 8003708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0e5b      	lsrs	r3, r3, #25
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e001      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003734:	693b      	ldr	r3, [r7, #16]
}
 8003736:	4618      	mov	r0, r3
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	00f42400 	.word	0x00f42400

0800374c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000000 	.word	0x20000000

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003768:	f7ff fff0 	bl	800374c <HAL_RCC_GetHCLKFreq>
 800376c:	4601      	mov	r1, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0adb      	lsrs	r3, r3, #11
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_RCC_GetPCLK2Freq+0x28>)
 800377a:	5cd3      	ldrb	r3, [r2, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	08009b6c 	.word	0x08009b6c

08003790 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	220f      	movs	r2, #15
 800379e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_GetClockConfig+0x5c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0203 	and.w	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <HAL_RCC_GetClockConfig+0x5c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCC_GetClockConfig+0x5c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <HAL_RCC_GetClockConfig+0x60>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	601a      	str	r2, [r3, #0]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40022000 	.word	0x40022000

080037f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3301      	adds	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d10c      	bne.n	8003832 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003822:	68d2      	ldr	r2, [r2, #12]
 8003824:	0a12      	lsrs	r2, r2, #8
 8003826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	617b      	str	r3, [r7, #20]
    break;
 8003830:	e00c      	b.n	800384c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	0a12      	lsrs	r2, r2, #8
 8003840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
    break;
 800384a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	0e5b      	lsrs	r3, r3, #25
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003866:	687b      	ldr	r3, [r7, #4]
}
 8003868:	4618      	mov	r0, r3
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40021000 	.word	0x40021000
 8003878:	00f42400 	.word	0x00f42400

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003884:	2300      	movs	r3, #0
 8003886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003888:	2300      	movs	r3, #0
 800388a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8098 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b40      	ldr	r3, [pc, #256]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	4a3f      	ldr	r2, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
 80038b6:	4b3d      	ldr	r3, [pc, #244]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c6:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a39      	ldr	r2, [pc, #228]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fd fdd5 	bl	8001480 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	e009      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fd fdd1 	bl	8001480 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	74fb      	strb	r3, [r7, #19]
        break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ef      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d159      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003900:	4b2a      	ldr	r3, [pc, #168]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01e      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d019      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800391c:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd fd91 	bl	8001480 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003960:	e00b      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fd8d 	bl	8001480 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d902      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	74fb      	strb	r3, [r7, #19]
            break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ec      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
 80039aa:	e005      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4ba6      	ldr	r3, [pc, #664]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4aa5      	ldr	r2, [pc, #660]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4ba0      	ldr	r3, [pc, #640]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	499c      	ldr	r1, [pc, #624]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b97      	ldr	r3, [pc, #604]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4994      	ldr	r1, [pc, #592]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b8f      	ldr	r3, [pc, #572]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	498b      	ldr	r1, [pc, #556]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b86      	ldr	r3, [pc, #536]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	4983      	ldr	r1, [pc, #524]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5e:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	497a      	ldr	r1, [pc, #488]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a80:	4b75      	ldr	r3, [pc, #468]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	4972      	ldr	r1, [pc, #456]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4969      	ldr	r1, [pc, #420]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac4:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4961      	ldr	r1, [pc, #388]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b5c      	ldr	r3, [pc, #368]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	4958      	ldr	r1, [pc, #352]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	4950      	ldr	r1, [pc, #320]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4942      	ldr	r1, [pc, #264]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a3c      	ldr	r2, [pc, #240]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b78:	4b37      	ldr	r3, [pc, #220]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4934      	ldr	r1, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	4926      	ldr	r1, [pc, #152]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	4918      	ldr	r1, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	490a      	ldr	r1, [pc, #40]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e084      	b.n	8003d78 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fc fee1 	bl	8000a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cae:	d902      	bls.n	8003cb6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e002      	b.n	8003cbc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cc4:	d007      	beq.n	8003cd6 <HAL_SPI_Init+0x7a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cce:	d002      	beq.n	8003cd6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce6:	d903      	bls.n	8003cf0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
 8003cee:	e002      	b.n	8003cf6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	ea42 0103 	orr.w	r1, r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	f003 0204 	and.w	r2, r3, #4
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	ea42 0103 	orr.w	r1, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e049      	b.n	8003e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fc ff5c 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fe46 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e021      	b.n	8003e8c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_TIM_Base_Start_IT+0x68>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d00b      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x5a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d007      	beq.n	8003e8a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	00010007 	.word	0x00010007

08003e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e049      	b.n	8003f42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fc fe84 	bl	8000bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 fdb8 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start_DMA+0x28>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e03c      	b.n	8003fee <HAL_TIM_PWM_Start_DMA+0xa2>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d109      	bne.n	8003f8e <HAL_TIM_PWM_Start_DMA+0x42>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e02f      	b.n	8003fee <HAL_TIM_PWM_Start_DMA+0xa2>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e022      	b.n	8003fee <HAL_TIM_PWM_Start_DMA+0xa2>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d109      	bne.n	8003fc2 <HAL_TIM_PWM_Start_DMA+0x76>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e015      	b.n	8003fee <HAL_TIM_PWM_Start_DMA+0xa2>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start_DMA+0x90>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	bf0c      	ite	eq
 8003fd4:	2301      	moveq	r3, #1
 8003fd6:	2300      	movne	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e008      	b.n	8003fee <HAL_TIM_PWM_Start_DMA+0xa2>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e178      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e03c      	b.n	800408a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d109      	bne.n	800402a <HAL_TIM_PWM_Start_DMA+0xde>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e02f      	b.n	800408a <HAL_TIM_PWM_Start_DMA+0x13e>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d109      	bne.n	8004044 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e022      	b.n	800408a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d109      	bne.n	800405e <HAL_TIM_PWM_Start_DMA+0x112>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e015      	b.n	800408a <HAL_TIM_PWM_Start_DMA+0x13e>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b10      	cmp	r3, #16
 8004062:	d109      	bne.n	8004078 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e008      	b.n	800408a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d034      	beq.n	80040f8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start_DMA+0x152>
 8004094:	887b      	ldrh	r3, [r7, #2]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e124      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start_DMA+0x162>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ac:	e026      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start_DMA+0x172>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	e01e      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start_DMA+0x182>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	e016      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start_DMA+0x192>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040dc:	e00e      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start_DMA+0x1a2>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ec:	e006      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f6:	e001      	b.n	80040fc <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0f5      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b0c      	cmp	r3, #12
 8004100:	f200 80ae 	bhi.w	8004260 <HAL_TIM_PWM_Start_DMA+0x314>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004141 	.word	0x08004141
 8004110:	08004261 	.word	0x08004261
 8004114:	08004261 	.word	0x08004261
 8004118:	08004261 	.word	0x08004261
 800411c:	08004189 	.word	0x08004189
 8004120:	08004261 	.word	0x08004261
 8004124:	08004261 	.word	0x08004261
 8004128:	08004261 	.word	0x08004261
 800412c:	080041d1 	.word	0x080041d1
 8004130:	08004261 	.word	0x08004261
 8004134:	08004261 	.word	0x08004261
 8004138:	08004261 	.word	0x08004261
 800413c:	08004219 	.word	0x08004219
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	4a6a      	ldr	r2, [pc, #424]	; (80042f0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	4a69      	ldr	r2, [pc, #420]	; (80042f4 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800414e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	4a68      	ldr	r2, [pc, #416]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3334      	adds	r3, #52	; 0x34
 8004164:	461a      	mov	r2, r3
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	f7fd fb1e 	bl	80017a8 <HAL_DMA_Start_IT>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0b8      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004184:	60da      	str	r2, [r3, #12]
      break;
 8004186:	e06c      	b.n	8004262 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	4a57      	ldr	r2, [pc, #348]	; (80042f4 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004196:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	4a56      	ldr	r2, [pc, #344]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800419e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3338      	adds	r3, #56	; 0x38
 80041ac:	461a      	mov	r2, r3
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	f7fd fafa 	bl	80017a8 <HAL_DMA_Start_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e094      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041cc:	60da      	str	r2, [r3, #12]
      break;
 80041ce:	e048      	b.n	8004262 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	4a46      	ldr	r2, [pc, #280]	; (80042f0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4a45      	ldr	r2, [pc, #276]	; (80042f4 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80041de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	4a44      	ldr	r2, [pc, #272]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80041e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	333c      	adds	r3, #60	; 0x3c
 80041f4:	461a      	mov	r2, r3
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	f7fd fad6 	bl	80017a8 <HAL_DMA_Start_IT>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e070      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004214:	60da      	str	r2, [r3, #12]
      break;
 8004216:	e024      	b.n	8004262 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004226:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a32      	ldr	r2, [pc, #200]	; (80042f8 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800422e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3340      	adds	r3, #64	; 0x40
 800423c:	461a      	mov	r2, r3
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	f7fd fab2 	bl	80017a8 <HAL_DMA_Start_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e04c      	b.n	80042e8 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800425c:	60da      	str	r2, [r3, #12]
      break;
 800425e:	e000      	b.n	8004262 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004260:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2201      	movs	r2, #1
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 ff76 	bl	800515c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_TIM_PWM_Start_DMA+0x356>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a20      	ldr	r2, [pc, #128]	; (8004300 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIM_PWM_Start_DMA+0x356>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIM_PWM_Start_DMA+0x356>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_Start_DMA+0x35a>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_PWM_Start_DMA+0x35c>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d00b      	beq.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x39a>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d007      	beq.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	0800493f 	.word	0x0800493f
 80042f4:	080049e7 	.word	0x080049e7
 80042f8:	080048ad 	.word	0x080048ad
 80042fc:	40012c00 	.word	0x40012c00
 8004300:	40013400 	.word	0x40013400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800
 8004310:	00010007 	.word	0x00010007

08004314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d122      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11b      	bne.n	8004370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0202 	mvn.w	r2, #2
 8004340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa76 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 800435c:	e005      	b.n	800436a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fa68 	bl	8004834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa79 	bl	800485c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d122      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d11b      	bne.n	80043c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f06f 0204 	mvn.w	r2, #4
 8004394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa4c 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 80043b0:	e005      	b.n	80043be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa3e 	bl	8004834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fa4f 	bl	800485c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d122      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d11b      	bne.n	8004418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0208 	mvn.w	r2, #8
 80043e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa22 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa14 	bl	8004834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fa25 	bl	800485c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d122      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b10      	cmp	r3, #16
 8004432:	d11b      	bne.n	800446c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0210 	mvn.w	r2, #16
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2208      	movs	r2, #8
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9f8 	bl	8004848 <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9ea 	bl	8004834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f9fb 	bl	800485c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0201 	mvn.w	r2, #1
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fa88 	bl	80009a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b80      	cmp	r3, #128	; 0x80
 80044a4:	d10e      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d107      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ff9e 	bl	8005400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 ff91 	bl	8005414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f9b3 	bl	8004884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d10e      	bne.n	800454a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d107      	bne.n	800454a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0220 	mvn.w	r2, #32
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 ff51 	bl	80053ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004558:	d10f      	bne.n	800457a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004568:	d107      	bne.n	800457a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 ff57 	bl	8005428 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004588:	d10f      	bne.n	80045aa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004598:	d107      	bne.n	80045aa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 ff49 	bl	800543c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b8:	d10f      	bne.n	80045da <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 ff3b 	bl	8005450 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e8:	d10f      	bne.n	800460a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 ff2d 	bl	8005464 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800462a:	2302      	movs	r3, #2
 800462c:	e0fd      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x216>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b14      	cmp	r3, #20
 800463a:	f200 80f0 	bhi.w	800481e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004699 	.word	0x08004699
 8004648:	0800481f 	.word	0x0800481f
 800464c:	0800481f 	.word	0x0800481f
 8004650:	0800481f 	.word	0x0800481f
 8004654:	080046d9 	.word	0x080046d9
 8004658:	0800481f 	.word	0x0800481f
 800465c:	0800481f 	.word	0x0800481f
 8004660:	0800481f 	.word	0x0800481f
 8004664:	0800471b 	.word	0x0800471b
 8004668:	0800481f 	.word	0x0800481f
 800466c:	0800481f 	.word	0x0800481f
 8004670:	0800481f 	.word	0x0800481f
 8004674:	0800475b 	.word	0x0800475b
 8004678:	0800481f 	.word	0x0800481f
 800467c:	0800481f 	.word	0x0800481f
 8004680:	0800481f 	.word	0x0800481f
 8004684:	0800479d 	.word	0x0800479d
 8004688:	0800481f 	.word	0x0800481f
 800468c:	0800481f 	.word	0x0800481f
 8004690:	0800481f 	.word	0x0800481f
 8004694:	080047dd 	.word	0x080047dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa66 	bl	8004b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0208 	orr.w	r2, r2, #8
 80046b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0204 	bic.w	r2, r2, #4
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	619a      	str	r2, [r3, #24]
      break;
 80046d6:	e0a3      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fad6 	bl	8004c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]
      break;
 8004718:	e082      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fb3f 	bl	8004da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0208 	orr.w	r2, r2, #8
 8004734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0204 	bic.w	r2, r2, #4
 8004744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	61da      	str	r2, [r3, #28]
      break;
 8004758:	e062      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fba7 	bl	8004eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69d9      	ldr	r1, [r3, #28]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	021a      	lsls	r2, r3, #8
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	61da      	str	r2, [r3, #28]
      break;
 800479a:	e041      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fc10 	bl	8004fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0204 	bic.w	r2, r2, #4
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047da:	e021      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fc54 	bl	8005090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800481c:	e000      	b.n	8004820 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800481e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	e02a      	b.n	800492a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d107      	bne.n	80048ee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	e01d      	b.n	800492a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2204      	movs	r2, #4
 80048fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004906:	e010      	b.n	800492a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	429a      	cmp	r2, r3
 8004910:	d107      	bne.n	8004922 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2208      	movs	r2, #8
 8004916:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004920:	e003      	b.n	800492a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff ffb4 	bl	8004898 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	771a      	strb	r2, [r3, #28]
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d10b      	bne.n	800496e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d136      	bne.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	e031      	b.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	429a      	cmp	r2, r3
 8004976:	d10b      	bne.n	8004990 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2202      	movs	r2, #2
 800497c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d125      	bne.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498e:	e020      	b.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d10b      	bne.n	80049b2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d114      	bne.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	e00f      	b.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d10a      	bne.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2208      	movs	r2, #8
 80049c0:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff42 	bl	800485c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	771a      	strb	r2, [r3, #28]
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d103      	bne.n	8004a06 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]
 8004a04:	e019      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d103      	bne.n	8004a18 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2202      	movs	r2, #2
 8004a14:	771a      	strb	r2, [r3, #28]
 8004a16:	e010      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d103      	bne.n	8004a2a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2204      	movs	r2, #4
 8004a26:	771a      	strb	r2, [r3, #28]
 8004a28:	e007      	b.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d102      	bne.n	8004a3a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2208      	movs	r2, #8
 8004a38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff ff18 	bl	8004870 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3c      	ldr	r2, [pc, #240]	; (8004b54 <TIM_Base_SetConfig+0x104>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a39      	ldr	r2, [pc, #228]	; (8004b58 <TIM_Base_SetConfig+0x108>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <TIM_Base_SetConfig+0x10c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <TIM_Base_SetConfig+0x110>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2d      	ldr	r2, [pc, #180]	; (8004b54 <TIM_Base_SetConfig+0x104>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <TIM_Base_SetConfig+0x108>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a29      	ldr	r2, [pc, #164]	; (8004b5c <TIM_Base_SetConfig+0x10c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a28      	ldr	r2, [pc, #160]	; (8004b60 <TIM_Base_SetConfig+0x110>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a27      	ldr	r2, [pc, #156]	; (8004b64 <TIM_Base_SetConfig+0x114>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a26      	ldr	r2, [pc, #152]	; (8004b68 <TIM_Base_SetConfig+0x118>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a25      	ldr	r2, [pc, #148]	; (8004b6c <TIM_Base_SetConfig+0x11c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <TIM_Base_SetConfig+0x104>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0xe8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a11      	ldr	r2, [pc, #68]	; (8004b60 <TIM_Base_SetConfig+0x110>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0xe8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <TIM_Base_SetConfig+0x114>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0xe8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0f      	ldr	r2, [pc, #60]	; (8004b68 <TIM_Base_SetConfig+0x118>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0xe8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <TIM_Base_SetConfig+0x11c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40013400 	.word	0x40013400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0302 	bic.w	r3, r3, #2
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <TIM_OC1_SetConfig+0x10c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00f      	beq.n	8004bf0 <TIM_OC1_SetConfig+0x80>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <TIM_OC1_SetConfig+0x110>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_OC1_SetConfig+0x80>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <TIM_OC1_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_OC1_SetConfig+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_OC1_SetConfig+0x118>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_OC1_SetConfig+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_OC1_SetConfig+0x11c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10c      	bne.n	8004c0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f023 0308 	bic.w	r3, r3, #8
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <TIM_OC1_SetConfig+0x10c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_OC1_SetConfig+0xc2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1a      	ldr	r2, [pc, #104]	; (8004c80 <TIM_OC1_SetConfig+0x110>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_OC1_SetConfig+0xc2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <TIM_OC1_SetConfig+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_OC1_SetConfig+0xc2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <TIM_OC1_SetConfig+0x118>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_OC1_SetConfig+0xc2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC1_SetConfig+0x11c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d111      	bne.n	8004c56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0210 	bic.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0320 	bic.w	r3, r3, #32
 8004cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <TIM_OC2_SetConfig+0x100>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_OC2_SetConfig+0x6c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a27      	ldr	r2, [pc, #156]	; (8004d94 <TIM_OC2_SetConfig+0x104>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10d      	bne.n	8004d18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	; (8004d90 <TIM_OC2_SetConfig+0x100>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00f      	beq.n	8004d40 <TIM_OC2_SetConfig+0xb0>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a1c      	ldr	r2, [pc, #112]	; (8004d94 <TIM_OC2_SetConfig+0x104>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <TIM_OC2_SetConfig+0xb0>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <TIM_OC2_SetConfig+0x108>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC2_SetConfig+0xb0>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a1a      	ldr	r2, [pc, #104]	; (8004d9c <TIM_OC2_SetConfig+0x10c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC2_SetConfig+0xb0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <TIM_OC2_SetConfig+0x110>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d113      	bne.n	8004d68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40013400 	.word	0x40013400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	40014400 	.word	0x40014400
 8004da0:	40014800 	.word	0x40014800

08004da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <TIM_OC3_SetConfig+0xfc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC3_SetConfig+0x6a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <TIM_OC3_SetConfig+0x100>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d10d      	bne.n	8004e2a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <TIM_OC3_SetConfig+0xfc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00f      	beq.n	8004e52 <TIM_OC3_SetConfig+0xae>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <TIM_OC3_SetConfig+0x100>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00b      	beq.n	8004e52 <TIM_OC3_SetConfig+0xae>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <TIM_OC3_SetConfig+0x104>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <TIM_OC3_SetConfig+0xae>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <TIM_OC3_SetConfig+0x108>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d003      	beq.n	8004e52 <TIM_OC3_SetConfig+0xae>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <TIM_OC3_SetConfig+0x10c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d113      	bne.n	8004e7a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <TIM_OC4_SetConfig+0x100>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_OC4_SetConfig+0x6c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <TIM_OC4_SetConfig+0x104>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10d      	bne.n	8004f3c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	031b      	lsls	r3, r3, #12
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <TIM_OC4_SetConfig+0x100>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00f      	beq.n	8004f64 <TIM_OC4_SetConfig+0xb0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <TIM_OC4_SetConfig+0x104>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_OC4_SetConfig+0xb0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <TIM_OC4_SetConfig+0x108>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_OC4_SetConfig+0xb0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1a      	ldr	r2, [pc, #104]	; (8004fc0 <TIM_OC4_SetConfig+0x10c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_OC4_SetConfig+0xb0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <TIM_OC4_SetConfig+0x110>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d113      	bne.n	8004f8c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40013400 	.word	0x40013400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800

08004fc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800500c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	041b      	lsls	r3, r3, #16
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <TIM_OC5_SetConfig+0xb4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <TIM_OC5_SetConfig+0x7a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a16      	ldr	r2, [pc, #88]	; (8005080 <TIM_OC5_SetConfig+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_OC5_SetConfig+0x7a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a15      	ldr	r2, [pc, #84]	; (8005084 <TIM_OC5_SetConfig+0xbc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_OC5_SetConfig+0x7a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a14      	ldr	r2, [pc, #80]	; (8005088 <TIM_OC5_SetConfig+0xc0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC5_SetConfig+0x7a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a13      	ldr	r2, [pc, #76]	; (800508c <TIM_OC5_SetConfig+0xc4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d109      	bne.n	8005056 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	621a      	str	r2, [r3, #32]
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	40014400 	.word	0x40014400
 800508c:	40014800 	.word	0x40014800

08005090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	051b      	lsls	r3, r3, #20
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <TIM_OC6_SetConfig+0xb8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00f      	beq.n	800510c <TIM_OC6_SetConfig+0x7c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a17      	ldr	r2, [pc, #92]	; (800514c <TIM_OC6_SetConfig+0xbc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00b      	beq.n	800510c <TIM_OC6_SetConfig+0x7c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <TIM_OC6_SetConfig+0xc0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_OC6_SetConfig+0x7c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a15      	ldr	r2, [pc, #84]	; (8005154 <TIM_OC6_SetConfig+0xc4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC6_SetConfig+0x7c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a14      	ldr	r2, [pc, #80]	; (8005158 <TIM_OC6_SetConfig+0xc8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40013400 	.word	0x40013400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2201      	movs	r2, #1
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
}
 800519a:	bf00      	nop
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e065      	b.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a2b      	ldr	r2, [pc, #172]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d108      	bne.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d013      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10c      	bne.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e087      	b.n	80053d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d106      	bne.n	8005364 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d126      	bne.n	80053c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	051b      	lsls	r3, r3, #20
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a0e      	ldr	r2, [pc, #56]	; (80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d106      	bne.n	80053c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400

080053ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005480:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	b29b      	uxth	r3, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054b2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80054b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054e0:	b084      	sub	sp, #16
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	f107 0014 	add.w	r0, r7, #20
 80054ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffb0 	bl	8005478 <USB_EnableGlobalInt>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005524:	b004      	add	sp, #16
 8005526:	4770      	bx	lr

08005528 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005528:	b490      	push	{r4, r7}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	2b03      	cmp	r3, #3
 8005554:	d819      	bhi.n	800558a <USB_ActivateEndpoint+0x62>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <USB_ActivateEndpoint+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005581 	.word	0x08005581
 8005564:	08005591 	.word	0x08005591
 8005568:	08005577 	.word	0x08005577
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800556c:	89bb      	ldrh	r3, [r7, #12]
 800556e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005572:	81bb      	strh	r3, [r7, #12]
      break;
 8005574:	e00d      	b.n	8005592 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005576:	89bb      	ldrh	r3, [r7, #12]
 8005578:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800557c:	81bb      	strh	r3, [r7, #12]
      break;
 800557e:	e008      	b.n	8005592 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005580:	89bb      	ldrh	r3, [r7, #12]
 8005582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005586:	81bb      	strh	r3, [r7, #12]
      break;
 8005588:	e003      	b.n	8005592 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
      break;
 800558e:	e000      	b.n	8005592 <USB_ActivateEndpoint+0x6a>
      break;
 8005590:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	89bb      	ldrh	r3, [r7, #12]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	b21b      	sxth	r3, r3
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	b21a      	sxth	r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	4313      	orrs	r3, r2
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	b29c      	uxth	r4, r3
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	4b8a      	ldr	r3, [pc, #552]	; (800580c <USB_ActivateEndpoint+0x2e4>)
 80055e4:	4323      	orrs	r3, r4
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	7b1b      	ldrb	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8112 	bne.w	8005818 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d067      	beq.n	80056cc <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80055fc:	687c      	ldr	r4, [r7, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005604:	b29b      	uxth	r3, r3
 8005606:	441c      	add	r4, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4423      	add	r3, r4
 8005610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005614:	461c      	mov	r4, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	88db      	ldrh	r3, [r3, #6]
 800561a:	085b      	lsrs	r3, r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29c      	uxth	r4, r3
 8005632:	4623      	mov	r3, r4
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d014      	beq.n	8005666 <USB_ActivateEndpoint+0x13e>
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	b29c      	uxth	r4, r3
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	4b6c      	ldr	r3, [pc, #432]	; (8005810 <USB_ActivateEndpoint+0x2e8>)
 8005660:	4323      	orrs	r3, r4
 8005662:	b29b      	uxth	r3, r3
 8005664:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	78db      	ldrb	r3, [r3, #3]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d018      	beq.n	80056a0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005684:	b29c      	uxth	r4, r3
 8005686:	f084 0320 	eor.w	r3, r4, #32
 800568a:	b29c      	uxth	r4, r3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	4b5d      	ldr	r3, [pc, #372]	; (800580c <USB_ActivateEndpoint+0x2e4>)
 8005698:	4323      	orrs	r3, r4
 800569a:	b29b      	uxth	r3, r3
 800569c:	8013      	strh	r3, [r2, #0]
 800569e:	e22b      	b.n	8005af8 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	b29c      	uxth	r4, r3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	441a      	add	r2, r3
 80056c2:	4b52      	ldr	r3, [pc, #328]	; (800580c <USB_ActivateEndpoint+0x2e4>)
 80056c4:	4323      	orrs	r3, r4
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	8013      	strh	r3, [r2, #0]
 80056ca:	e215      	b.n	8005af8 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056cc:	687c      	ldr	r4, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	441c      	add	r4, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4423      	add	r3, r4
 80056e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e4:	461c      	mov	r4, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	88db      	ldrh	r3, [r3, #6]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056f4:	687c      	ldr	r4, [r7, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	441c      	add	r4, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4423      	add	r3, r4
 8005708:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800570c:	461c      	mov	r4, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10e      	bne.n	8005734 <USB_ActivateEndpoint+0x20c>
 8005716:	8823      	ldrh	r3, [r4, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29b      	uxth	r3, r3
 8005720:	8023      	strh	r3, [r4, #0]
 8005722:	8823      	ldrh	r3, [r4, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572e:	b29b      	uxth	r3, r3
 8005730:	8023      	strh	r3, [r4, #0]
 8005732:	e02d      	b.n	8005790 <USB_ActivateEndpoint+0x268>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	2b3e      	cmp	r3, #62	; 0x3e
 800573a:	d812      	bhi.n	8005762 <USB_ActivateEndpoint+0x23a>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <USB_ActivateEndpoint+0x22e>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3301      	adds	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	b29b      	uxth	r3, r3
 800575a:	029b      	lsls	r3, r3, #10
 800575c:	b29b      	uxth	r3, r3
 800575e:	8023      	strh	r3, [r4, #0]
 8005760:	e016      	b.n	8005790 <USB_ActivateEndpoint+0x268>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 031f 	and.w	r3, r3, #31
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <USB_ActivateEndpoint+0x254>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3b01      	subs	r3, #1
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29b      	uxth	r3, r3
 800578e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	b29c      	uxth	r4, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d014      	beq.n	80057d2 <USB_ActivateEndpoint+0x2aa>
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	b29c      	uxth	r4, r3
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	4b12      	ldr	r3, [pc, #72]	; (8005814 <USB_ActivateEndpoint+0x2ec>)
 80057cc:	4323      	orrs	r3, r4
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	b29c      	uxth	r4, r3
 80057ea:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80057ee:	b29c      	uxth	r4, r3
 80057f0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80057f4:	b29c      	uxth	r4, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	4b02      	ldr	r3, [pc, #8]	; (800580c <USB_ActivateEndpoint+0x2e4>)
 8005802:	4323      	orrs	r3, r4
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]
 8005808:	e176      	b.n	8005af8 <USB_ActivateEndpoint+0x5d0>
 800580a:	bf00      	nop
 800580c:	ffff8080 	.word	0xffff8080
 8005810:	ffff80c0 	.word	0xffff80c0
 8005814:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582e:	b29c      	uxth	r4, r3
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	4b96      	ldr	r3, [pc, #600]	; (8005a94 <USB_ActivateEndpoint+0x56c>)
 800583c:	4323      	orrs	r3, r4
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005842:	687c      	ldr	r4, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584a:	b29b      	uxth	r3, r3
 800584c:	441c      	add	r4, r3
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4423      	add	r3, r4
 8005856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585a:	461c      	mov	r4, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	891b      	ldrh	r3, [r3, #8]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	b29b      	uxth	r3, r3
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	8023      	strh	r3, [r4, #0]
 800586a:	687c      	ldr	r4, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	441c      	add	r4, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4423      	add	r3, r4
 800587e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005882:	461c      	mov	r4, r3
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	895b      	ldrh	r3, [r3, #10]
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	b29b      	uxth	r3, r3
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 8088 	bne.w	80059ac <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29c      	uxth	r4, r3
 80058aa:	4623      	mov	r3, r4
 80058ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d014      	beq.n	80058de <USB_ActivateEndpoint+0x3b6>
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	b29c      	uxth	r4, r3
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	4b70      	ldr	r3, [pc, #448]	; (8005a98 <USB_ActivateEndpoint+0x570>)
 80058d8:	4323      	orrs	r3, r4
 80058da:	b29b      	uxth	r3, r3
 80058dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29c      	uxth	r4, r3
 80058ec:	4623      	mov	r3, r4
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d014      	beq.n	8005920 <USB_ActivateEndpoint+0x3f8>
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590c:	b29c      	uxth	r4, r3
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	441a      	add	r2, r3
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <USB_ActivateEndpoint+0x574>)
 800591a:	4323      	orrs	r3, r4
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	b29c      	uxth	r4, r3
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <USB_ActivateEndpoint+0x574>)
 8005944:	4323      	orrs	r3, r4
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	b29c      	uxth	r4, r3
 8005962:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005966:	b29c      	uxth	r4, r3
 8005968:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800596c:	b29c      	uxth	r4, r3
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	4b49      	ldr	r3, [pc, #292]	; (8005aa0 <USB_ActivateEndpoint+0x578>)
 800597a:	4323      	orrs	r3, r4
 800597c:	b29b      	uxth	r3, r3
 800597e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005996:	b29c      	uxth	r4, r3
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	4b3f      	ldr	r3, [pc, #252]	; (8005aa0 <USB_ActivateEndpoint+0x578>)
 80059a4:	4323      	orrs	r3, r4
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
 80059aa:	e0a5      	b.n	8005af8 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29c      	uxth	r4, r3
 80059ba:	4623      	mov	r3, r4
 80059bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d014      	beq.n	80059ee <USB_ActivateEndpoint+0x4c6>
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	b29c      	uxth	r4, r3
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <USB_ActivateEndpoint+0x570>)
 80059e8:	4323      	orrs	r3, r4
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29c      	uxth	r4, r3
 80059fc:	4623      	mov	r3, r4
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d014      	beq.n	8005a30 <USB_ActivateEndpoint+0x508>
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1c:	b29c      	uxth	r4, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <USB_ActivateEndpoint+0x574>)
 8005a2a:	4323      	orrs	r3, r4
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a46:	b29c      	uxth	r4, r3
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <USB_ActivateEndpoint+0x570>)
 8005a54:	4323      	orrs	r3, r4
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d020      	beq.n	8005aa4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	f084 0320 	eor.w	r3, r4, #32
 8005a7e:	b29c      	uxth	r4, r3
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <USB_ActivateEndpoint+0x578>)
 8005a8c:	4323      	orrs	r3, r4
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
 8005a92:	e01c      	b.n	8005ace <USB_ActivateEndpoint+0x5a6>
 8005a94:	ffff8180 	.word	0xffff8180
 8005a98:	ffffc080 	.word	0xffffc080
 8005a9c:	ffff80c0 	.word	0xffff80c0
 8005aa0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aba:	b29c      	uxth	r4, r3
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <USB_ActivateEndpoint+0x5dc>)
 8005ac8:	4323      	orrs	r3, r4
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	b29c      	uxth	r4, r3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	441a      	add	r2, r3
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <USB_ActivateEndpoint+0x5dc>)
 8005af2:	4323      	orrs	r3, r4
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc90      	pop	{r4, r7}
 8005b02:	4770      	bx	lr
 8005b04:	ffff8080 	.word	0xffff8080

08005b08 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b08:	b490      	push	{r4, r7}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	7b1b      	ldrb	r3, [r3, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d171      	bne.n	8005bfe <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d036      	beq.n	8005b90 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29c      	uxth	r4, r3
 8005b30:	4623      	mov	r3, r4
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d014      	beq.n	8005b64 <USB_DeactivateEndpoint+0x5c>
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	b29c      	uxth	r4, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <USB_DeactivateEndpoint+0x204>)
 8005b5e:	4323      	orrs	r3, r4
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7a:	b29c      	uxth	r4, r3
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <USB_DeactivateEndpoint+0x208>)
 8005b88:	4323      	orrs	r3, r4
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	8013      	strh	r3, [r2, #0]
 8005b8e:	e144      	b.n	8005e1a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29c      	uxth	r4, r3
 8005b9e:	4623      	mov	r3, r4
 8005ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d014      	beq.n	8005bd2 <USB_DeactivateEndpoint+0xca>
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	b29c      	uxth	r4, r3
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	441a      	add	r2, r3
 8005bca:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <USB_DeactivateEndpoint+0x20c>)
 8005bcc:	4323      	orrs	r3, r4
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	b29c      	uxth	r4, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	441a      	add	r2, r3
 8005bf4:	4b46      	ldr	r3, [pc, #280]	; (8005d10 <USB_DeactivateEndpoint+0x208>)
 8005bf6:	4323      	orrs	r3, r4
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
 8005bfc:	e10d      	b.n	8005e1a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 8088 	bne.w	8005d18 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29c      	uxth	r4, r3
 8005c16:	4623      	mov	r3, r4
 8005c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d014      	beq.n	8005c4a <USB_DeactivateEndpoint+0x142>
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	b29c      	uxth	r4, r3
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	441a      	add	r2, r3
 8005c42:	4b34      	ldr	r3, [pc, #208]	; (8005d14 <USB_DeactivateEndpoint+0x20c>)
 8005c44:	4323      	orrs	r3, r4
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29c      	uxth	r4, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d014      	beq.n	8005c8c <USB_DeactivateEndpoint+0x184>
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c78:	b29c      	uxth	r4, r3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <USB_DeactivateEndpoint+0x204>)
 8005c86:	4323      	orrs	r3, r4
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	b29c      	uxth	r4, r3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <USB_DeactivateEndpoint+0x204>)
 8005cb0:	4323      	orrs	r3, r4
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	b29c      	uxth	r4, r3
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <USB_DeactivateEndpoint+0x208>)
 8005cda:	4323      	orrs	r3, r4
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf6:	b29c      	uxth	r4, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <USB_DeactivateEndpoint+0x208>)
 8005d04:	4323      	orrs	r3, r4
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
 8005d0a:	e086      	b.n	8005e1a <USB_DeactivateEndpoint+0x312>
 8005d0c:	ffff80c0 	.word	0xffff80c0
 8005d10:	ffff8080 	.word	0xffff8080
 8005d14:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29c      	uxth	r4, r3
 8005d26:	4623      	mov	r3, r4
 8005d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d014      	beq.n	8005d5a <USB_DeactivateEndpoint+0x252>
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d46:	b29c      	uxth	r4, r3
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	441a      	add	r2, r3
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <USB_DeactivateEndpoint+0x320>)
 8005d54:	4323      	orrs	r3, r4
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29c      	uxth	r4, r3
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d014      	beq.n	8005d9c <USB_DeactivateEndpoint+0x294>
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	b29c      	uxth	r4, r3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	4b25      	ldr	r3, [pc, #148]	; (8005e2c <USB_DeactivateEndpoint+0x324>)
 8005d96:	4323      	orrs	r3, r4
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	b29c      	uxth	r4, r3
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <USB_DeactivateEndpoint+0x320>)
 8005dc0:	4323      	orrs	r3, r4
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	b29c      	uxth	r4, r3
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	441a      	add	r2, r3
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <USB_DeactivateEndpoint+0x328>)
 8005dea:	4323      	orrs	r3, r4
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	b29c      	uxth	r4, r3
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <USB_DeactivateEndpoint+0x328>)
 8005e14:	4323      	orrs	r3, r4
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc90      	pop	{r4, r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	ffffc080 	.word	0xffffc080
 8005e2c:	ffff80c0 	.word	0xffff80c0
 8005e30:	ffff8080 	.word	0xffff8080

08005e34 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b08d      	sub	sp, #52	; 0x34
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	f040 8160 	bne.w	8006108 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d909      	bls.n	8005e68 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	619a      	str	r2, [r3, #24]
 8005e66:	e005      	b.n	8005e74 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	7b1b      	ldrb	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d119      	bne.n	8005eb0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6959      	ldr	r1, [r3, #20]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	88da      	ldrh	r2, [r3, #6]
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fba8 	bl	80065de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e8e:	687c      	ldr	r4, [r7, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	441c      	add	r4, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4423      	add	r3, r4
 8005ea2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	8023      	strh	r3, [r4, #0]
 8005eae:	e10f      	b.n	80060d0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d065      	beq.n	8005f92 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ec6:	687c      	ldr	r4, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d148      	bne.n	8005f62 <USB_EPStartXfer+0x12e>
 8005ed0:	687c      	ldr	r4, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	441c      	add	r4, r3
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4423      	add	r3, r4
 8005ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee8:	461c      	mov	r4, r3
 8005eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10e      	bne.n	8005f0e <USB_EPStartXfer+0xda>
 8005ef0:	8823      	ldrh	r3, [r4, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8023      	strh	r3, [r4, #0]
 8005efc:	8823      	ldrh	r3, [r4, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8023      	strh	r3, [r4, #0]
 8005f0c:	e03d      	b.n	8005f8a <USB_EPStartXfer+0x156>
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b3e      	cmp	r3, #62	; 0x3e
 8005f12:	d810      	bhi.n	8005f36 <USB_EPStartXfer+0x102>
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <USB_EPStartXfer+0xf6>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	3301      	adds	r3, #1
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	8023      	strh	r3, [r4, #0]
 8005f34:	e029      	b.n	8005f8a <USB_EPStartXfer+0x156>
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d102      	bne.n	8005f4c <USB_EPStartXfer+0x118>
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	8023      	strh	r3, [r4, #0]
 8005f60:	e013      	b.n	8005f8a <USB_EPStartXfer+0x156>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d10f      	bne.n	8005f8a <USB_EPStartXfer+0x156>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	441c      	add	r4, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4423      	add	r3, r4
 8005f7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	895b      	ldrh	r3, [r3, #10]
 8005f8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005f90:	e063      	b.n	800605a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d148      	bne.n	800602c <USB_EPStartXfer+0x1f8>
 8005f9a:	687c      	ldr	r4, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	441c      	add	r4, r3
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	4423      	add	r3, r4
 8005fae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fb2:	461c      	mov	r4, r3
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10e      	bne.n	8005fd8 <USB_EPStartXfer+0x1a4>
 8005fba:	8823      	ldrh	r3, [r4, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8023      	strh	r3, [r4, #0]
 8005fc6:	8823      	ldrh	r3, [r4, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8023      	strh	r3, [r4, #0]
 8005fd6:	e03d      	b.n	8006054 <USB_EPStartXfer+0x220>
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2b3e      	cmp	r3, #62	; 0x3e
 8005fdc:	d810      	bhi.n	8006000 <USB_EPStartXfer+0x1cc>
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	623b      	str	r3, [r7, #32]
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <USB_EPStartXfer+0x1c0>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	029b      	lsls	r3, r3, #10
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8023      	strh	r3, [r4, #0]
 8005ffe:	e029      	b.n	8006054 <USB_EPStartXfer+0x220>
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <USB_EPStartXfer+0x1e2>
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	3b01      	subs	r3, #1
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	b29b      	uxth	r3, r3
 800601a:	029b      	lsls	r3, r3, #10
 800601c:	b29b      	uxth	r3, r3
 800601e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006026:	b29b      	uxth	r3, r3
 8006028:	8023      	strh	r3, [r4, #0]
 800602a:	e013      	b.n	8006054 <USB_EPStartXfer+0x220>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10f      	bne.n	8006054 <USB_EPStartXfer+0x220>
 8006034:	687c      	ldr	r4, [r7, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603c:	b29b      	uxth	r3, r3
 800603e:	441c      	add	r4, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4423      	add	r3, r4
 8006048:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800604c:	461c      	mov	r4, r3
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	b29b      	uxth	r3, r3
 8006052:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	891b      	ldrh	r3, [r3, #8]
 8006058:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6959      	ldr	r1, [r3, #20]
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	b29b      	uxth	r3, r3
 8006062:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 faba 	bl	80065de <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d115      	bne.n	800609e <USB_EPStartXfer+0x26a>
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	b29c      	uxth	r4, r3
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	4b9a      	ldr	r3, [pc, #616]	; (8006300 <USB_EPStartXfer+0x4cc>)
 8006096:	4323      	orrs	r3, r4
 8006098:	b29b      	uxth	r3, r3
 800609a:	8013      	strh	r3, [r2, #0]
 800609c:	e018      	b.n	80060d0 <USB_EPStartXfer+0x29c>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d114      	bne.n	80060d0 <USB_EPStartXfer+0x29c>
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	b29c      	uxth	r4, r3
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	4b8e      	ldr	r3, [pc, #568]	; (8006304 <USB_EPStartXfer+0x4d0>)
 80060ca:	4323      	orrs	r3, r4
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e6:	b29c      	uxth	r4, r3
 80060e8:	f084 0310 	eor.w	r3, r4, #16
 80060ec:	b29c      	uxth	r4, r3
 80060ee:	f084 0320 	eor.w	r3, r4, #32
 80060f2:	b29c      	uxth	r4, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	4b82      	ldr	r3, [pc, #520]	; (8006308 <USB_EPStartXfer+0x4d4>)
 8006100:	4323      	orrs	r3, r4
 8006102:	b29b      	uxth	r3, r3
 8006104:	8013      	strh	r3, [r2, #0]
 8006106:	e146      	b.n	8006396 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d909      	bls.n	8006128 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	619a      	str	r2, [r3, #24]
 8006126:	e005      	b.n	8006134 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2200      	movs	r2, #0
 8006132:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	7b1b      	ldrb	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d148      	bne.n	80061ce <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800613c:	687c      	ldr	r4, [r7, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	441c      	add	r4, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4423      	add	r3, r4
 8006150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006154:	461c      	mov	r4, r3
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10e      	bne.n	800617a <USB_EPStartXfer+0x346>
 800615c:	8823      	ldrh	r3, [r4, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006164:	b29b      	uxth	r3, r3
 8006166:	8023      	strh	r3, [r4, #0]
 8006168:	8823      	ldrh	r3, [r4, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006174:	b29b      	uxth	r3, r3
 8006176:	8023      	strh	r3, [r4, #0]
 8006178:	e0f2      	b.n	8006360 <USB_EPStartXfer+0x52c>
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	2b3e      	cmp	r3, #62	; 0x3e
 800617e:	d810      	bhi.n	80061a2 <USB_EPStartXfer+0x36e>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <USB_EPStartXfer+0x362>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	b29b      	uxth	r3, r3
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	b29b      	uxth	r3, r3
 800619e:	8023      	strh	r3, [r4, #0]
 80061a0:	e0de      	b.n	8006360 <USB_EPStartXfer+0x52c>
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <USB_EPStartXfer+0x384>
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	8023      	strh	r3, [r4, #0]
 80061cc:	e0c8      	b.n	8006360 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d148      	bne.n	8006268 <USB_EPStartXfer+0x434>
 80061d6:	687c      	ldr	r4, [r7, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	441c      	add	r4, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4423      	add	r3, r4
 80061ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ee:	461c      	mov	r4, r3
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10e      	bne.n	8006214 <USB_EPStartXfer+0x3e0>
 80061f6:	8823      	ldrh	r3, [r4, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8023      	strh	r3, [r4, #0]
 8006202:	8823      	ldrh	r3, [r4, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29b      	uxth	r3, r3
 8006210:	8023      	strh	r3, [r4, #0]
 8006212:	e03d      	b.n	8006290 <USB_EPStartXfer+0x45c>
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2b3e      	cmp	r3, #62	; 0x3e
 8006218:	d810      	bhi.n	800623c <USB_EPStartXfer+0x408>
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <USB_EPStartXfer+0x3fc>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3301      	adds	r3, #1
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	b29b      	uxth	r3, r3
 8006234:	029b      	lsls	r3, r3, #10
 8006236:	b29b      	uxth	r3, r3
 8006238:	8023      	strh	r3, [r4, #0]
 800623a:	e029      	b.n	8006290 <USB_EPStartXfer+0x45c>
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <USB_EPStartXfer+0x41e>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	3b01      	subs	r3, #1
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	b29b      	uxth	r3, r3
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	b29b      	uxth	r3, r3
 800625a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006262:	b29b      	uxth	r3, r3
 8006264:	8023      	strh	r3, [r4, #0]
 8006266:	e013      	b.n	8006290 <USB_EPStartXfer+0x45c>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10f      	bne.n	8006290 <USB_EPStartXfer+0x45c>
 8006270:	687c      	ldr	r4, [r7, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	441c      	add	r4, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	4423      	add	r3, r4
 8006284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006288:	461c      	mov	r4, r3
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	b29b      	uxth	r3, r3
 800628e:	8023      	strh	r3, [r4, #0]
 8006290:	687c      	ldr	r4, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d14e      	bne.n	8006338 <USB_EPStartXfer+0x504>
 800629a:	687c      	ldr	r4, [r7, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	441c      	add	r4, r3
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4423      	add	r3, r4
 80062ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062b2:	461c      	mov	r4, r3
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10e      	bne.n	80062d8 <USB_EPStartXfer+0x4a4>
 80062ba:	8823      	ldrh	r3, [r4, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8023      	strh	r3, [r4, #0]
 80062c6:	8823      	ldrh	r3, [r4, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8023      	strh	r3, [r4, #0]
 80062d6:	e043      	b.n	8006360 <USB_EPStartXfer+0x52c>
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	2b3e      	cmp	r3, #62	; 0x3e
 80062dc:	d816      	bhi.n	800630c <USB_EPStartXfer+0x4d8>
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <USB_EPStartXfer+0x4c0>
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	3301      	adds	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8023      	strh	r3, [r4, #0]
 80062fe:	e02f      	b.n	8006360 <USB_EPStartXfer+0x52c>
 8006300:	ffff80c0 	.word	0xffff80c0
 8006304:	ffffc080 	.word	0xffffc080
 8006308:	ffff8080 	.word	0xffff8080
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <USB_EPStartXfer+0x4ee>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	3b01      	subs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	b29b      	uxth	r3, r3
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006332:	b29b      	uxth	r3, r3
 8006334:	8023      	strh	r3, [r4, #0]
 8006336:	e013      	b.n	8006360 <USB_EPStartXfer+0x52c>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10f      	bne.n	8006360 <USB_EPStartXfer+0x52c>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006346:	b29b      	uxth	r3, r3
 8006348:	441c      	add	r4, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4423      	add	r3, r4
 8006352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	b29a      	uxth	r2, r3
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	b29c      	uxth	r4, r3
 8006378:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800637c:	b29c      	uxth	r4, r3
 800637e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006382:	b29c      	uxth	r4, r3
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	441a      	add	r2, r3
 800638e:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <USB_EPStartXfer+0x56c>)
 8006390:	4323      	orrs	r3, r4
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3734      	adds	r7, #52	; 0x34
 800639c:	46bd      	mov	sp, r7
 800639e:	bd90      	pop	{r4, r7, pc}
 80063a0:	ffff8080 	.word	0xffff8080

080063a4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a4:	b490      	push	{r4, r7}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063cc:	b29c      	uxth	r4, r3
 80063ce:	f084 0310 	eor.w	r3, r4, #16
 80063d2:	b29c      	uxth	r4, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <USB_EPSetStall+0x80>)
 80063e0:	4323      	orrs	r3, r4
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	8013      	strh	r3, [r2, #0]
 80063e6:	e017      	b.n	8006418 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	b29c      	uxth	r4, r3
 8006400:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006404:	b29c      	uxth	r4, r3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <USB_EPSetStall+0x80>)
 8006412:	4323      	orrs	r3, r4
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bc90      	pop	{r4, r7}
 8006422:	4770      	bx	lr
 8006424:	ffff8080 	.word	0xffff8080

08006428 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006428:	b490      	push	{r4, r7}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	7b1b      	ldrb	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d17d      	bne.n	8006536 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03d      	beq.n	80064be <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29c      	uxth	r4, r3
 8006450:	4623      	mov	r3, r4
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d014      	beq.n	8006484 <USB_EPClearStall+0x5c>
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006470:	b29c      	uxth	r4, r3
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	441a      	add	r2, r3
 800647c:	4b31      	ldr	r3, [pc, #196]	; (8006544 <USB_EPClearStall+0x11c>)
 800647e:	4323      	orrs	r3, r4
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	78db      	ldrb	r3, [r3, #3]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d054      	beq.n	8006536 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a2:	b29c      	uxth	r4, r3
 80064a4:	f084 0320 	eor.w	r3, r4, #32
 80064a8:	b29c      	uxth	r4, r3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <USB_EPClearStall+0x120>)
 80064b6:	4323      	orrs	r3, r4
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]
 80064bc:	e03b      	b.n	8006536 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29c      	uxth	r4, r3
 80064cc:	4623      	mov	r3, r4
 80064ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d014      	beq.n	8006500 <USB_EPClearStall+0xd8>
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ec:	b29c      	uxth	r4, r3
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	4b14      	ldr	r3, [pc, #80]	; (800654c <USB_EPClearStall+0x124>)
 80064fa:	4323      	orrs	r3, r4
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	b29c      	uxth	r4, r3
 8006518:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800651c:	b29c      	uxth	r4, r3
 800651e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006522:	b29c      	uxth	r4, r3
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <USB_EPClearStall+0x120>)
 8006530:	4323      	orrs	r3, r4
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bc90      	pop	{r4, r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	ffff80c0 	.word	0xffff80c0
 8006548:	ffff8080 	.word	0xffff8080
 800654c:	ffffc080 	.word	0xffffc080

08006550 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065b8:	68fb      	ldr	r3, [r7, #12]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065de:	b480      	push	{r7}
 80065e0:	b08d      	sub	sp, #52	; 0x34
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4611      	mov	r1, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	460b      	mov	r3, r1
 80065ee:	80fb      	strh	r3, [r7, #6]
 80065f0:	4613      	mov	r3, r2
 80065f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065f4:	88bb      	ldrh	r3, [r7, #4]
 80065f6:	3301      	adds	r3, #1
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006614:	e01b      	b.n	800664e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	3301      	adds	r3, #1
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	b29b      	uxth	r3, r3
 800662c:	461a      	mov	r2, r3
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	b29a      	uxth	r2, r3
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	3302      	adds	r3, #2
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	3301      	adds	r3, #1
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	3b01      	subs	r3, #1
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e0      	bne.n	8006616 <USB_WritePMA+0x38>
  }
}
 8006654:	bf00      	nop
 8006656:	3734      	adds	r7, #52	; 0x34
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006660:	b480      	push	{r7}
 8006662:	b08b      	sub	sp, #44	; 0x2c
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4611      	mov	r1, r2
 800666c:	461a      	mov	r2, r3
 800666e:	460b      	mov	r3, r1
 8006670:	80fb      	strh	r3, [r7, #6]
 8006672:	4613      	mov	r3, r2
 8006674:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006676:	88bb      	ldrh	r3, [r7, #4]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	b29b      	uxth	r3, r3
 800667c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006690:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	e018      	b.n	80066ca <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	3302      	adds	r3, #2
 80066a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	0a1b      	lsrs	r3, r3, #8
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3301      	adds	r3, #1
 80066c2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	3b01      	subs	r3, #1
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e3      	bne.n	8006698 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066d0:	88bb      	ldrh	r3, [r7, #4]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	701a      	strb	r2, [r3, #0]
  }
}
 80066ec:	bf00      	nop
 80066ee:	372c      	adds	r7, #44	; 0x2c
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d115      	bne.n	800673c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006714:	2202      	movs	r2, #2
 8006716:	2181      	movs	r1, #129	; 0x81
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f002 ffec 	bl	80096f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006728:	2202      	movs	r2, #2
 800672a:	2101      	movs	r1, #1
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f002 ffe2 	bl	80096f6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800673a:	e012      	b.n	8006762 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800673c:	2340      	movs	r3, #64	; 0x40
 800673e:	2202      	movs	r2, #2
 8006740:	2181      	movs	r1, #129	; 0x81
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 ffd7 	bl	80096f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800674e:	2340      	movs	r3, #64	; 0x40
 8006750:	2202      	movs	r2, #2
 8006752:	2101      	movs	r1, #1
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f002 ffce 	bl	80096f6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006762:	2308      	movs	r3, #8
 8006764:	2203      	movs	r2, #3
 8006766:	2182      	movs	r1, #130	; 0x82
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 ffc4 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006774:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006778:	f003 f914 	bl	80099a4 <USBD_static_malloc>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800678e:	2301      	movs	r3, #1
 8006790:	73fb      	strb	r3, [r7, #15]
 8006792:	e026      	b.n	80067e2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7c1b      	ldrb	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067c8:	2101      	movs	r1, #1
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f003 f87e 	bl	80098cc <USBD_LL_PrepareReceive>
 80067d0:	e007      	b.n	80067e2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d8:	2340      	movs	r3, #64	; 0x40
 80067da:	2101      	movs	r1, #1
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f003 f875 	bl	80098cc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067fc:	2181      	movs	r1, #129	; 0x81
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f002 ff9f 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800680a:	2101      	movs	r1, #1
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 ff98 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800681a:	2182      	movs	r1, #130	; 0x82
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 ff90 	bl	8009742 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	4618      	mov	r0, r3
 8006844:	f003 f8bc 	bl	80099c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006880:	2b00      	cmp	r3, #0
 8006882:	d039      	beq.n	80068f8 <USBD_CDC_Setup+0x9e>
 8006884:	2b20      	cmp	r3, #32
 8006886:	d17c      	bne.n	8006982 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d029      	beq.n	80068e4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	b25b      	sxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	da11      	bge.n	80068be <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	88d2      	ldrh	r2, [r2, #6]
 80068ac:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068ae:	6939      	ldr	r1, [r7, #16]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	88db      	ldrh	r3, [r3, #6]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 f9fa 	bl	8007cb0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068bc:	e068      	b.n	8006990 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785a      	ldrb	r2, [r3, #1]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	88db      	ldrh	r3, [r3, #6]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068d4:	6939      	ldr	r1, [r7, #16]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	461a      	mov	r2, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fa15 	bl	8007d0c <USBD_CtlPrepareRx>
      break;
 80068e2:	e055      	b.n	8006990 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	7850      	ldrb	r0, [r2, #1]
 80068f0:	2200      	movs	r2, #0
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4798      	blx	r3
      break;
 80068f6:	e04b      	b.n	8006990 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b0a      	cmp	r3, #10
 80068fe:	d017      	beq.n	8006930 <USBD_CDC_Setup+0xd6>
 8006900:	2b0b      	cmp	r3, #11
 8006902:	d029      	beq.n	8006958 <USBD_CDC_Setup+0xfe>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d133      	bne.n	8006970 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690e:	2b03      	cmp	r3, #3
 8006910:	d107      	bne.n	8006922 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006912:	f107 030c 	add.w	r3, r7, #12
 8006916:	2202      	movs	r2, #2
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 f9c8 	bl	8007cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006920:	e02e      	b.n	8006980 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f958 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	75fb      	strb	r3, [r7, #23]
          break;
 800692e:	e027      	b.n	8006980 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	2b03      	cmp	r3, #3
 8006938:	d107      	bne.n	800694a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800693a:	f107 030f 	add.w	r3, r7, #15
 800693e:	2201      	movs	r2, #1
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f9b4 	bl	8007cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006948:	e01a      	b.n	8006980 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f944 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 8006952:	2302      	movs	r3, #2
 8006954:	75fb      	strb	r3, [r7, #23]
          break;
 8006956:	e013      	b.n	8006980 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695e:	2b03      	cmp	r3, #3
 8006960:	d00d      	beq.n	800697e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 f938 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 800696a:	2302      	movs	r3, #2
 800696c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800696e:	e006      	b.n	800697e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f931 	bl	8007bda <USBD_CtlError>
          ret = USBD_FAIL;
 8006978:	2302      	movs	r3, #2
 800697a:	75fb      	strb	r3, [r7, #23]
          break;
 800697c:	e000      	b.n	8006980 <USBD_CDC_Setup+0x126>
          break;
 800697e:	bf00      	nop
      }
      break;
 8006980:	e006      	b.n	8006990 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f928 	bl	8007bda <USBD_CtlError>
      ret = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	bf00      	nop
  }

  return ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d037      	beq.n	8006a30 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069c0:	78fa      	ldrb	r2, [r7, #3]
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	331c      	adds	r3, #28
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d026      	beq.n	8006a24 <USBD_CDC_DataIn+0x8a>
 80069d6:	78fa      	ldrb	r2, [r7, #3]
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	331c      	adds	r3, #28
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	0152      	lsls	r2, r2, #5
 80069ee:	440a      	add	r2, r1
 80069f0:	3238      	adds	r2, #56	; 0x38
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80069f8:	fb02 f201 	mul.w	r2, r2, r1
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	331c      	adds	r3, #28
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a16:	78f9      	ldrb	r1, [r7, #3]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f002 ff32 	bl	8009886 <USBD_LL_Transmit>
 8006a22:	e003      	b.n	8006a2c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	e000      	b.n	8006a32 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006a30:	2302      	movs	r3, #2
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f002 ff5d 	bl	8009912 <USBD_LL_GetRxDataSize>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a7e:	4611      	mov	r1, r2
 8006a80:	4798      	blx	r3

    return USBD_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d015      	beq.n	8006ad6 <USBD_CDC_EP0_RxReady+0x46>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ab0:	2bff      	cmp	r3, #255	; 0xff
 8006ab2:	d010      	beq.n	8006ad6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ac2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aca:	b292      	uxth	r2, r2
 8006acc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2243      	movs	r2, #67	; 0x43
 8006aec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006aee:	4b03      	ldr	r3, [pc, #12]	; (8006afc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	20000094 	.word	0x20000094

08006b00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2243      	movs	r2, #67	; 0x43
 8006b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000050 	.word	0x20000050

08006b20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2243      	movs	r2, #67	; 0x43
 8006b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	200000d8 	.word	0x200000d8

08006b40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220a      	movs	r2, #10
 8006b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	2000000c 	.word	0x2000000c

08006b60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b087      	sub	sp, #28
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bac:	88fa      	ldrh	r2, [r7, #6]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c16:	2101      	movs	r1, #1
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 fe57 	bl	80098cc <USBD_LL_PrepareReceive>
 8006c1e:	e007      	b.n	8006c30 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c26:	2340      	movs	r3, #64	; 0x40
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 fe4e 	bl	80098cc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c30:	2300      	movs	r3, #0
 8006c32:	e000      	b.n	8006c36 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c34:	2302      	movs	r3, #2
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c52:	2302      	movs	r3, #2
 8006c54:	e01a      	b.n	8006c8c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d003      	beq.n	8006c68 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	79fa      	ldrb	r2, [r7, #7]
 8006c82:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f002 fcbb 	bl	8009600 <USBD_LL_Init>

  return USBD_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73fb      	strb	r3, [r7, #15]
 8006cb4:	e001      	b.n	8006cba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f002 fcf5 	bl	80096c0 <USBD_LL_Start>

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d02:	2302      	movs	r3, #2
 8006d04:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	78fa      	ldrb	r2, [r7, #3]
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	4798      	blx	r3
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fef7 	bl	8007b60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d00c      	beq.n	8006db0 <USBD_LL_SetupStage+0x56>
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d302      	bcc.n	8006da0 <USBD_LL_SetupStage+0x46>
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d010      	beq.n	8006dc0 <USBD_LL_SetupStage+0x66>
 8006d9e:	e017      	b.n	8006dd0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f9cd 	bl	8007148 <USBD_StdDevReq>
      break;
 8006dae:	e01a      	b.n	8006de6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa2f 	bl	800721c <USBD_StdItfReq>
      break;
 8006dbe:	e012      	b.n	8006de6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa6d 	bl	80072a8 <USBD_StdEPReq>
      break;
 8006dce:	e00a      	b.n	8006de6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006dd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f002 fcce 	bl	8009780 <USBD_LL_StallEP>
      break;
 8006de4:	bf00      	nop
  }

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d14b      	bne.n	8006e9c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d134      	bne.n	8006e80 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d919      	bls.n	8006e56 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d203      	bcs.n	8006e44 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	e002      	b.n	8006e4a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 ff7a 	bl	8007d48 <USBD_CtlContinueRx>
 8006e54:	e038      	b.n	8006ec8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006e68:	2b03      	cmp	r3, #3
 8006e6a:	d105      	bne.n	8006e78 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 ff77 	bl	8007d6c <USBD_CtlSendStatus>
 8006e7e:	e023      	b.n	8006ec8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d11e      	bne.n	8006ec8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006e92:	2100      	movs	r1, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f002 fc73 	bl	8009780 <USBD_LL_StallEP>
 8006e9a:	e015      	b.n	8006ec8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00d      	beq.n	8006ec4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d108      	bne.n	8006ec4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	7afa      	ldrb	r2, [r7, #11]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	4798      	blx	r3
 8006ec2:	e001      	b.n	8006ec8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e000      	b.n	8006eca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	460b      	mov	r3, r1
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d17f      	bne.n	8006fe6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d15c      	bne.n	8006fb0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d915      	bls.n	8006f2e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fee4 	bl	8007ce8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f20:	2300      	movs	r3, #0
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f002 fcd0 	bl	80098cc <USBD_LL_PrepareReceive>
 8006f2c:	e04e      	b.n	8006fcc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	6912      	ldr	r2, [r2, #16]
 8006f36:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f3a:	fb02 f201 	mul.w	r2, r2, r1
 8006f3e:	1a9b      	subs	r3, r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11c      	bne.n	8006f7e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d316      	bcc.n	8006f7e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d20f      	bcs.n	8006f7e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2100      	movs	r1, #0
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fec0 	bl	8007ce8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f70:	2300      	movs	r3, #0
 8006f72:	2200      	movs	r2, #0
 8006f74:	2100      	movs	r1, #0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f002 fca8 	bl	80098cc <USBD_LL_PrepareReceive>
 8006f7c:	e026      	b.n	8006fcc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d105      	bne.n	8006fa0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fa0:	2180      	movs	r1, #128	; 0x80
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f002 fbec 	bl	8009780 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fef2 	bl	8007d92 <USBD_CtlReceiveStatus>
 8006fae:	e00d      	b.n	8006fcc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d004      	beq.n	8006fc4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fc4:	2180      	movs	r1, #128	; 0x80
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f002 fbda 	bl	8009780 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d11d      	bne.n	8007012 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff fe82 	bl	8006ce0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fe4:	e015      	b.n	8007012 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00d      	beq.n	800700e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d108      	bne.n	800700e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	7afa      	ldrb	r2, [r7, #11]
 8007006:	4611      	mov	r1, r2
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	4798      	blx	r3
 800700c:	e001      	b.n	8007012 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	e000      	b.n	8007014 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	2200      	movs	r2, #0
 8007028:	2100      	movs	r1, #0
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f002 fb63 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2240      	movs	r2, #64	; 0x40
 800703c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007040:	2340      	movs	r3, #64	; 0x40
 8007042:	2200      	movs	r2, #0
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fb55 	bl	80096f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2240      	movs	r2, #64	; 0x40
 8007056:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d009      	beq.n	8007094 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6852      	ldr	r2, [r2, #4]
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	4611      	mov	r1, r2
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
  }

  return USBD_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	78fa      	ldrb	r2, [r7, #3]
 80070ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d105      	bne.n	8007106 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	2b03      	cmp	r3, #3
 8007124:	d10b      	bne.n	800713e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800715e:	2b20      	cmp	r3, #32
 8007160:	d004      	beq.n	800716c <USBD_StdDevReq+0x24>
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d002      	beq.n	800716c <USBD_StdDevReq+0x24>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <USBD_StdDevReq+0x34>
 800716a:	e04c      	b.n	8007206 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
      break;
 800717a:	e049      	b.n	8007210 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	2b09      	cmp	r3, #9
 8007182:	d83a      	bhi.n	80071fa <USBD_StdDevReq+0xb2>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <USBD_StdDevReq+0x44>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071dd 	.word	0x080071dd
 8007190:	080071f1 	.word	0x080071f1
 8007194:	080071fb 	.word	0x080071fb
 8007198:	080071e7 	.word	0x080071e7
 800719c:	080071fb 	.word	0x080071fb
 80071a0:	080071bf 	.word	0x080071bf
 80071a4:	080071b5 	.word	0x080071b5
 80071a8:	080071fb 	.word	0x080071fb
 80071ac:	080071d3 	.word	0x080071d3
 80071b0:	080071c9 	.word	0x080071c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9d4 	bl	8007564 <USBD_GetDescriptor>
          break;
 80071bc:	e022      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb61 	bl	8007888 <USBD_SetAddress>
          break;
 80071c6:	e01d      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fb9e 	bl	800790c <USBD_SetConfig>
          break;
 80071d0:	e018      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fc27 	bl	8007a28 <USBD_GetConfig>
          break;
 80071da:	e013      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc56 	bl	8007a90 <USBD_GetStatus>
          break;
 80071e4:	e00e      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fc84 	bl	8007af6 <USBD_SetFeature>
          break;
 80071ee:	e009      	b.n	8007204 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fc93 	bl	8007b1e <USBD_ClrFeature>
          break;
 80071f8:	e004      	b.n	8007204 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fcec 	bl	8007bda <USBD_CtlError>
          break;
 8007202:	bf00      	nop
      }
      break;
 8007204:	e004      	b.n	8007210 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fce6 	bl	8007bda <USBD_CtlError>
      break;
 800720e:	bf00      	nop
  }

  return ret;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop

0800721c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007232:	2b20      	cmp	r3, #32
 8007234:	d003      	beq.n	800723e <USBD_StdItfReq+0x22>
 8007236:	2b40      	cmp	r3, #64	; 0x40
 8007238:	d001      	beq.n	800723e <USBD_StdItfReq+0x22>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d12a      	bne.n	8007294 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007244:	3b01      	subs	r3, #1
 8007246:	2b02      	cmp	r3, #2
 8007248:	d81d      	bhi.n	8007286 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	889b      	ldrh	r3, [r3, #4]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d813      	bhi.n	800727c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	4798      	blx	r3
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d110      	bne.n	8007290 <USBD_StdItfReq+0x74>
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fd79 	bl	8007d6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800727a:	e009      	b.n	8007290 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fcab 	bl	8007bda <USBD_CtlError>
          break;
 8007284:	e004      	b.n	8007290 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fca6 	bl	8007bda <USBD_CtlError>
          break;
 800728e:	e000      	b.n	8007292 <USBD_StdItfReq+0x76>
          break;
 8007290:	bf00      	nop
      }
      break;
 8007292:	e004      	b.n	800729e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fc9f 	bl	8007bda <USBD_CtlError>
      break;
 800729c:	bf00      	nop
  }

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d004      	beq.n	80072d2 <USBD_StdEPReq+0x2a>
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d002      	beq.n	80072d2 <USBD_StdEPReq+0x2a>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <USBD_StdEPReq+0x3a>
 80072d0:	e13d      	b.n	800754e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      break;
 80072e0:	e13a      	b.n	8007558 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d10a      	bne.n	8007304 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	e12a      	b.n	800755a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d03e      	beq.n	800738a <USBD_StdEPReq+0xe2>
 800730c:	2b03      	cmp	r3, #3
 800730e:	d002      	beq.n	8007316 <USBD_StdEPReq+0x6e>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d070      	beq.n	80073f6 <USBD_StdEPReq+0x14e>
 8007314:	e115      	b.n	8007542 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	2b02      	cmp	r3, #2
 800731e:	d002      	beq.n	8007326 <USBD_StdEPReq+0x7e>
 8007320:	2b03      	cmp	r3, #3
 8007322:	d015      	beq.n	8007350 <USBD_StdEPReq+0xa8>
 8007324:	e02b      	b.n	800737e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00c      	beq.n	8007346 <USBD_StdEPReq+0x9e>
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b80      	cmp	r3, #128	; 0x80
 8007330:	d009      	beq.n	8007346 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fa22 	bl	8009780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800733c:	2180      	movs	r1, #128	; 0x80
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 fa1e 	bl	8009780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007344:	e020      	b.n	8007388 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fc46 	bl	8007bda <USBD_CtlError>
              break;
 800734e:	e01b      	b.n	8007388 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	885b      	ldrh	r3, [r3, #2]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10e      	bne.n	8007376 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00b      	beq.n	8007376 <USBD_StdEPReq+0xce>
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d008      	beq.n	8007376 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	88db      	ldrh	r3, [r3, #6]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f002 fa05 	bl	8009780 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fcf8 	bl	8007d6c <USBD_CtlSendStatus>

              break;
 800737c:	e004      	b.n	8007388 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fc2a 	bl	8007bda <USBD_CtlError>
              break;
 8007386:	bf00      	nop
          }
          break;
 8007388:	e0e0      	b.n	800754c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	2b02      	cmp	r3, #2
 8007392:	d002      	beq.n	800739a <USBD_StdEPReq+0xf2>
 8007394:	2b03      	cmp	r3, #3
 8007396:	d015      	beq.n	80073c4 <USBD_StdEPReq+0x11c>
 8007398:	e026      	b.n	80073e8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739a:	7bbb      	ldrb	r3, [r7, #14]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <USBD_StdEPReq+0x112>
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b80      	cmp	r3, #128	; 0x80
 80073a4:	d009      	beq.n	80073ba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f002 f9e8 	bl	8009780 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073b0:	2180      	movs	r1, #128	; 0x80
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f002 f9e4 	bl	8009780 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b8:	e01c      	b.n	80073f4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc0c 	bl	8007bda <USBD_CtlError>
              break;
 80073c2:	e017      	b.n	80073f4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d112      	bne.n	80073f2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f002 f9ef 	bl	80097be <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fcc3 	bl	8007d6c <USBD_CtlSendStatus>
              }
              break;
 80073e6:	e004      	b.n	80073f2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fbf5 	bl	8007bda <USBD_CtlError>
              break;
 80073f0:	e000      	b.n	80073f4 <USBD_StdEPReq+0x14c>
              break;
 80073f2:	bf00      	nop
          }
          break;
 80073f4:	e0aa      	b.n	800754c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d002      	beq.n	8007406 <USBD_StdEPReq+0x15e>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d032      	beq.n	800746a <USBD_StdEPReq+0x1c2>
 8007404:	e097      	b.n	8007536 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <USBD_StdEPReq+0x174>
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	2b80      	cmp	r3, #128	; 0x80
 8007410:	d004      	beq.n	800741c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fbe0 	bl	8007bda <USBD_CtlError>
                break;
 800741a:	e091      	b.n	8007540 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	da0b      	bge.n	800743c <USBD_StdEPReq+0x194>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	3310      	adds	r3, #16
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4413      	add	r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	e00b      	b.n	8007454 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	3304      	adds	r3, #4
 8007454:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2202      	movs	r2, #2
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc24 	bl	8007cb0 <USBD_CtlSendData>
              break;
 8007468:	e06a      	b.n	8007540 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800746a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da11      	bge.n	8007496 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4613      	mov	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	440b      	add	r3, r1
 8007484:	3318      	adds	r3, #24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d117      	bne.n	80074bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fba3 	bl	8007bda <USBD_CtlError>
                  break;
 8007494:	e054      	b.n	8007540 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d104      	bne.n	80074bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb90 	bl	8007bda <USBD_CtlError>
                  break;
 80074ba:	e041      	b.n	8007540 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da0b      	bge.n	80074dc <USBD_StdEPReq+0x234>
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	3310      	adds	r3, #16
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	4413      	add	r3, r2
 80074d8:	3304      	adds	r3, #4
 80074da:	e00b      	b.n	80074f4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4413      	add	r3, r2
 80074f2:	3304      	adds	r3, #4
 80074f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <USBD_StdEPReq+0x25a>
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d103      	bne.n	800750a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	e00e      	b.n	8007528 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f002 f974 	bl	80097fc <USBD_LL_IsStallEP>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	e002      	b.n	8007528 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2202      	movs	r2, #2
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fbbe 	bl	8007cb0 <USBD_CtlSendData>
              break;
 8007534:	e004      	b.n	8007540 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb4e 	bl	8007bda <USBD_CtlError>
              break;
 800753e:	bf00      	nop
          }
          break;
 8007540:	e004      	b.n	800754c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fb48 	bl	8007bda <USBD_CtlError>
          break;
 800754a:	bf00      	nop
      }
      break;
 800754c:	e004      	b.n	8007558 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb42 	bl	8007bda <USBD_CtlError>
      break;
 8007556:	bf00      	nop
  }

  return ret;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	885b      	ldrh	r3, [r3, #2]
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	2b0e      	cmp	r3, #14
 8007586:	f200 8152 	bhi.w	800782e <USBD_GetDescriptor+0x2ca>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBD_GetDescriptor+0x2c>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	08007601 	.word	0x08007601
 8007594:	08007619 	.word	0x08007619
 8007598:	08007659 	.word	0x08007659
 800759c:	0800782f 	.word	0x0800782f
 80075a0:	0800782f 	.word	0x0800782f
 80075a4:	080077cf 	.word	0x080077cf
 80075a8:	080077fb 	.word	0x080077fb
 80075ac:	0800782f 	.word	0x0800782f
 80075b0:	0800782f 	.word	0x0800782f
 80075b4:	0800782f 	.word	0x0800782f
 80075b8:	0800782f 	.word	0x0800782f
 80075bc:	0800782f 	.word	0x0800782f
 80075c0:	0800782f 	.word	0x0800782f
 80075c4:	0800782f 	.word	0x0800782f
 80075c8:	080075cd 	.word	0x080075cd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075ee:	e126      	b.n	800783e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 faf1 	bl	8007bda <USBD_CtlError>
        err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
      break;
 80075fe:	e11e      	b.n	800783e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
      break;
 8007616:	e112      	b.n	800783e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c1b      	ldrb	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	2202      	movs	r2, #2
 8007638:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800763a:	e100      	b.n	800783e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	f107 0208 	add.w	r2, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	e0f2      	b.n	800783e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	f200 80ac 	bhi.w	80077bc <USBD_GetDescriptor+0x258>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBD_GetDescriptor+0x108>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007685 	.word	0x08007685
 8007670:	080076b9 	.word	0x080076b9
 8007674:	080076ed 	.word	0x080076ed
 8007678:	08007721 	.word	0x08007721
 800767c:	08007755 	.word	0x08007755
 8007680:	08007789 	.word	0x08007789
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e091      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa95 	bl	8007bda <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e089      	b.n	80077cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e077      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa7b 	bl	8007bda <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e06f      	b.n	80077cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e05d      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa61 	bl	8007bda <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e055      	b.n	80077cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e043      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa47 	bl	8007bda <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e03b      	b.n	80077cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e029      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa2d 	bl	8007bda <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e021      	b.n	80077cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077aa:	e00f      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa13 	bl	8007bda <USBD_CtlError>
            err++;
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	3301      	adds	r3, #1
 80077b8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ba:	e007      	b.n	80077cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa0b 	bl	8007bda <USBD_CtlError>
          err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80077ca:	e038      	b.n	800783e <USBD_GetDescriptor+0x2da>
 80077cc:	e037      	b.n	800783e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e8:	e029      	b.n	800783e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f9f4 	bl	8007bda <USBD_CtlError>
        err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	e021      	b.n	800783e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c1b      	ldrb	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10d      	bne.n	800781e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	4610      	mov	r0, r2
 8007810:	4798      	blx	r3
 8007812:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	2207      	movs	r2, #7
 800781a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800781c:	e00f      	b.n	800783e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f9da 	bl	8007bda <USBD_CtlError>
        err++;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	3301      	adds	r3, #1
 800782a:	72fb      	strb	r3, [r7, #11]
      break;
 800782c:	e007      	b.n	800783e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9d2 	bl	8007bda <USBD_CtlError>
      err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	bf00      	nop
  }

  if (err != 0U)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11c      	bne.n	800787e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007844:	893b      	ldrh	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d011      	beq.n	800786e <USBD_GetDescriptor+0x30a>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	88db      	ldrh	r3, [r3, #6]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00d      	beq.n	800786e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88da      	ldrh	r2, [r3, #6]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	4293      	cmp	r3, r2
 800785a:	bf28      	it	cs
 800785c:	4613      	movcs	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	461a      	mov	r2, r3
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa21 	bl	8007cb0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa78 	bl	8007d6c <USBD_CtlSendStatus>
 800787c:	e000      	b.n	8007880 <USBD_GetDescriptor+0x31c>
    return;
 800787e:	bf00      	nop
    }
  }
}
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d130      	bne.n	80078fc <USBD_SetAddress+0x74>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88db      	ldrh	r3, [r3, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d12c      	bne.n	80078fc <USBD_SetAddress+0x74>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	885b      	ldrh	r3, [r3, #2]
 80078a6:	2b7f      	cmp	r3, #127	; 0x7f
 80078a8:	d828      	bhi.n	80078fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d104      	bne.n	80078ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f989 	bl	8007bda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c8:	e01c      	b.n	8007904 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7bfa      	ldrb	r2, [r7, #15]
 80078ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 ffb6 	bl	8009848 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa45 	bl	8007d6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f0:	e008      	b.n	8007904 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fa:	e003      	b.n	8007904 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f96b 	bl	8007bda <USBD_CtlError>
  }
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	885b      	ldrh	r3, [r3, #2]
 800791a:	b2da      	uxtb	r2, r3
 800791c:	4b41      	ldr	r3, [pc, #260]	; (8007a24 <USBD_SetConfig+0x118>)
 800791e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007920:	4b40      	ldr	r3, [pc, #256]	; (8007a24 <USBD_SetConfig+0x118>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d904      	bls.n	8007932 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f955 	bl	8007bda <USBD_CtlError>
 8007930:	e075      	b.n	8007a1e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	2b02      	cmp	r3, #2
 800793a:	d002      	beq.n	8007942 <USBD_SetConfig+0x36>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d023      	beq.n	8007988 <USBD_SetConfig+0x7c>
 8007940:	e062      	b.n	8007a08 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007942:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <USBD_SetConfig+0x118>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01a      	beq.n	8007980 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800794a:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <USBD_SetConfig+0x118>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2203      	movs	r2, #3
 8007958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800795c:	4b31      	ldr	r3, [pc, #196]	; (8007a24 <USBD_SetConfig+0x118>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7ff f9c7 	bl	8006cf6 <USBD_SetClassConfig>
 8007968:	4603      	mov	r3, r0
 800796a:	2b02      	cmp	r3, #2
 800796c:	d104      	bne.n	8007978 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f932 	bl	8007bda <USBD_CtlError>
            return;
 8007976:	e052      	b.n	8007a1e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9f7 	bl	8007d6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800797e:	e04e      	b.n	8007a1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f9f3 	bl	8007d6c <USBD_CtlSendStatus>
        break;
 8007986:	e04a      	b.n	8007a1e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007988:	4b26      	ldr	r3, [pc, #152]	; (8007a24 <USBD_SetConfig+0x118>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d112      	bne.n	80079b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007998:	4b22      	ldr	r3, [pc, #136]	; (8007a24 <USBD_SetConfig+0x118>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <USBD_SetConfig+0x118>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff f9c3 	bl	8006d34 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9dc 	bl	8007d6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079b4:	e033      	b.n	8007a1e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079b6:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <USBD_SetConfig+0x118>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d01d      	beq.n	8007a00 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff f9b1 	bl	8006d34 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80079d2:	4b14      	ldr	r3, [pc, #80]	; (8007a24 <USBD_SetConfig+0x118>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079dc:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <USBD_SetConfig+0x118>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7ff f987 	bl	8006cf6 <USBD_SetClassConfig>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d104      	bne.n	80079f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8f2 	bl	8007bda <USBD_CtlError>
            return;
 80079f6:	e012      	b.n	8007a1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f9b7 	bl	8007d6c <USBD_CtlSendStatus>
        break;
 80079fe:	e00e      	b.n	8007a1e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9b3 	bl	8007d6c <USBD_CtlSendStatus>
        break;
 8007a06:	e00a      	b.n	8007a1e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8e5 	bl	8007bda <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a10:	4b04      	ldr	r3, [pc, #16]	; (8007a24 <USBD_SetConfig+0x118>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff f98c 	bl	8006d34 <USBD_ClrClassConfig>
        break;
 8007a1c:	bf00      	nop
    }
  }
}
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20001406 	.word	0x20001406

08007a28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	88db      	ldrh	r3, [r3, #6]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d004      	beq.n	8007a44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8cc 	bl	8007bda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a42:	e021      	b.n	8007a88 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	db17      	blt.n	8007a7e <USBD_GetConfig+0x56>
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	dd02      	ble.n	8007a58 <USBD_GetConfig+0x30>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d00b      	beq.n	8007a6e <USBD_GetConfig+0x46>
 8007a56:	e012      	b.n	8007a7e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3308      	adds	r3, #8
 8007a62:	2201      	movs	r2, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f922 	bl	8007cb0 <USBD_CtlSendData>
        break;
 8007a6c:	e00c      	b.n	8007a88 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f91a 	bl	8007cb0 <USBD_CtlSendData>
        break;
 8007a7c:	e004      	b.n	8007a88 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f8aa 	bl	8007bda <USBD_CtlError>
        break;
 8007a86:	bf00      	nop
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d81e      	bhi.n	8007ae4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	88db      	ldrh	r3, [r3, #6]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d004      	beq.n	8007ab8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f892 	bl	8007bda <USBD_CtlError>
        break;
 8007ab6:	e01a      	b.n	8007aee <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f043 0202 	orr.w	r2, r3, #2
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	2202      	movs	r2, #2
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8e7 	bl	8007cb0 <USBD_CtlSendData>
      break;
 8007ae2:	e004      	b.n	8007aee <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f877 	bl	8007bda <USBD_CtlError>
      break;
 8007aec:	bf00      	nop
  }
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	885b      	ldrh	r3, [r3, #2]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d106      	bne.n	8007b16 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f92b 	bl	8007d6c <USBD_CtlSendStatus>
  }
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d80b      	bhi.n	8007b4c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	885b      	ldrh	r3, [r3, #2]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d10c      	bne.n	8007b56 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f911 	bl	8007d6c <USBD_CtlSendStatus>
      }
      break;
 8007b4a:	e004      	b.n	8007b56 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f843 	bl	8007bda <USBD_CtlError>
      break;
 8007b54:	e000      	b.n	8007b58 <USBD_ClrFeature+0x3a>
      break;
 8007b56:	bf00      	nop
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781a      	ldrb	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	785a      	ldrb	r2, [r3, #1]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	3303      	adds	r3, #3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3305      	adds	r3, #5
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	3306      	adds	r3, #6
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3307      	adds	r3, #7
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	80da      	strh	r2, [r3, #6]

}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007be4:	2180      	movs	r1, #128	; 0x80
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f001 fdca 	bl	8009780 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fdc6 	bl	8009780 <USBD_LL_StallEP>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d032      	beq.n	8007c78 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f834 	bl	8007c80 <USBD_GetLen>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	75fa      	strb	r2, [r7, #23]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	75fa      	strb	r2, [r7, #23]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4413      	add	r3, r2
 8007c44:	2203      	movs	r2, #3
 8007c46:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c48:	e012      	b.n	8007c70 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	60fa      	str	r2, [r7, #12]
 8007c50:	7dfa      	ldrb	r2, [r7, #23]
 8007c52:	1c51      	adds	r1, r2, #1
 8007c54:	75f9      	strb	r1, [r7, #23]
 8007c56:	4611      	mov	r1, r2
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	75fa      	strb	r2, [r7, #23]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e8      	bne.n	8007c4a <USBD_GetString+0x4e>
    }
  }
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007c8c:	e005      	b.n	8007c9a <USBD_GetLen+0x1a>
  {
    len++;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	3301      	adds	r3, #1
 8007c92:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3301      	adds	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f5      	bne.n	8007c8e <USBD_GetLen+0xe>
  }

  return len;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f001 fdd4 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f001 fdc2 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d22:	88fa      	ldrh	r2, [r7, #6]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d2a:	88fa      	ldrh	r2, [r7, #6]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	2100      	movs	r1, #0
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f001 fdc7 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f001 fdb5 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2204      	movs	r2, #4
 8007d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fd7f 	bl	8009886 <USBD_LL_Transmit>

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da2:	2300      	movs	r3, #0
 8007da4:	2200      	movs	r2, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 fd8f 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dca:	2b84      	cmp	r3, #132	; 0x84
 8007dcc:	d005      	beq.n	8007dda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007dce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007dda:	68fb      	ldr	r3, [r7, #12]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dec:	f000 fa58 	bl	80082a0 <vTaskStartScheduler>
  
  return osOK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685c      	ldr	r4, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e0c:	b29e      	uxth	r6, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff ffcf 	bl	8007db8 <makeFreeRtosPriority>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	9200      	str	r2, [sp, #0]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	4632      	mov	r2, r6
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f8d2 	bl	8007fd4 <xTaskCreate>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d001      	beq.n	8007e3a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <osDelay+0x16>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	e000      	b.n	8007e5c <osDelay+0x18>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f000 f9eb 	bl	8008238 <vTaskDelay>
  
  return osOK;
 8007e62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f103 0208 	add.w	r2, r3, #8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f103 0208 	add.w	r2, r3, #8
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f24:	d103      	bne.n	8007f2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e00c      	b.n	8007f48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3308      	adds	r3, #8
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e002      	b.n	8007f3c <vListInsert+0x2e>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d2f6      	bcs.n	8007f36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	1c5a      	adds	r2, r3, #1
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
}
 8007f74:	bf00      	nop
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6892      	ldr	r2, [r2, #8]
 8007f96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6852      	ldr	r2, [r2, #4]
 8007fa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d103      	bne.n	8007fb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	1e5a      	subs	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	; 0x30
 8007fd8:	af04      	add	r7, sp, #16
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fe7b 	bl	8008ce4 <pvPortMalloc>
 8007fee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00e      	beq.n	8008014 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ff6:	2054      	movs	r0, #84	; 0x54
 8007ff8:	f000 fe74 	bl	8008ce4 <pvPortMalloc>
 8007ffc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	631a      	str	r2, [r3, #48]	; 0x30
 800800a:	e005      	b.n	8008018 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800800c:	6978      	ldr	r0, [r7, #20]
 800800e:	f000 ff2b 	bl	8008e68 <vPortFree>
 8008012:	e001      	b.n	8008018 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d013      	beq.n	8008046 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	2300      	movs	r3, #0
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f80e 	bl	8008056 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f000 f892 	bl	8008164 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008040:	2301      	movs	r3, #1
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e002      	b.n	800804c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804c:	69bb      	ldr	r3, [r7, #24]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b088      	sub	sp, #32
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800806e:	3b01      	subs	r3, #1
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	f023 0307 	bic.w	r3, r3, #7
 800807c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	2b00      	cmp	r3, #0
 8008086:	d009      	beq.n	800809c <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e7fe      	b.n	800809a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d01f      	beq.n	80080e2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a2:	2300      	movs	r3, #0
 80080a4:	61fb      	str	r3, [r7, #28]
 80080a6:	e012      	b.n	80080ce <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	7819      	ldrb	r1, [r3, #0]
 80080b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	4413      	add	r3, r2
 80080b6:	3334      	adds	r3, #52	; 0x34
 80080b8:	460a      	mov	r2, r1
 80080ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	4413      	add	r3, r2
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d006      	beq.n	80080d6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	2b0f      	cmp	r3, #15
 80080d2:	d9e9      	bls.n	80080a8 <prvInitialiseNewTask+0x52>
 80080d4:	e000      	b.n	80080d8 <prvInitialiseNewTask+0x82>
			{
				break;
 80080d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e0:	e003      	b.n	80080ea <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d901      	bls.n	80080f4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080f0:	2306      	movs	r3, #6
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	2200      	movs	r2, #0
 8008104:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	3304      	adds	r3, #4
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fece 	bl	8007eac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	3318      	adds	r3, #24
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fec9 	bl	8007eac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	f1c3 0207 	rsb	r2, r3, #7
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	2200      	movs	r2, #0
 8008134:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	69b8      	ldr	r0, [r7, #24]
 8008144:	f000 fbc8 	bl	80088d8 <pxPortInitialiseStack>
 8008148:	4602      	mov	r2, r0
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800815a:	bf00      	nop
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800816c:	f000 fcde 	bl	8008b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008170:	4b2a      	ldr	r3, [pc, #168]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a29      	ldr	r2, [pc, #164]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 8008178:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800817a:	4b29      	ldr	r3, [pc, #164]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d109      	bne.n	8008196 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008182:	4a27      	ldr	r2, [pc, #156]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008188:	4b24      	ldr	r3, [pc, #144]	; (800821c <prvAddNewTaskToReadyList+0xb8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d110      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008190:	f000 faa0 	bl	80086d4 <prvInitialiseTaskLists>
 8008194:	e00d      	b.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <prvAddNewTaskToReadyList+0xc0>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d802      	bhi.n	80081b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081b2:	4b1d      	ldr	r3, [pc, #116]	; (8008228 <prvAddNewTaskToReadyList+0xc4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3301      	adds	r3, #1
 80081b8:	4a1b      	ldr	r2, [pc, #108]	; (8008228 <prvAddNewTaskToReadyList+0xc4>)
 80081ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	2201      	movs	r2, #1
 80081c2:	409a      	lsls	r2, r3
 80081c4:	4b19      	ldr	r3, [pc, #100]	; (800822c <prvAddNewTaskToReadyList+0xc8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	4a18      	ldr	r2, [pc, #96]	; (800822c <prvAddNewTaskToReadyList+0xc8>)
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <prvAddNewTaskToReadyList+0xcc>)
 80081dc:	441a      	add	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f7ff fe6e 	bl	8007ec6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081ea:	f000 fccd 	bl	8008b88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <prvAddNewTaskToReadyList+0xc0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00e      	beq.n	8008214 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvAddNewTaskToReadyList+0xbc>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	429a      	cmp	r2, r3
 8008202:	d207      	bcs.n	8008214 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <prvAddNewTaskToReadyList+0xd0>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20001508 	.word	0x20001508
 8008220:	20001408 	.word	0x20001408
 8008224:	20001514 	.word	0x20001514
 8008228:	20001524 	.word	0x20001524
 800822c:	20001510 	.word	0x20001510
 8008230:	2000140c 	.word	0x2000140c
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <vTaskDelay+0x60>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <vTaskDelay+0x2e>
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
 8008264:	e7fe      	b.n	8008264 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008266:	f000 f861 	bl	800832c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800826a:	2100      	movs	r1, #0
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 facd 	bl	800880c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008272:	f000 f869 	bl	8008348 <xTaskResumeAll>
 8008276:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800827e:	4b07      	ldr	r3, [pc, #28]	; (800829c <vTaskDelay+0x64>)
 8008280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20001530 	.word	0x20001530
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80082a6:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <vTaskStartScheduler+0x74>)
 80082a8:	9301      	str	r3, [sp, #4]
 80082aa:	2300      	movs	r3, #0
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	2300      	movs	r3, #0
 80082b0:	2280      	movs	r2, #128	; 0x80
 80082b2:	4919      	ldr	r1, [pc, #100]	; (8008318 <vTaskStartScheduler+0x78>)
 80082b4:	4819      	ldr	r0, [pc, #100]	; (800831c <vTaskStartScheduler+0x7c>)
 80082b6:	f7ff fe8d 	bl	8007fd4 <xTaskCreate>
 80082ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d115      	bne.n	80082ee <vTaskStartScheduler+0x4e>
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082d4:	4b12      	ldr	r3, [pc, #72]	; (8008320 <vTaskStartScheduler+0x80>)
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082dc:	4b11      	ldr	r3, [pc, #68]	; (8008324 <vTaskStartScheduler+0x84>)
 80082de:	2201      	movs	r2, #1
 80082e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082e2:	4b11      	ldr	r3, [pc, #68]	; (8008328 <vTaskStartScheduler+0x88>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082e8:	f000 fb82 	bl	80089f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082ec:	e00d      	b.n	800830a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d109      	bne.n	800830a <vTaskStartScheduler+0x6a>
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	607b      	str	r3, [r7, #4]
 8008308:	e7fe      	b.n	8008308 <vTaskStartScheduler+0x68>
}
 800830a:	bf00      	nop
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	2000152c 	.word	0x2000152c
 8008318:	08009b0c 	.word	0x08009b0c
 800831c:	080086a5 	.word	0x080086a5
 8008320:	20001528 	.word	0x20001528
 8008324:	20001514 	.word	0x20001514
 8008328:	2000150c 	.word	0x2000150c

0800832c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <vTaskSuspendAll+0x18>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a03      	ldr	r2, [pc, #12]	; (8008344 <vTaskSuspendAll+0x18>)
 8008338:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800833a:	bf00      	nop
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	20001530 	.word	0x20001530

08008348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008356:	4b41      	ldr	r3, [pc, #260]	; (800845c <xTaskResumeAll+0x114>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <xTaskResumeAll+0x2a>
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	e7fe      	b.n	8008370 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008372:	f000 fbdb 	bl	8008b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <xTaskResumeAll+0x114>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3b01      	subs	r3, #1
 800837c:	4a37      	ldr	r2, [pc, #220]	; (800845c <xTaskResumeAll+0x114>)
 800837e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008380:	4b36      	ldr	r3, [pc, #216]	; (800845c <xTaskResumeAll+0x114>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d161      	bne.n	800844c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008388:	4b35      	ldr	r3, [pc, #212]	; (8008460 <xTaskResumeAll+0x118>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d05d      	beq.n	800844c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008390:	e02e      	b.n	80083f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008392:	4b34      	ldr	r3, [pc, #208]	; (8008464 <xTaskResumeAll+0x11c>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3318      	adds	r3, #24
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fdee 	bl	8007f80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff fde9 	bl	8007f80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	2201      	movs	r2, #1
 80083b4:	409a      	lsls	r2, r3
 80083b6:	4b2c      	ldr	r3, [pc, #176]	; (8008468 <xTaskResumeAll+0x120>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	4a2a      	ldr	r2, [pc, #168]	; (8008468 <xTaskResumeAll+0x120>)
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4a27      	ldr	r2, [pc, #156]	; (800846c <xTaskResumeAll+0x124>)
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7ff fd75 	bl	8007ec6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	4b23      	ldr	r3, [pc, #140]	; (8008470 <xTaskResumeAll+0x128>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80083ea:	4b22      	ldr	r3, [pc, #136]	; (8008474 <xTaskResumeAll+0x12c>)
 80083ec:	2201      	movs	r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083f0:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <xTaskResumeAll+0x11c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1cc      	bne.n	8008392 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083fe:	f000 f9e5 	bl	80087cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008402:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <xTaskResumeAll+0x130>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d010      	beq.n	8008430 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800840e:	f000 f837 	bl	8008480 <xTaskIncrementTick>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008418:	4b16      	ldr	r3, [pc, #88]	; (8008474 <xTaskResumeAll+0x12c>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3b01      	subs	r3, #1
 8008422:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f1      	bne.n	800840e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <xTaskResumeAll+0x130>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008430:	4b10      	ldr	r3, [pc, #64]	; (8008474 <xTaskResumeAll+0x12c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800843c:	4b0f      	ldr	r3, [pc, #60]	; (800847c <xTaskResumeAll+0x134>)
 800843e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800844c:	f000 fb9c 	bl	8008b88 <vPortExitCritical>

	return xAlreadyYielded;
 8008450:	68bb      	ldr	r3, [r7, #8]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20001530 	.word	0x20001530
 8008460:	20001508 	.word	0x20001508
 8008464:	200014c8 	.word	0x200014c8
 8008468:	20001510 	.word	0x20001510
 800846c:	2000140c 	.word	0x2000140c
 8008470:	20001408 	.word	0x20001408
 8008474:	2000151c 	.word	0x2000151c
 8008478:	20001518 	.word	0x20001518
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800848a:	4b4e      	ldr	r3, [pc, #312]	; (80085c4 <xTaskIncrementTick+0x144>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 8087 	bne.w	80085a2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008494:	4b4c      	ldr	r3, [pc, #304]	; (80085c8 <xTaskIncrementTick+0x148>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3301      	adds	r3, #1
 800849a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800849c:	4a4a      	ldr	r2, [pc, #296]	; (80085c8 <xTaskIncrementTick+0x148>)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11f      	bne.n	80084e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80084a8:	4b48      	ldr	r3, [pc, #288]	; (80085cc <xTaskIncrementTick+0x14c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <xTaskIncrementTick+0x46>
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	e7fe      	b.n	80084c4 <xTaskIncrementTick+0x44>
 80084c6:	4b41      	ldr	r3, [pc, #260]	; (80085cc <xTaskIncrementTick+0x14c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	4b40      	ldr	r3, [pc, #256]	; (80085d0 <xTaskIncrementTick+0x150>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a3e      	ldr	r2, [pc, #248]	; (80085cc <xTaskIncrementTick+0x14c>)
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	4a3e      	ldr	r2, [pc, #248]	; (80085d0 <xTaskIncrementTick+0x150>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b3e      	ldr	r3, [pc, #248]	; (80085d4 <xTaskIncrementTick+0x154>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	4a3c      	ldr	r2, [pc, #240]	; (80085d4 <xTaskIncrementTick+0x154>)
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	f000 f972 	bl	80087cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80084e8:	4b3b      	ldr	r3, [pc, #236]	; (80085d8 <xTaskIncrementTick+0x158>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d348      	bcc.n	8008584 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f2:	4b36      	ldr	r3, [pc, #216]	; (80085cc <xTaskIncrementTick+0x14c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	4b36      	ldr	r3, [pc, #216]	; (80085d8 <xTaskIncrementTick+0x158>)
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	601a      	str	r2, [r3, #0]
					break;
 8008504:	e03e      	b.n	8008584 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008506:	4b31      	ldr	r3, [pc, #196]	; (80085cc <xTaskIncrementTick+0x14c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d203      	bcs.n	8008526 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800851e:	4a2e      	ldr	r2, [pc, #184]	; (80085d8 <xTaskIncrementTick+0x158>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008524:	e02e      	b.n	8008584 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fd28 	bl	8007f80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d004      	beq.n	8008542 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3318      	adds	r3, #24
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fd1f 	bl	8007f80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	2201      	movs	r2, #1
 8008548:	409a      	lsls	r2, r3
 800854a:	4b24      	ldr	r3, [pc, #144]	; (80085dc <xTaskIncrementTick+0x15c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4313      	orrs	r3, r2
 8008550:	4a22      	ldr	r2, [pc, #136]	; (80085dc <xTaskIncrementTick+0x15c>)
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4a1f      	ldr	r2, [pc, #124]	; (80085e0 <xTaskIncrementTick+0x160>)
 8008562:	441a      	add	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7ff fcab 	bl	8007ec6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008574:	4b1b      	ldr	r3, [pc, #108]	; (80085e4 <xTaskIncrementTick+0x164>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	429a      	cmp	r2, r3
 800857c:	d3b9      	bcc.n	80084f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	e7b6      	b.n	80084f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <xTaskIncrementTick+0x164>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	4915      	ldr	r1, [pc, #84]	; (80085e0 <xTaskIncrementTick+0x160>)
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d907      	bls.n	80085ac <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e004      	b.n	80085ac <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085a2:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <xTaskIncrementTick+0x168>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a0f      	ldr	r2, [pc, #60]	; (80085e8 <xTaskIncrementTick+0x168>)
 80085aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <xTaskIncrementTick+0x16c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80085b4:	2301      	movs	r3, #1
 80085b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085b8:	697b      	ldr	r3, [r7, #20]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20001530 	.word	0x20001530
 80085c8:	2000150c 	.word	0x2000150c
 80085cc:	200014c0 	.word	0x200014c0
 80085d0:	200014c4 	.word	0x200014c4
 80085d4:	20001520 	.word	0x20001520
 80085d8:	20001528 	.word	0x20001528
 80085dc:	20001510 	.word	0x20001510
 80085e0:	2000140c 	.word	0x2000140c
 80085e4:	20001408 	.word	0x20001408
 80085e8:	20001518 	.word	0x20001518
 80085ec:	2000151c 	.word	0x2000151c

080085f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80085f6:	4b26      	ldr	r3, [pc, #152]	; (8008690 <vTaskSwitchContext+0xa0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085fe:	4b25      	ldr	r3, [pc, #148]	; (8008694 <vTaskSwitchContext+0xa4>)
 8008600:	2201      	movs	r2, #1
 8008602:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008604:	e03e      	b.n	8008684 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <vTaskSwitchContext+0xa4>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860c:	4b22      	ldr	r3, [pc, #136]	; (8008698 <vTaskSwitchContext+0xa8>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	fab3 f383 	clz	r3, r3
 8008618:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	f1c3 031f 	rsb	r3, r3, #31
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	491e      	ldr	r1, [pc, #120]	; (800869c <vTaskSwitchContext+0xac>)
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	e7fe      	b.n	8008648 <vTaskSwitchContext+0x58>
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4a11      	ldr	r2, [pc, #68]	; (800869c <vTaskSwitchContext+0xac>)
 8008656:	4413      	add	r3, r2
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	605a      	str	r2, [r3, #4]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	3308      	adds	r3, #8
 800866c:	429a      	cmp	r2, r3
 800866e:	d104      	bne.n	800867a <vTaskSwitchContext+0x8a>
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	4a07      	ldr	r2, [pc, #28]	; (80086a0 <vTaskSwitchContext+0xb0>)
 8008682:	6013      	str	r3, [r2, #0]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20001530 	.word	0x20001530
 8008694:	2000151c 	.word	0x2000151c
 8008698:	20001510 	.word	0x20001510
 800869c:	2000140c 	.word	0x2000140c
 80086a0:	20001408 	.word	0x20001408

080086a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086ac:	f000 f852 	bl	8008754 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <prvIdleTask+0x28>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d9f9      	bls.n	80086ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80086b8:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <prvIdleTask+0x2c>)
 80086ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086c8:	e7f0      	b.n	80086ac <prvIdleTask+0x8>
 80086ca:	bf00      	nop
 80086cc:	2000140c 	.word	0x2000140c
 80086d0:	e000ed04 	.word	0xe000ed04

080086d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	e00c      	b.n	80086fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a12      	ldr	r2, [pc, #72]	; (8008734 <prvInitialiseTaskLists+0x60>)
 80086ec:	4413      	add	r3, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff fbbc 	bl	8007e6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3301      	adds	r3, #1
 80086f8:	607b      	str	r3, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b06      	cmp	r3, #6
 80086fe:	d9ef      	bls.n	80086e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008700:	480d      	ldr	r0, [pc, #52]	; (8008738 <prvInitialiseTaskLists+0x64>)
 8008702:	f7ff fbb3 	bl	8007e6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008706:	480d      	ldr	r0, [pc, #52]	; (800873c <prvInitialiseTaskLists+0x68>)
 8008708:	f7ff fbb0 	bl	8007e6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800870c:	480c      	ldr	r0, [pc, #48]	; (8008740 <prvInitialiseTaskLists+0x6c>)
 800870e:	f7ff fbad 	bl	8007e6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008712:	480c      	ldr	r0, [pc, #48]	; (8008744 <prvInitialiseTaskLists+0x70>)
 8008714:	f7ff fbaa 	bl	8007e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008718:	480b      	ldr	r0, [pc, #44]	; (8008748 <prvInitialiseTaskLists+0x74>)
 800871a:	f7ff fba7 	bl	8007e6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvInitialiseTaskLists+0x78>)
 8008720:	4a05      	ldr	r2, [pc, #20]	; (8008738 <prvInitialiseTaskLists+0x64>)
 8008722:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <prvInitialiseTaskLists+0x7c>)
 8008726:	4a05      	ldr	r2, [pc, #20]	; (800873c <prvInitialiseTaskLists+0x68>)
 8008728:	601a      	str	r2, [r3, #0]
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	2000140c 	.word	0x2000140c
 8008738:	20001498 	.word	0x20001498
 800873c:	200014ac 	.word	0x200014ac
 8008740:	200014c8 	.word	0x200014c8
 8008744:	200014dc 	.word	0x200014dc
 8008748:	200014f4 	.word	0x200014f4
 800874c:	200014c0 	.word	0x200014c0
 8008750:	200014c4 	.word	0x200014c4

08008754 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800875a:	e019      	b.n	8008790 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800875c:	f000 f9e6 	bl	8008b2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <prvCheckTasksWaitingTermination+0x4c>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7ff fc07 	bl	8007f80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <prvCheckTasksWaitingTermination+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <prvCheckTasksWaitingTermination+0x50>)
 800877a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <prvCheckTasksWaitingTermination+0x54>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <prvCheckTasksWaitingTermination+0x54>)
 8008784:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008786:	f000 f9ff 	bl	8008b88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f80e 	bl	80087ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008790:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <prvCheckTasksWaitingTermination+0x54>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e1      	bne.n	800875c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200014dc 	.word	0x200014dc
 80087a4:	20001508 	.word	0x20001508
 80087a8:	200014f0 	.word	0x200014f0

080087ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fb55 	bl	8008e68 <vPortFree>
			vPortFree( pxTCB );
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fb52 	bl	8008e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d104      	bne.n	80087e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087e4:	e008      	b.n	80087f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <prvResetNextTaskUnblockTime+0x38>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a04      	ldr	r2, [pc, #16]	; (8008808 <prvResetNextTaskUnblockTime+0x3c>)
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	200014c0 	.word	0x200014c0
 8008808:	20001528 	.word	0x20001528

0800880c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008816:	4b29      	ldr	r3, [pc, #164]	; (80088bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800881c:	4b28      	ldr	r3, [pc, #160]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3304      	adds	r3, #4
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fbac 	bl	8007f80 <uxListRemove>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10b      	bne.n	8008846 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800882e:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	2201      	movs	r2, #1
 8008836:	fa02 f303 	lsl.w	r3, r2, r3
 800883a:	43da      	mvns	r2, r3
 800883c:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4013      	ands	r3, r2
 8008842:	4a20      	ldr	r2, [pc, #128]	; (80088c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008844:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884c:	d10a      	bne.n	8008864 <prvAddCurrentTaskToDelayedList+0x58>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d007      	beq.n	8008864 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008854:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3304      	adds	r3, #4
 800885a:	4619      	mov	r1, r3
 800885c:	481a      	ldr	r0, [pc, #104]	; (80088c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800885e:	f7ff fb32 	bl	8007ec6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008862:	e026      	b.n	80088b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4413      	add	r3, r2
 800886a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800886c:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	429a      	cmp	r2, r3
 800887a:	d209      	bcs.n	8008890 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800887c:	4b13      	ldr	r3, [pc, #76]	; (80088cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7ff fb40 	bl	8007f0e <vListInsert>
}
 800888e:	e010      	b.n	80088b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3304      	adds	r3, #4
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7ff fb36 	bl	8007f0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088a2:	4b0c      	ldr	r3, [pc, #48]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d202      	bcs.n	80088b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088ac:	4a09      	ldr	r2, [pc, #36]	; (80088d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	6013      	str	r3, [r2, #0]
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	2000150c 	.word	0x2000150c
 80088c0:	20001408 	.word	0x20001408
 80088c4:	20001510 	.word	0x20001510
 80088c8:	200014f4 	.word	0x200014f4
 80088cc:	200014c4 	.word	0x200014c4
 80088d0:	200014c0 	.word	0x200014c0
 80088d4:	20001528 	.word	0x20001528

080088d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3b04      	subs	r3, #4
 80088e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3b04      	subs	r3, #4
 80088f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f023 0201 	bic.w	r2, r3, #1
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3b04      	subs	r3, #4
 8008906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008908:	4a0c      	ldr	r2, [pc, #48]	; (800893c <pxPortInitialiseStack+0x64>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3b14      	subs	r3, #20
 8008912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3b04      	subs	r3, #4
 800891e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f06f 0202 	mvn.w	r2, #2
 8008926:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3b20      	subs	r3, #32
 800892c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	08008941 	.word	0x08008941

08008940 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <prvTaskExitError+0x50>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d009      	beq.n	8008968 <prvTaskExitError+0x28>
 8008954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	e7fe      	b.n	8008966 <prvTaskExitError+0x26>
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800897a:	bf00      	nop
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0fc      	beq.n	800897c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	2000011c 	.word	0x2000011c
	...

080089a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <pxCurrentTCBConst2>)
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	6808      	ldr	r0, [r1, #0]
 80089a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	f380 8809 	msr	PSP, r0
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f04f 0000 	mov.w	r0, #0
 80089b6:	f380 8811 	msr	BASEPRI, r0
 80089ba:	4770      	bx	lr
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst2>:
 80089c0:	20001408 	.word	0x20001408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089c8:	4808      	ldr	r0, [pc, #32]	; (80089ec <prvPortStartFirstTask+0x24>)
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	6800      	ldr	r0, [r0, #0]
 80089ce:	f380 8808 	msr	MSP, r0
 80089d2:	f04f 0000 	mov.w	r0, #0
 80089d6:	f380 8814 	msr	CONTROL, r0
 80089da:	b662      	cpsie	i
 80089dc:	b661      	cpsie	f
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	df00      	svc	0
 80089e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089ea:	bf00      	nop
 80089ec:	e000ed08 	.word	0xe000ed08

080089f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089f6:	4b44      	ldr	r3, [pc, #272]	; (8008b08 <xPortStartScheduler+0x118>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a44      	ldr	r2, [pc, #272]	; (8008b0c <xPortStartScheduler+0x11c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d109      	bne.n	8008a14 <xPortStartScheduler+0x24>
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	e7fe      	b.n	8008a12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a14:	4b3c      	ldr	r3, [pc, #240]	; (8008b08 <xPortStartScheduler+0x118>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a3d      	ldr	r2, [pc, #244]	; (8008b10 <xPortStartScheduler+0x120>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d109      	bne.n	8008a32 <xPortStartScheduler+0x42>
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	e7fe      	b.n	8008a30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a32:	4b38      	ldr	r3, [pc, #224]	; (8008b14 <xPortStartScheduler+0x124>)
 8008a34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	22ff      	movs	r2, #255	; 0xff
 8008a42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	4b30      	ldr	r3, [pc, #192]	; (8008b18 <xPortStartScheduler+0x128>)
 8008a58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a5a:	4b30      	ldr	r3, [pc, #192]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008a5c:	2207      	movs	r2, #7
 8008a5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a60:	e009      	b.n	8008a76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008a62:	4b2e      	ldr	r3, [pc, #184]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008a6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d0ef      	beq.n	8008a62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a82:	4b26      	ldr	r3, [pc, #152]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f1c3 0307 	rsb	r3, r3, #7
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d009      	beq.n	8008aa2 <xPortStartScheduler+0xb2>
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	60bb      	str	r3, [r7, #8]
 8008aa0:	e7fe      	b.n	8008aa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008aa2:	4b1e      	ldr	r3, [pc, #120]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	4a1c      	ldr	r2, [pc, #112]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008aaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aac:	4b1b      	ldr	r3, [pc, #108]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ab4:	4a19      	ldr	r2, [pc, #100]	; (8008b1c <xPortStartScheduler+0x12c>)
 8008ab6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ac0:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <xPortStartScheduler+0x130>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <xPortStartScheduler+0x130>)
 8008ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008acc:	4b14      	ldr	r3, [pc, #80]	; (8008b20 <xPortStartScheduler+0x130>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a13      	ldr	r2, [pc, #76]	; (8008b20 <xPortStartScheduler+0x130>)
 8008ad2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ad6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ad8:	f000 f8d6 	bl	8008c88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008adc:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <xPortStartScheduler+0x134>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ae2:	f000 f8f5 	bl	8008cd0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ae6:	4b10      	ldr	r3, [pc, #64]	; (8008b28 <xPortStartScheduler+0x138>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a0f      	ldr	r2, [pc, #60]	; (8008b28 <xPortStartScheduler+0x138>)
 8008aec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008af0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008af2:	f7ff ff69 	bl	80089c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008af6:	f7ff fd7b 	bl	80085f0 <vTaskSwitchContext>
	prvTaskExitError();
 8008afa:	f7ff ff21 	bl	8008940 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed00 	.word	0xe000ed00
 8008b0c:	410fc271 	.word	0x410fc271
 8008b10:	410fc270 	.word	0x410fc270
 8008b14:	e000e400 	.word	0xe000e400
 8008b18:	20001534 	.word	0x20001534
 8008b1c:	20001538 	.word	0x20001538
 8008b20:	e000ed20 	.word	0xe000ed20
 8008b24:	2000011c 	.word	0x2000011c
 8008b28:	e000ef34 	.word	0xe000ef34

08008b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <vPortEnterCritical+0x54>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	4a0d      	ldr	r2, [pc, #52]	; (8008b80 <vPortEnterCritical+0x54>)
 8008b4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <vPortEnterCritical+0x54>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d10e      	bne.n	8008b74 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <vPortEnterCritical+0x48>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	e7fe      	b.n	8008b72 <vPortEnterCritical+0x46>
	}
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	2000011c 	.word	0x2000011c
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b8e:	4b11      	ldr	r3, [pc, #68]	; (8008bd4 <vPortExitCritical+0x4c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d109      	bne.n	8008baa <vPortExitCritical+0x22>
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	607b      	str	r3, [r7, #4]
 8008ba8:	e7fe      	b.n	8008ba8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008baa:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <vPortExitCritical+0x4c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <vPortExitCritical+0x4c>)
 8008bb2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <vPortExitCritical+0x4c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d104      	bne.n	8008bc6 <vPortExitCritical+0x3e>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	2000011c 	.word	0x2000011c
	...

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	f01e 0f10 	tst.w	lr, #16
 8008bf0:	bf08      	it	eq
 8008bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c04:	f380 8811 	msr	BASEPRI, r0
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f7ff fcee 	bl	80085f0 <vTaskSwitchContext>
 8008c14:	f04f 0000 	mov.w	r0, #0
 8008c18:	f380 8811 	msr	BASEPRI, r0
 8008c1c:	bc09      	pop	{r0, r3}
 8008c1e:	6819      	ldr	r1, [r3, #0]
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c26:	f01e 0f10 	tst.w	lr, #16
 8008c2a:	bf08      	it	eq
 8008c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c30:	f380 8809 	msr	PSP, r0
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w

08008c40 <pxCurrentTCBConst>:
 8008c40:	20001408 	.word	0x20001408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c60:	f7ff fc0e 	bl	8008480 <xTaskIncrementTick>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <SysTick_Handler+0x3c>)
 8008c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	2300      	movs	r3, #0
 8008c74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	e000ed04 	.word	0xe000ed04

08008c88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <vPortSetupTimerInterrupt+0x34>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c92:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <vPortSetupTimerInterrupt+0x38>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vPortSetupTimerInterrupt+0x3c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a0a      	ldr	r2, [pc, #40]	; (8008cc8 <vPortSetupTimerInterrupt+0x40>)
 8008c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca2:	099b      	lsrs	r3, r3, #6
 8008ca4:	4a09      	ldr	r2, [pc, #36]	; (8008ccc <vPortSetupTimerInterrupt+0x44>)
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008caa:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <vPortSetupTimerInterrupt+0x34>)
 8008cac:	2207      	movs	r2, #7
 8008cae:	601a      	str	r2, [r3, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	e000e010 	.word	0xe000e010
 8008cc0:	e000e018 	.word	0xe000e018
 8008cc4:	20000000 	.word	0x20000000
 8008cc8:	10624dd3 	.word	0x10624dd3
 8008ccc:	e000e014 	.word	0xe000e014

08008cd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ce0 <vPortEnableVFP+0x10>
 8008cd4:	6801      	ldr	r1, [r0, #0]
 8008cd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cda:	6001      	str	r1, [r0, #0]
 8008cdc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cde:	bf00      	nop
 8008ce0:	e000ed88 	.word	0xe000ed88

08008ce4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08a      	sub	sp, #40	; 0x28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cf0:	f7ff fb1c 	bl	800832c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cf4:	4b57      	ldr	r3, [pc, #348]	; (8008e54 <pvPortMalloc+0x170>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cfc:	f000 f90c 	bl	8008f18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d00:	4b55      	ldr	r3, [pc, #340]	; (8008e58 <pvPortMalloc+0x174>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4013      	ands	r3, r2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 808c 	bne.w	8008e26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d01c      	beq.n	8008d4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008d14:	2208      	movs	r2, #8
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4413      	add	r3, r2
 8008d1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d013      	beq.n	8008d4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f023 0307 	bic.w	r3, r3, #7
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <pvPortMalloc+0x6a>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	e7fe      	b.n	8008d4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d068      	beq.n	8008e26 <pvPortMalloc+0x142>
 8008d54:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <pvPortMalloc+0x178>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d863      	bhi.n	8008e26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d5e:	4b40      	ldr	r3, [pc, #256]	; (8008e60 <pvPortMalloc+0x17c>)
 8008d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d62:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <pvPortMalloc+0x17c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d68:	e004      	b.n	8008d74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d903      	bls.n	8008d86 <pvPortMalloc+0xa2>
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f1      	bne.n	8008d6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d86:	4b33      	ldr	r3, [pc, #204]	; (8008e54 <pvPortMalloc+0x170>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d04a      	beq.n	8008e26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2208      	movs	r2, #8
 8008d96:	4413      	add	r3, r2
 8008d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	1ad2      	subs	r2, r2, r3
 8008daa:	2308      	movs	r3, #8
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d91e      	bls.n	8008df0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4413      	add	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <pvPortMalloc+0xf4>
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	e7fe      	b.n	8008dd6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dea:	69b8      	ldr	r0, [r7, #24]
 8008dec:	f000 f8f6 	bl	8008fdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008df0:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <pvPortMalloc+0x178>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	4a18      	ldr	r2, [pc, #96]	; (8008e5c <pvPortMalloc+0x178>)
 8008dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dfe:	4b17      	ldr	r3, [pc, #92]	; (8008e5c <pvPortMalloc+0x178>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <pvPortMalloc+0x180>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d203      	bcs.n	8008e12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e0a:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <pvPortMalloc+0x178>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <pvPortMalloc+0x180>)
 8008e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <pvPortMalloc+0x174>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e26:	f7ff fa8f 	bl	8008348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d009      	beq.n	8008e48 <pvPortMalloc+0x164>
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e7fe      	b.n	8008e46 <pvPortMalloc+0x162>
	return pvReturn;
 8008e48:	69fb      	ldr	r3, [r7, #28]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3728      	adds	r7, #40	; 0x28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20002144 	.word	0x20002144
 8008e58:	20002150 	.word	0x20002150
 8008e5c:	20002148 	.word	0x20002148
 8008e60:	2000213c 	.word	0x2000213c
 8008e64:	2000214c 	.word	0x2000214c

08008e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d046      	beq.n	8008f08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e7a:	2308      	movs	r3, #8
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b20      	ldr	r3, [pc, #128]	; (8008f10 <vPortFree+0xa8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <vPortFree+0x42>
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e7fe      	b.n	8008ea8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <vPortFree+0x5e>
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
 8008ec4:	e7fe      	b.n	8008ec4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <vPortFree+0xa8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d019      	beq.n	8008f08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d115      	bne.n	8008f08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <vPortFree+0xa8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	401a      	ands	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008eec:	f7ff fa1e 	bl	800832c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <vPortFree+0xac>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4413      	add	r3, r2
 8008efa:	4a06      	ldr	r2, [pc, #24]	; (8008f14 <vPortFree+0xac>)
 8008efc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008efe:	6938      	ldr	r0, [r7, #16]
 8008f00:	f000 f86c 	bl	8008fdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f04:	f7ff fa20 	bl	8008348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f08:	bf00      	nop
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	20002150 	.word	0x20002150
 8008f14:	20002148 	.word	0x20002148

08008f18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f24:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <prvHeapInit+0xac>)
 8008f26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00c      	beq.n	8008f4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3307      	adds	r3, #7
 8008f36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 0307 	bic.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <prvHeapInit+0xac>)
 8008f48:	4413      	add	r3, r2
 8008f4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f50:	4a1d      	ldr	r2, [pc, #116]	; (8008fc8 <prvHeapInit+0xb0>)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f56:	4b1c      	ldr	r3, [pc, #112]	; (8008fc8 <prvHeapInit+0xb0>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f64:	2208      	movs	r2, #8
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	1a9b      	subs	r3, r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0307 	bic.w	r3, r3, #7
 8008f72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <prvHeapInit+0xb4>)
 8008f78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <prvHeapInit+0xb4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f82:	4b12      	ldr	r3, [pc, #72]	; (8008fcc <prvHeapInit+0xb4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <prvHeapInit+0xb4>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4a0a      	ldr	r2, [pc, #40]	; (8008fd0 <prvHeapInit+0xb8>)
 8008fa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	4a09      	ldr	r2, [pc, #36]	; (8008fd4 <prvHeapInit+0xbc>)
 8008fae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fb0:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <prvHeapInit+0xc0>)
 8008fb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fb6:	601a      	str	r2, [r3, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2000153c 	.word	0x2000153c
 8008fc8:	2000213c 	.word	0x2000213c
 8008fcc:	20002144 	.word	0x20002144
 8008fd0:	2000214c 	.word	0x2000214c
 8008fd4:	20002148 	.word	0x20002148
 8008fd8:	20002150 	.word	0x20002150

08008fdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fe4:	4b28      	ldr	r3, [pc, #160]	; (8009088 <prvInsertBlockIntoFreeList+0xac>)
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e002      	b.n	8008ff0 <prvInsertBlockIntoFreeList+0x14>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d8f7      	bhi.n	8008fea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	4413      	add	r3, r2
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	429a      	cmp	r2, r3
 800900a:	d108      	bne.n	800901e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	441a      	add	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	441a      	add	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d118      	bne.n	8009064 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b15      	ldr	r3, [pc, #84]	; (800908c <prvInsertBlockIntoFreeList+0xb0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	429a      	cmp	r2, r3
 800903c:	d00d      	beq.n	800905a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	441a      	add	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	601a      	str	r2, [r3, #0]
 8009058:	e008      	b.n	800906c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800905a:	4b0c      	ldr	r3, [pc, #48]	; (800908c <prvInsertBlockIntoFreeList+0xb0>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e003      	b.n	800906c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d002      	beq.n	800907a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	2000213c 	.word	0x2000213c
 800908c:	20002144 	.word	0x20002144

08009090 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009094:	2200      	movs	r2, #0
 8009096:	4912      	ldr	r1, [pc, #72]	; (80090e0 <MX_USB_Device_Init+0x50>)
 8009098:	4812      	ldr	r0, [pc, #72]	; (80090e4 <MX_USB_Device_Init+0x54>)
 800909a:	f7fd fdd0 	bl	8006c3e <USBD_Init>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80090a4:	f7f7 fc92 	bl	80009cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80090a8:	490f      	ldr	r1, [pc, #60]	; (80090e8 <MX_USB_Device_Init+0x58>)
 80090aa:	480e      	ldr	r0, [pc, #56]	; (80090e4 <MX_USB_Device_Init+0x54>)
 80090ac:	f7fd fdf2 	bl	8006c94 <USBD_RegisterClass>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80090b6:	f7f7 fc89 	bl	80009cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80090ba:	490c      	ldr	r1, [pc, #48]	; (80090ec <MX_USB_Device_Init+0x5c>)
 80090bc:	4809      	ldr	r0, [pc, #36]	; (80090e4 <MX_USB_Device_Init+0x54>)
 80090be:	f7fd fd4f 	bl	8006b60 <USBD_CDC_RegisterInterface>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80090c8:	f7f7 fc80 	bl	80009cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80090cc:	4805      	ldr	r0, [pc, #20]	; (80090e4 <MX_USB_Device_Init+0x54>)
 80090ce:	f7fd fdfb 	bl	8006cc8 <USBD_Start>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80090d8:	f7f7 fc78 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80090dc:	bf00      	nop
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000130 	.word	0x20000130
 80090e4:	20002664 	.word	0x20002664
 80090e8:	20000018 	.word	0x20000018
 80090ec:	20000120 	.word	0x20000120

080090f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090f4:	2200      	movs	r2, #0
 80090f6:	4905      	ldr	r1, [pc, #20]	; (800910c <CDC_Init_FS+0x1c>)
 80090f8:	4805      	ldr	r0, [pc, #20]	; (8009110 <CDC_Init_FS+0x20>)
 80090fa:	f7fd fd48 	bl	8006b8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090fe:	4905      	ldr	r1, [pc, #20]	; (8009114 <CDC_Init_FS+0x24>)
 8009100:	4803      	ldr	r0, [pc, #12]	; (8009110 <CDC_Init_FS+0x20>)
 8009102:	f7fd fd5e 	bl	8006bc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009106:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009108:	4618      	mov	r0, r3
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20002d10 	.word	0x20002d10
 8009110:	20002664 	.word	0x20002664
 8009114:	20002928 	.word	0x20002928

08009118 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800911c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800911e:	4618      	mov	r0, r3
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
 8009134:	4613      	mov	r3, r2
 8009136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b23      	cmp	r3, #35	; 0x23
 800913c:	d84a      	bhi.n	80091d4 <CDC_Control_FS+0xac>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <CDC_Control_FS+0x1c>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	080091d5 	.word	0x080091d5
 8009148:	080091d5 	.word	0x080091d5
 800914c:	080091d5 	.word	0x080091d5
 8009150:	080091d5 	.word	0x080091d5
 8009154:	080091d5 	.word	0x080091d5
 8009158:	080091d5 	.word	0x080091d5
 800915c:	080091d5 	.word	0x080091d5
 8009160:	080091d5 	.word	0x080091d5
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091d5 	.word	0x080091d5
 800916c:	080091d5 	.word	0x080091d5
 8009170:	080091d5 	.word	0x080091d5
 8009174:	080091d5 	.word	0x080091d5
 8009178:	080091d5 	.word	0x080091d5
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091d5 	.word	0x080091d5
 8009184:	080091d5 	.word	0x080091d5
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091d5 	.word	0x080091d5
 8009190:	080091d5 	.word	0x080091d5
 8009194:	080091d5 	.word	0x080091d5
 8009198:	080091d5 	.word	0x080091d5
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091d5 	.word	0x080091d5
 80091a4:	080091d5 	.word	0x080091d5
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	080091d5 	.word	0x080091d5
 80091b0:	080091d5 	.word	0x080091d5
 80091b4:	080091d5 	.word	0x080091d5
 80091b8:	080091d5 	.word	0x080091d5
 80091bc:	080091d5 	.word	0x080091d5
 80091c0:	080091d5 	.word	0x080091d5
 80091c4:	080091d5 	.word	0x080091d5
 80091c8:	080091d5 	.word	0x080091d5
 80091cc:	080091d5 	.word	0x080091d5
 80091d0:	080091d5 	.word	0x080091d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091d4:	bf00      	nop
  }

  return (USBD_OK);
 80091d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4805      	ldr	r0, [pc, #20]	; (8009208 <CDC_Receive_FS+0x24>)
 80091f2:	f7fd fce6 	bl	8006bc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091f6:	4804      	ldr	r0, [pc, #16]	; (8009208 <CDC_Receive_FS+0x24>)
 80091f8:	f7fd fcf7 	bl	8006bea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20002664 	.word	0x20002664

0800920c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2212      	movs	r2, #18
 800921c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800921e:	4b03      	ldr	r3, [pc, #12]	; (800922c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009220:	4618      	mov	r0, r3
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20000150 	.word	0x20000150

08009230 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2204      	movs	r2, #4
 8009240:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009242:	4b03      	ldr	r3, [pc, #12]	; (8009250 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	20000164 	.word	0x20000164

08009254 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	6039      	str	r1, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d105      	bne.n	8009272 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	4907      	ldr	r1, [pc, #28]	; (8009288 <USBD_CDC_ProductStrDescriptor+0x34>)
 800926a:	4808      	ldr	r0, [pc, #32]	; (800928c <USBD_CDC_ProductStrDescriptor+0x38>)
 800926c:	f7fe fcc6 	bl	8007bfc <USBD_GetString>
 8009270:	e004      	b.n	800927c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	4904      	ldr	r1, [pc, #16]	; (8009288 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009276:	4805      	ldr	r0, [pc, #20]	; (800928c <USBD_CDC_ProductStrDescriptor+0x38>)
 8009278:	f7fe fcc0 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800927c:	4b02      	ldr	r3, [pc, #8]	; (8009288 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200030f8 	.word	0x200030f8
 800928c:	08009b14 	.word	0x08009b14

08009290 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	4904      	ldr	r1, [pc, #16]	; (80092b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80092a0:	4804      	ldr	r0, [pc, #16]	; (80092b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80092a2:	f7fe fcab 	bl	8007bfc <USBD_GetString>
  return USBD_StrDesc;
 80092a6:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	200030f8 	.word	0x200030f8
 80092b4:	08009b2c 	.word	0x08009b2c

080092b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	221a      	movs	r2, #26
 80092c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ca:	f000 f843 	bl	8009354 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80092ce:	4b02      	ldr	r3, [pc, #8]	; (80092d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20000168 	.word	0x20000168

080092dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4907      	ldr	r1, [pc, #28]	; (8009310 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092f2:	4808      	ldr	r0, [pc, #32]	; (8009314 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092f4:	f7fe fc82 	bl	8007bfc <USBD_GetString>
 80092f8:	e004      	b.n	8009304 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4904      	ldr	r1, [pc, #16]	; (8009310 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092fe:	4805      	ldr	r0, [pc, #20]	; (8009314 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009300:	f7fe fc7c 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	200030f8 	.word	0x200030f8
 8009314:	08009b40 	.word	0x08009b40

08009318 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d105      	bne.n	8009336 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	4907      	ldr	r1, [pc, #28]	; (800934c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800932e:	4808      	ldr	r0, [pc, #32]	; (8009350 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009330:	f7fe fc64 	bl	8007bfc <USBD_GetString>
 8009334:	e004      	b.n	8009340 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	4904      	ldr	r1, [pc, #16]	; (800934c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800933a:	4805      	ldr	r0, [pc, #20]	; (8009350 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800933c:	f7fe fc5e 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009340:	4b02      	ldr	r3, [pc, #8]	; (800934c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009342:	4618      	mov	r0, r3
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	200030f8 	.word	0x200030f8
 8009350:	08009b4c 	.word	0x08009b4c

08009354 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800935a:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <Get_SerialNum+0x44>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <Get_SerialNum+0x48>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009366:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <Get_SerialNum+0x4c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4413      	add	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800937a:	2208      	movs	r2, #8
 800937c:	4909      	ldr	r1, [pc, #36]	; (80093a4 <Get_SerialNum+0x50>)
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f814 	bl	80093ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009384:	2204      	movs	r2, #4
 8009386:	4908      	ldr	r1, [pc, #32]	; (80093a8 <Get_SerialNum+0x54>)
 8009388:	68b8      	ldr	r0, [r7, #8]
 800938a:	f000 f80f 	bl	80093ac <IntToUnicode>
  }
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	1fff7590 	.word	0x1fff7590
 800939c:	1fff7594 	.word	0x1fff7594
 80093a0:	1fff7598 	.word	0x1fff7598
 80093a4:	2000016a 	.word	0x2000016a
 80093a8:	2000017a 	.word	0x2000017a

080093ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]
 80093c2:	e027      	b.n	8009414 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	0f1b      	lsrs	r3, r3, #28
 80093c8:	2b09      	cmp	r3, #9
 80093ca:	d80b      	bhi.n	80093e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	0f1b      	lsrs	r3, r3, #28
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	4619      	mov	r1, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	440b      	add	r3, r1
 80093dc:	3230      	adds	r2, #48	; 0x30
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	701a      	strb	r2, [r3, #0]
 80093e2:	e00a      	b.n	80093fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0f1b      	lsrs	r3, r3, #28
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	4619      	mov	r1, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	440b      	add	r3, r1
 80093f4:	3237      	adds	r2, #55	; 0x37
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	3301      	adds	r3, #1
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	4413      	add	r3, r2
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	3301      	adds	r3, #1
 8009412:	75fb      	strb	r3, [r7, #23]
 8009414:	7dfa      	ldrb	r2, [r7, #23]
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	429a      	cmp	r2, r3
 800941a:	d3d3      	bcc.n	80093c4 <IntToUnicode+0x18>
  }
}
 800941c:	bf00      	nop
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b08a      	sub	sp, #40	; 0x28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009430:	f107 0314 	add.w	r3, r7, #20
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <HAL_PCD_MspInit+0x88>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d12d      	bne.n	80094a6 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800944a:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 800944c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009456:	4b17      	ldr	r3, [pc, #92]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009462:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009468:	2303      	movs	r3, #3
 800946a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009470:	f107 0314 	add.w	r3, r7, #20
 8009474:	4619      	mov	r1, r3
 8009476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800947a:	f7f8 fb5f 	bl	8001b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800947e:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 8009480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009482:	4a0c      	ldr	r2, [pc, #48]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 8009484:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009488:	6593      	str	r3, [r2, #88]	; 0x58
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <HAL_PCD_MspInit+0x8c>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8009496:	2200      	movs	r2, #0
 8009498:	2105      	movs	r1, #5
 800949a:	2014      	movs	r0, #20
 800949c:	f7f8 f8b4 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80094a0:	2014      	movs	r0, #20
 80094a2:	f7f8 f8cb 	bl	800163c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094a6:	bf00      	nop
 80094a8:	3728      	adds	r7, #40	; 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40005c00 	.word	0x40005c00
 80094b4:	40021000 	.word	0x40021000

080094b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80094cc:	4619      	mov	r1, r3
 80094ce:	4610      	mov	r0, r2
 80094d0:	f7fd fc43 	bl	8006d5a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	015b      	lsls	r3, r3, #5
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	4619      	mov	r1, r3
 8009500:	f7fd fc76 	bl	8006df0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	015b      	lsls	r3, r3, #5
 8009524:	4413      	add	r3, r2
 8009526:	333c      	adds	r3, #60	; 0x3c
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	4619      	mov	r1, r3
 800952e:	f7fd fcd0 	bl	8006ed2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009548:	4618      	mov	r0, r3
 800954a:	f7fd fde3 	bl	8007114 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009556:	b580      	push	{r7, lr}
 8009558:	b084      	sub	sp, #16
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800955e:	2301      	movs	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d001      	beq.n	800956e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800956a:	f7f7 fa2f 	bl	80009cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009574:	7bfa      	ldrb	r2, [r7, #15]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7fd fd90 	bl	800709e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd fd49 	bl	800701c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fd fd8b 	bl	80070be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095b0:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <HAL_PCD_SuspendCallback+0x30>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	4a03      	ldr	r2, [pc, #12]	; (80095c4 <HAL_PCD_SuspendCallback+0x30>)
 80095b6:	f043 0306 	orr.w	r3, r3, #6
 80095ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed00 	.word	0xe000ed00

080095c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095d8:	4b08      	ldr	r3, [pc, #32]	; (80095fc <HAL_PCD_ResumeCallback+0x34>)
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	4a07      	ldr	r2, [pc, #28]	; (80095fc <HAL_PCD_ResumeCallback+0x34>)
 80095de:	f023 0306 	bic.w	r3, r3, #6
 80095e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80095e4:	f000 f9f6 	bl	80099d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fd fd7a 	bl	80070e8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	e000ed00 	.word	0xe000ed00

08009600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009608:	4a2b      	ldr	r2, [pc, #172]	; (80096b8 <USBD_LL_Init+0xb8>)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a29      	ldr	r2, [pc, #164]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009614:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009618:	4b27      	ldr	r3, [pc, #156]	; (80096b8 <USBD_LL_Init+0xb8>)
 800961a:	4a28      	ldr	r2, [pc, #160]	; (80096bc <USBD_LL_Init+0xbc>)
 800961c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800961e:	4b26      	ldr	r3, [pc, #152]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009620:	2208      	movs	r2, #8
 8009622:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009624:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009626:	2202      	movs	r2, #2
 8009628:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800962a:	4b23      	ldr	r3, [pc, #140]	; (80096b8 <USBD_LL_Init+0xb8>)
 800962c:	2202      	movs	r2, #2
 800962e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009630:	4b21      	ldr	r3, [pc, #132]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009632:	2200      	movs	r2, #0
 8009634:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009636:	4b20      	ldr	r3, [pc, #128]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009638:	2200      	movs	r2, #0
 800963a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800963c:	4b1e      	ldr	r3, [pc, #120]	; (80096b8 <USBD_LL_Init+0xb8>)
 800963e:	2200      	movs	r2, #0
 8009640:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009642:	4b1d      	ldr	r3, [pc, #116]	; (80096b8 <USBD_LL_Init+0xb8>)
 8009644:	2200      	movs	r2, #0
 8009646:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009648:	481b      	ldr	r0, [pc, #108]	; (80096b8 <USBD_LL_Init+0xb8>)
 800964a:	f7f8 fc11 	bl	8001e70 <HAL_PCD_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009654:	f7f7 f9ba 	bl	80009cc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800965e:	2318      	movs	r3, #24
 8009660:	2200      	movs	r2, #0
 8009662:	2100      	movs	r1, #0
 8009664:	f7f9 fab2 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800966e:	2358      	movs	r3, #88	; 0x58
 8009670:	2200      	movs	r2, #0
 8009672:	2180      	movs	r1, #128	; 0x80
 8009674:	f7f9 faaa 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800967e:	23c0      	movs	r3, #192	; 0xc0
 8009680:	2200      	movs	r2, #0
 8009682:	2181      	movs	r1, #129	; 0x81
 8009684:	f7f9 faa2 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800968e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009692:	2200      	movs	r2, #0
 8009694:	2101      	movs	r1, #1
 8009696:	f7f9 fa99 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a4:	2200      	movs	r2, #0
 80096a6:	2182      	movs	r1, #130	; 0x82
 80096a8:	f7f9 fa90 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200032f8 	.word	0x200032f8
 80096bc:	40005c00 	.word	0x40005c00

080096c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7f8 fc85 	bl	8001fe6 <HAL_PCD_Start>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f97c 	bl	80099e0 <USBD_Get_USB_Status>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	461a      	mov	r2, r3
 8009704:	4603      	mov	r3, r0
 8009706:	70fb      	strb	r3, [r7, #3]
 8009708:	460b      	mov	r3, r1
 800970a:	70bb      	strb	r3, [r7, #2]
 800970c:	4613      	mov	r3, r2
 800970e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800971e:	78bb      	ldrb	r3, [r7, #2]
 8009720:	883a      	ldrh	r2, [r7, #0]
 8009722:	78f9      	ldrb	r1, [r7, #3]
 8009724:	f7f8 fdf4 	bl	8002310 <HAL_PCD_EP_Open>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	4618      	mov	r0, r3
 8009730:	f000 f956 	bl	80099e0 <USBD_Get_USB_Status>
 8009734:	4603      	mov	r3, r0
 8009736:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009738:	7bbb      	ldrb	r3, [r7, #14]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800975c:	78fa      	ldrb	r2, [r7, #3]
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7f8 fe35 	bl	80023d0 <HAL_PCD_EP_Close>
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f937 	bl	80099e0 <USBD_Get_USB_Status>
 8009772:	4603      	mov	r3, r0
 8009774:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009776:	7bbb      	ldrb	r3, [r7, #14]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	4611      	mov	r1, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	f7f8 fee0 	bl	8002564 <HAL_PCD_EP_SetStall>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f918 	bl	80099e0 <USBD_Get_USB_Status>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80097b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097d8:	78fa      	ldrb	r2, [r7, #3]
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7f8 ff1b 	bl	8002618 <HAL_PCD_EP_ClrStall>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 f8f9 	bl	80099e0 <USBD_Get_USB_Status>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800980e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009810:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009814:	2b00      	cmp	r3, #0
 8009816:	da08      	bge.n	800982a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	015b      	lsls	r3, r3, #5
 8009822:	4413      	add	r3, r2
 8009824:	332a      	adds	r3, #42	; 0x2a
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	e008      	b.n	800983c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	015b      	lsls	r3, r3, #5
 8009834:	4413      	add	r3, r2
 8009836:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800983a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	460b      	mov	r3, r1
 8009852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f8 fd2d 	bl	80022c6 <HAL_PCD_SetAddress>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f8b4 	bl	80099e0 <USBD_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800987c:	7bbb      	ldrb	r3, [r7, #14]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	461a      	mov	r2, r3
 8009892:	460b      	mov	r3, r1
 8009894:	72fb      	strb	r3, [r7, #11]
 8009896:	4613      	mov	r3, r2
 8009898:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098a8:	893b      	ldrh	r3, [r7, #8]
 80098aa:	7af9      	ldrb	r1, [r7, #11]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f7f8 fe20 	bl	80024f2 <HAL_PCD_EP_Transmit>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f891 	bl	80099e0 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	461a      	mov	r2, r3
 80098d8:	460b      	mov	r3, r1
 80098da:	72fb      	strb	r3, [r7, #11]
 80098dc:	4613      	mov	r3, r2
 80098de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ee:	893b      	ldrh	r3, [r7, #8]
 80098f0:	7af9      	ldrb	r1, [r7, #11]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	f7f8 fdae 	bl	8002454 <HAL_PCD_EP_Receive>
 80098f8:	4603      	mov	r3, r0
 80098fa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f86e 	bl	80099e0 <USBD_Get_USB_Status>
 8009904:	4603      	mov	r3, r0
 8009906:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009908:	7dbb      	ldrb	r3, [r7, #22]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009924:	78fa      	ldrb	r2, [r7, #3]
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7f8 fdcd 	bl	80024c8 <HAL_PCD_EP_GetRxCount>
 800992e:	4603      	mov	r3, r0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <HAL_PCDEx_LPM_Callback+0x18>
 800994a:	2b01      	cmp	r3, #1
 800994c:	d013      	beq.n	8009976 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800994e:	e023      	b.n	8009998 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009958:	f000 f83c 	bl	80099d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800995c:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4a0f      	ldr	r2, [pc, #60]	; (80099a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009962:	f023 0306 	bic.w	r3, r3, #6
 8009966:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd fbba 	bl	80070e8 <USBD_LL_Resume>
    break;
 8009974:	e010      	b.n	8009998 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800997c:	4618      	mov	r0, r3
 800997e:	f7fd fb9e 	bl	80070be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d005      	beq.n	8009996 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	4a04      	ldr	r2, [pc, #16]	; (80099a0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009990:	f043 0306 	orr.w	r3, r3, #6
 8009994:	6113      	str	r3, [r2, #16]
    break;   
 8009996:	bf00      	nop
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	e000ed00 	.word	0xe000ed00

080099a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099ac:	4b03      	ldr	r3, [pc, #12]	; (80099bc <USBD_static_malloc+0x18>)
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20002154 	.word	0x20002154

080099c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]

}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80099d8:	f7f6 fc8c 	bl	80002f4 <SystemClock_Config>
}
 80099dc:	bf00      	nop
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d817      	bhi.n	8009a24 <USBD_Get_USB_Status+0x44>
 80099f4:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <USBD_Get_USB_Status+0x1c>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a13 	.word	0x08009a13
 8009a04:	08009a19 	.word	0x08009a19
 8009a08:	08009a1f 	.word	0x08009a1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a10:	e00b      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a12:	2302      	movs	r3, #2
 8009a14:	73fb      	strb	r3, [r7, #15]
    break;
 8009a16:	e008      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1c:	e005      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	73fb      	strb	r3, [r7, #15]
    break;
 8009a22:	e002      	b.n	8009a2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a24:	2302      	movs	r3, #2
 8009a26:	73fb      	strb	r3, [r7, #15]
    break;
 8009a28:	bf00      	nop
  }
  return usb_status;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f000 f820 	bl	8009a90 <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	08009b74 	.word	0x08009b74
 8009a74:	08009b74 	.word	0x08009b74
 8009a78:	08009b74 	.word	0x08009b74
 8009a7c:	08009b78 	.word	0x08009b78

08009a80 <memset>:
 8009a80:	4402      	add	r2, r0
 8009a82:	4603      	mov	r3, r0
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d100      	bne.n	8009a8a <memset+0xa>
 8009a88:	4770      	bx	lr
 8009a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a8e:	e7f9      	b.n	8009a84 <memset+0x4>

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
