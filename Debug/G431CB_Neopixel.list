
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ca4  08009ca4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009ca4  08009ca4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ca4  08009ca4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033ec  20000184  08009e30  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003570  08009e30  00023570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024be0  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049af  00000000  00000000  00044d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b18  00000000  00000000  00049748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  0004b260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006b49  00000000  00000000  0004cb70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b20  00000000  00000000  000536b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdcd  00000000  00000000  0006b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013afa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007070  00000000  00000000  0013b024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009bc0 	.word	0x08009bc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	08009bc0 	.word	0x08009bc0

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f001 f99e 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f853 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa13 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f9c3 	bl	80005bc <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f8f1 	bl	800041c <MX_TIM2_Init>
  MX_USB_Device_Init();
 800023a:	f008 ffc1 	bl	80091c0 <MX_USB_Device_Init>
  MX_SPI1_Init();
 800023e:	f000 f8af 	bl	80003a0 <MX_SPI1_Init>
  MX_TIM17_Init();
 8000242:	f000 f943 	bl	80004cc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8000246:	f000 ff13 	bl	8001070 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	2014      	movs	r0, #20
 800024e:	f000 ff25 	bl	800109c <ws2812Begin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartDefaultTask, osPriorityNormal, 0, 128);
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x9c>)
 8000254:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f007 fe62 	bl	8007f32 <osThreadCreate>
 800026e:	4602      	mov	r2, r0
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <main+0xa0>)
 8000272:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartTask02, osPriorityLow, 0, 128);
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xa4>)
 8000276:	f107 0418 	add.w	r4, r7, #24
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f007 fe51 	bl	8007f32 <osThreadCreate>
 8000290:	4602      	mov	r2, r0
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0xa8>)
 8000294:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartTask03, osPriorityLow, 0, 128);
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0xac>)
 8000298:	1d3c      	adds	r4, r7, #4
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	682b      	ldr	r3, [r5, #0]
 80002a2:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f007 fe42 	bl	8007f32 <osThreadCreate>
 80002ae:	4602      	mov	r2, r0
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <main+0xb0>)
 80002b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b4:	f007 fe36 	bl	8007f24 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x98>
 80002ba:	bf00      	nop
 80002bc:	08009be4 	.word	0x08009be4
 80002c0:	2000242c 	.word	0x2000242c
 80002c4:	08009c08 	.word	0x08009c08
 80002c8:	200024e8 	.word	0x200024e8
 80002cc:	08009c28 	.word	0x08009c28
 80002d0:	200023dc 	.word	0x200023dc

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a4      	sub	sp, #144	; 0x90
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	2238      	movs	r2, #56	; 0x38
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f009 fc64 	bl	8009bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f009 fc56 	bl	8009bb0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000304:	2000      	movs	r0, #0
 8000306:	f002 fd67 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800030a:	2321      	movs	r3, #33	; 0x21
 800030c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	2303      	movs	r3, #3
 800031e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000320:	2304      	movs	r3, #4
 8000322:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000324:	2355      	movs	r3, #85	; 0x55
 8000326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032a:	2302      	movs	r3, #2
 800032c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000330:	2302      	movs	r3, #2
 8000332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fded 	bl	8002f20 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800034c:	f000 fbdc 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000368:	2108      	movs	r1, #8
 800036a:	4618      	mov	r0, r3
 800036c:	f003 f8f0 	bl	8003550 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000376:	f000 fbc7 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000380:	2300      	movs	r3, #0
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fb16 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000392:	f000 fbb9 	bl	8000b08 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3790      	adds	r7, #144	; 0x90
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_SPI1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_SPI1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ba:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80003be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_SPI1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_SPI1_Init+0x74>)
 80003d6:	2218      	movs	r2, #24
 80003d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ee:	2207      	movs	r2, #7
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_SPI1_Init+0x74>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_SPI1_Init+0x74>)
 8000400:	f003 fcca 	bl	8003d98 <HAL_SPI_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 fb7d 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20002438 	.word	0x20002438
 8000418:	40013000 	.word	0x40013000

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042e:	463b      	mov	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000448:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_TIM2_Init+0xac>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000456:	22d4      	movs	r2, #212	; 0xd4
 8000458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_TIM2_Init+0xac>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000466:	4818      	ldr	r0, [pc, #96]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000468:	f003 fdb6 	bl	8003fd8 <HAL_TIM_PWM_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000472:	f000 fb49 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4810      	ldr	r0, [pc, #64]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000486:	f004 ff2d 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000490:	f000 fb3a 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000494:	2360      	movs	r3, #96	; 0x60
 8000496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004ac:	f004 f950 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80004b6:	f000 fb27 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004bc:	f000 fcbc 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000249c 	.word	0x2000249c

080004cc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b094      	sub	sp, #80	; 0x50
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2234      	movs	r2, #52	; 0x34
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f009 fb5f 	bl	8009bb0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80004f4:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <MX_TIM17_Init+0xec>)
 80004f6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000506:	22d4      	movs	r2, #212	; 0xd4
 8000508:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800051c:	4825      	ldr	r0, [pc, #148]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800051e:	f003 fccd 	bl	8003ebc <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000528:	f000 faee 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800052c:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800052e:	f003 fd53 	bl	8003fd8 <HAL_TIM_PWM_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 fae6 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053c:	2360      	movs	r3, #96	; 0x60
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000548:	2300      	movs	r3, #0
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000554:	2300      	movs	r3, #0
 8000556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000562:	f004 f8f5 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800056c:	f000 facc 	bl	8000b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000598:	f004 ff26 	bl	80053e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80005a2:	f000 fab1 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80005a8:	f000 fc46 	bl	8000e38 <HAL_TIM_MspPostInit>

}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200023e0 	.word	0x200023e0
 80005b8:	40014800 	.word	0x40014800

080005bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_DMA_Init+0x98>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <MX_DMA_Init+0x98>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6493      	str	r3, [r2, #72]	; 0x48
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_DMA_Init+0x98>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_DMA_Init+0x98>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005de:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <MX_DMA_Init+0x98>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6493      	str	r3, [r2, #72]	; 0x48
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_DMA_Init+0x98>)
 80005e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_DMA_Init+0x98>)
 80005f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DMA_Init+0x98>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6493      	str	r3, [r2, #72]	; 0x48
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_DMA_Init+0x98>)
 8000600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	200b      	movs	r0, #11
 8000610:	f001 f898 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000614:	200b      	movs	r0, #11
 8000616:	f001 f8af 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	200c      	movs	r0, #12
 8000620:	f001 f890 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000624:	200c      	movs	r0, #12
 8000626:	f001 f8a7 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	2038      	movs	r0, #56	; 0x38
 8000630:	f001 f888 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000634:	2038      	movs	r0, #56	; 0x38
 8000636:	f001 f89f 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	2039      	movs	r0, #57	; 0x39
 8000640:	f001 f880 	bl	8001744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000644:	2039      	movs	r0, #57	; 0x39
 8000646:	f001 f897 	bl	8001778 <HAL_NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_GPIO_Init+0xd4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a2e      	ldr	r2, [pc, #184]	; (800072c <MX_GPIO_Init+0xd4>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_GPIO_Init+0xd4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_GPIO_Init+0xd4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <MX_GPIO_Init+0xd4>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_GPIO_Init+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_GPIO_Init+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_GPIO_Init+0xd4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_GPIO_Init+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_GPIO_Init+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_GPIO_Init+0xd4>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_GPIO_Init+0xd4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <MX_GPIO_Init+0xd8>)
 80006d6:	f001 fc51 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_GPIO_Init+0xdc>)
 80006e2:	f001 fc4b 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0xd8>)
 8000700:	f001 faba 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_GPIO_Init+0xdc>)
 800071e:	f001 faab 	bl	8001c78 <HAL_GPIO_Init>

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	48000800 	.word	0x48000800
 8000734:	48000400 	.word	0x48000400

08000738 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800073c:	f000 ff3e 	bl	80015bc <HAL_GetTick>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <rotateLeft+0x50>)
 8000756:	fba3 1302 	umull	r1, r3, r3, r2
 800075a:	0919      	lsrs	r1, r3, #4
 800075c:	460b      	mov	r3, r1
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8000768:	e009      	b.n	800077e <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	151b      	asrs	r3, r3, #20
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	607b      	str	r3, [r7, #4]
    while(rotation--)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	603a      	str	r2, [r7, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f0      	bne.n	800076a <rotateLeft+0x22>
    }

    return num;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	cccccccd 	.word	0xcccccccd

0800079c <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <rotateRight+0x58>)
 80007aa:	fba3 1302 	umull	r1, r3, r3, r2
 80007ae:	0919      	lsrs	r1, r3, #4
 80007b0:	460b      	mov	r3, r1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80007bc:	e00d      	b.n	80007da <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007ce:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	051b      	lsls	r3, r3, #20
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	603a      	str	r2, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1ec      	bne.n	80007be <rotateRight+0x22>
    }

    return num;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	cccccccd 	.word	0xcccccccd

080007f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t pre_time = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 8000804:	23c8      	movs	r3, #200	; 0xc8
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 8000814:	f240 3387 	movw	r3, #903	; 0x387
 8000818:	60bb      	str	r3, [r7, #8]


	bool led_flg=false;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t led_count = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 8000822:	f7ff ff89 	bl	8000738 <millis>
 8000826:	4602      	mov	r2, r0
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800082e:	429a      	cmp	r2, r3
 8000830:	f200 80a4 	bhi.w	800097c <StartDefaultTask+0x184>
		{
			pre_time = millis();
 8000834:	f7ff ff80 	bl	8000738 <millis>
 8000838:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == false) {
 800083a:	4b52      	ldr	r3, [pc, #328]	; (8000984 <StartDefaultTask+0x18c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d164      	bne.n	800090c <StartDefaultTask+0x114>
				led_time = 200;
 8000842:	23c8      	movs	r3, #200	; 0xc8
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800084e:	4b4e      	ldr	r3, [pc, #312]	; (8000988 <StartDefaultTask+0x190>)
 8000850:	fba3 2301 	umull	r2, r3, r3, r1
 8000854:	091a      	lsrs	r2, r3, #4
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	1aca      	subs	r2, r1, r3
 8000860:	4611      	mov	r1, r2
 8000862:	f7ff ff71 	bl	8000748 <rotateLeft>
 8000866:	4603      	mov	r3, r0
 8000868:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 800086a:	68b8      	ldr	r0, [r7, #8]
 800086c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800086e:	4b46      	ldr	r3, [pc, #280]	; (8000988 <StartDefaultTask+0x190>)
 8000870:	fba3 2301 	umull	r2, r3, r3, r1
 8000874:	091a      	lsrs	r2, r3, #4
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	1aca      	subs	r2, r1, r3
 8000880:	4611      	mov	r1, r2
 8000882:	f7ff ff8b 	bl	800079c <rotateRight>
 8000886:	4603      	mov	r3, r0
 8000888:	60fb      	str	r3, [r7, #12]

				led_index++;
 800088a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088c:	3301      	adds	r3, #1
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	e017      	b.n	80008c6 <StartDefaultTask+0xce>
					if( firstled >> j & 0x01){
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	fa22 f303 	lsr.w	r3, r2, r3
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <StartDefaultTask+0xbc>
							ws2812SetColor(j, 255, 255, 255);
 80008a6:	23ff      	movs	r3, #255	; 0xff
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	6a38      	ldr	r0, [r7, #32]
 80008ae:	f000 fc2d 	bl	800110c <ws2812SetColor>
 80008b2:	e005      	b.n	80008c0 <StartDefaultTask+0xc8>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 80008b4:	2300      	movs	r3, #0
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	6a38      	ldr	r0, [r7, #32]
 80008bc:	f000 fc26 	bl	800110c <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	3301      	adds	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	2b0b      	cmp	r3, #11
 80008ca:	d9e4      	bls.n	8000896 <StartDefaultTask+0x9e>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 80008cc:	2314      	movs	r3, #20
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e018      	b.n	8000904 <StartDefaultTask+0x10c>
					if( halfled >> (j-11) & 0x01){
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b0b      	subs	r3, #11
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	fa22 f303 	lsr.w	r3, r2, r3
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d006      	beq.n	80008f2 <StartDefaultTask+0xfa>
							ws2812SetColor(j, 255, 255, 255);
 80008e4:	23ff      	movs	r3, #255	; 0xff
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	21ff      	movs	r1, #255	; 0xff
 80008ea:	69f8      	ldr	r0, [r7, #28]
 80008ec:	f000 fc0e 	bl	800110c <ws2812SetColor>
 80008f0:	e005      	b.n	80008fe <StartDefaultTask+0x106>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 80008f2:	2300      	movs	r3, #0
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	69f8      	ldr	r0, [r7, #28]
 80008fa:	f000 fc07 	bl	800110c <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b01      	subs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b0b      	cmp	r3, #11
 8000908:	d8e3      	bhi.n	80008d2 <StartDefaultTask+0xda>
 800090a:	e037      	b.n	800097c <StartDefaultTask+0x184>
					}
				}
			}
			else{ // break
				led_count++;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	3301      	adds	r3, #1
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	2b1e      	cmp	r3, #30
 8000916:	d903      	bls.n	8000920 <StartDefaultTask+0x128>
					led_time = 500;
 8000918:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
 800091e:	e001      	b.n	8000924 <StartDefaultTask+0x12c>
				}else {
					led_time = 50;
 8000920:	2332      	movs	r3, #50	; 0x32
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 8000924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000926:	2b28      	cmp	r3, #40	; 0x28
 8000928:	d902      	bls.n	8000930 <StartDefaultTask+0x138>
						//led_count = 0;
						g_break_flg =false;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <StartDefaultTask+0x18c>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
				}

				if(led_flg) {
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	2b00      	cmp	r3, #0
 8000934:	d011      	beq.n	800095a <StartDefaultTask+0x162>
					for(int i = 0; i < B_LED_CNT; i++) {
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	e00a      	b.n	8000952 <StartDefaultTask+0x15a>
						ws2812SetColor(i, 255, 0, 0);
 800093c:	69b8      	ldr	r0, [r7, #24]
 800093e:	2300      	movs	r3, #0
 8000940:	2200      	movs	r2, #0
 8000942:	21ff      	movs	r1, #255	; 0xff
 8000944:	f000 fbe2 	bl	800110c <ws2812SetColor>
						led_flg = false;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	3301      	adds	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	2b13      	cmp	r3, #19
 8000956:	ddf1      	ble.n	800093c <StartDefaultTask+0x144>
 8000958:	e010      	b.n	800097c <StartDefaultTask+0x184>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e00a      	b.n	8000976 <StartDefaultTask+0x17e>
						ws2812SetColor(i, 0, 0, 0);
 8000960:	6978      	ldr	r0, [r7, #20]
 8000962:	2300      	movs	r3, #0
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	f000 fbd0 	bl	800110c <ws2812SetColor>
						led_flg = true;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3301      	adds	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2b13      	cmp	r3, #19
 800097a:	ddf1      	ble.n	8000960 <StartDefaultTask+0x168>
					}
				}
			}
		}
    osDelay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f007 faff 	bl	8007f80 <osDelay>
		if(millis()-pre_time >= led_time)
 8000982:	e74e      	b.n	8000822 <StartDefaultTask+0x2a>
 8000984:	200001a0 	.word	0x200001a0
 8000988:	cccccccd 	.word	0xcccccccd

0800098c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  uint32_t rainbow_pre_time=0;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t rainbow_led_time=10;
 8000998:	230a      	movs	r3, #10
 800099a:	623b      	str	r3, [r7, #32]
	bool led_flg=false;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
	uint32_t led_count = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 80009a4:	2300      	movs	r3, #0
 80009a6:	833b      	strh	r3, [r7, #24]
 80009a8:	e06c      	b.n	8000a84 <StartTask02+0xf8>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 80009aa:	f7ff fec5 	bl	8000738 <millis>
 80009ae:	4602      	mov	r2, r0
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	6a3a      	ldr	r2, [r7, #32]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d864      	bhi.n	8000a84 <StartTask02+0xf8>
			{
				rainbow_pre_time = millis();
 80009ba:	f7ff febd 	bl	8000738 <millis>
 80009be:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 80009c0:	8b3b      	ldrh	r3, [r7, #24]
 80009c2:	3301      	adds	r3, #1
 80009c4:	833b      	strh	r3, [r7, #24]
				led_count = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
				rainbow_led_time = 10;
 80009ca:	230a      	movs	r3, #10
 80009cc:	623b      	str	r3, [r7, #32]
				if(g_break_flg == false) {
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <StartTask02+0x108>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11d      	bne.n	8000a12 <StartTask02+0x86>
					for(i=0; i< R_LED_CNT; i++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	837b      	strh	r3, [r7, #26]
 80009da:	e016      	b.n	8000a0a <StartTask02+0x7e>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 80009dc:	8b7b      	ldrh	r3, [r7, #26]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da00      	bge.n	80009e6 <StartTask02+0x5a>
 80009e4:	337f      	adds	r3, #127	; 0x7f
 80009e6:	11db      	asrs	r3, r3, #7
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	8b3b      	ldrh	r3, [r7, #24]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4413      	add	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd2a 	bl	800144c <Wheel>
 80009f8:	4602      	mov	r2, r0
 80009fa:	8b7b      	ldrh	r3, [r7, #26]
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fca0 	bl	8001344 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 8000a04:	8b7b      	ldrh	r3, [r7, #26]
 8000a06:	3301      	adds	r3, #1
 8000a08:	837b      	strh	r3, [r7, #26]
 8000a0a:	8b7b      	ldrh	r3, [r7, #26]
 8000a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0e:	d9e5      	bls.n	80009dc <StartTask02+0x50>
 8000a10:	e038      	b.n	8000a84 <StartTask02+0xf8>
					}
				}
				else{ // break
					led_count++;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
					if(led_count > 30) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b1e      	cmp	r3, #30
 8000a1c:	d903      	bls.n	8000a26 <StartTask02+0x9a>
						rainbow_led_time = 500;
 8000a1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	e001      	b.n	8000a2a <StartTask02+0x9e>
					}else {
						rainbow_led_time = 50;
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 40) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2b28      	cmp	r3, #40	; 0x28
 8000a2e:	d902      	bls.n	8000a36 <StartTask02+0xaa>
							//led_count = 0;
							g_break_flg =false;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <StartTask02+0x108>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
					}

					if(led_flg) {
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d012      	beq.n	8000a62 <StartTask02+0xd6>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e00b      	b.n	8000a5a <StartTask02+0xce>
							setPixelColor(i, 0xff0000);
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fc7a 	bl	8001344 <setPixelColor>
							led_flg = false;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2b13      	cmp	r3, #19
 8000a5e:	ddf0      	ble.n	8000a42 <StartTask02+0xb6>
 8000a60:	e010      	b.n	8000a84 <StartTask02+0xf8>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00a      	b.n	8000a7e <StartTask02+0xf2>
							setPixelColor(i, 0);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fc68 	bl	8001344 <setPixelColor>
							led_flg = true;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b13      	cmp	r3, #19
 8000a82:	ddf1      	ble.n	8000a68 <StartTask02+0xdc>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000a84:	8b3b      	ldrh	r3, [r7, #24]
 8000a86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a8a:	d38e      	bcc.n	80009aa <StartTask02+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f007 fa77 	bl	8007f80 <osDelay>
  {
 8000a92:	e787      	b.n	80009a4 <StartTask02+0x18>
 8000a94:	200001a0 	.word	0x200001a0

08000a98 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  uint32_t Task03_pre_time = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
  uint32_t Task03_led_time = 10000;
 8000aa4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000aa8:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000aaa:	f7ff fe45 	bl	8000738 <millis>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d80d      	bhi.n	8000ad6 <StartTask03+0x3e>
		{
			Task03_pre_time = millis();
 8000aba:	f7ff fe3d 	bl	8000738 <millis>
 8000abe:	60f8      	str	r0, [r7, #12]
			if(g_break_flg == false)
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <StartTask03+0x48>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <StartTask03+0x38>
				g_break_flg = true;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <StartTask03+0x48>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	e002      	b.n	8000ad6 <StartTask03+0x3e>
			else
				g_break_flg = false;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <StartTask03+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
		}
    osDelay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f007 fa52 	bl	8007f80 <osDelay>
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000adc:	e7e5      	b.n	8000aaa <StartTask03+0x12>
 8000ade:	bf00      	nop
 8000ae0:	200001a0 	.word	0x200001a0

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af6:	f000 fd4f 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b26:	6093      	str	r3, [r2, #8]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40007000 	.word	0x40007000

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_MspInit+0x50>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_MspInit+0x50>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x50>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x50>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_MspInit+0x50>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x50>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f000 fde5 	bl	8001744 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000b7a:	f7ff ffcd 	bl	8000b18 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a51      	ldr	r2, [pc, #324]	; (8000cf0 <HAL_SPI_MspInit+0x164>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 809b 	bne.w	8000ce6 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bb0:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb4:	4a4f      	ldr	r2, [pc, #316]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bba:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a49      	ldr	r2, [pc, #292]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <HAL_SPI_MspInit+0x168>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bf8:	2360      	movs	r3, #96	; 0x60
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f001 f82f 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4830      	ldr	r0, [pc, #192]	; (8000cf8 <HAL_SPI_MspInit+0x16c>)
 8000c36:	f001 f81f 	bl	8001c78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel1;
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <HAL_SPI_MspInit+0x174>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c42:	220a      	movs	r2, #10
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c76:	f000 fd8d 	bl	8001794 <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000c80:	f7ff ff42 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c88:	659a      	str	r2, [r3, #88]	; 0x58
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <HAL_SPI_MspInit+0x170>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel2;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000c92:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <HAL_SPI_MspInit+0x17c>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000c98:	220b      	movs	r2, #11
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000ccc:	f000 fd62 	bl	8001794 <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000cd6:	f7ff ff17 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000cde:	655a      	str	r2, [r3, #84]	; 0x54
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_SPI_MspInit+0x178>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	200024ec 	.word	0x200024ec
 8000d00:	40020408 	.word	0x40020408
 8000d04:	200025b0 	.word	0x200025b0
 8000d08:	4002041c 	.word	0x4002041c

08000d0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d135      	bne.n	8000d8a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_TIM_PWM_MspInit+0x88>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_TIM_PWM_MspInit+0x88>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_TIM_PWM_MspInit+0x88>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <HAL_TIM_PWM_MspInit+0x90>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d3e:	2238      	movs	r2, #56	; 0x38
 8000d40:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d44:	2210      	movs	r2, #16
 8000d46:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d64:	2220      	movs	r2, #32
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d70:	f000 fd10 	bl	8001794 <HAL_DMA_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000d7a:	f7ff fec5 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	2000237c 	.word	0x2000237c
 8000d9c:	40020008 	.word	0x40020008

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_TIM_Base_MspInit+0x88>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d135      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_TIM_Base_MspInit+0x8c>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db6:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_TIM_Base_MspInit+0x8c>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_TIM_Base_MspInit+0x8c>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_TIM_Base_MspInit+0x94>)
 8000dce:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dd2:	2254      	movs	r2, #84	; 0x54
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000df8:	2220      	movs	r2, #32
 8000dfa:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000e04:	f000 fcc6 	bl	8001794 <HAL_DMA_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000e0e:	f7ff fe7b 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <HAL_TIM_Base_MspInit+0x90>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40014800 	.word	0x40014800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	20002550 	.word	0x20002550
 8000e34:	4002001c 	.word	0x4002001c

08000e38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e58:	d11d      	bne.n	8000e96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e82:	2301      	movs	r3, #1
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fef2 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000e94:	e021      	b.n	8000eda <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_TIM_MspPostInit+0xb0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d11c      	bne.n	8000eda <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_TIM_MspPostInit+0xac>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f000 fecf 	bl	8001c78 <HAL_GPIO_Init>
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40014800 	.word	0x40014800

08000eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	2019      	movs	r0, #25
 8000f02:	f000 fc1f 	bl	8001744 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000f06:	2019      	movs	r0, #25
 8000f08:	f000 fc36 	bl	8001778 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_InitTick+0x9c>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_InitTick+0x9c>)
 8000f12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f16:	6613      	str	r3, [r2, #96]	; 0x60
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_InitTick+0x9c>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f24:	f107 0210 	add.w	r2, r7, #16
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fccc 	bl	80038cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f34:	f002 fcb4 	bl	80038a0 <HAL_RCC_GetPCLK2Freq>
 8000f38:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3c:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <HAL_InitTick+0xa0>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	3b01      	subs	r3, #1
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_InitTick+0xa8>)
 8000f4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f56:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f6a:	f002 ffa7 	bl	8003ebc <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <HAL_InitTick+0xa4>)
 8000f76:	f002 fff9 	bl	8003f6c <HAL_TIM_Base_Start_IT>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	431bde83 	.word	0x431bde83
 8000f90:	20002614 	.word	0x20002614
 8000f94:	40012c00 	.word	0x40012c00

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA1_Channel1_IRQHandler+0x10>)
 8000fd2:	f000 fd02 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000237c 	.word	0x2000237c

08000fe0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA1_Channel2_IRQHandler+0x10>)
 8000fe6:	f000 fcf8 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002550 	.word	0x20002550

08000ff4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <USB_LP_IRQHandler+0x10>)
 8000ffa:	f001 f8b4 	bl	8002166 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200032fc 	.word	0x200032fc

08001008 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800100e:	f003 fa1f 	bl	8004450 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20002614 	.word	0x20002614

0800101c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA2_Channel1_IRQHandler+0x10>)
 8001022:	f000 fcda 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200024ec 	.word	0x200024ec

08001030 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA2_Channel2_IRQHandler+0x10>)
 8001036:	f000 fcd0 	bl	80019da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200025b0 	.word	0x200025b0

08001044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <SystemInit+0x28>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <SystemInit+0x28>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SystemInit+0x28>)
 800105a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105e:	609a      	str	r2, [r3, #8]
#endif
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8001074:	f240 6232 	movw	r2, #1586	; 0x632
 8001078:	2100      	movs	r1, #0
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <ws2812Init+0x24>)
 800107c:	f008 fd98 	bl	8009bb0 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 8001080:	f240 6232 	movw	r2, #1586	; 0x632
 8001084:	2100      	movs	r1, #0
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <ws2812Init+0x28>)
 8001088:	f008 fd92 	bl	8009bb0 <memset>

  return true;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001a4 	.word	0x200001a4
 8001098:	200007d8 	.word	0x200007d8

0800109c <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <ws2812Begin+0x5c>)
 80010ac:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <ws2812Begin+0x5c>)
 80010b4:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <ws2812Begin+0x5c>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	0052      	lsls	r2, r2, #1
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	3332      	adds	r3, #50	; 0x32
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <ws2812Begin+0x60>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <ws2812Begin+0x64>)
 80010ce:	f002 ffdb 	bl	8004088 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <ws2812Begin+0x5c>)
 80010d4:	885b      	ldrh	r3, [r3, #2]
 80010d6:	461a      	mov	r2, r3
 80010d8:	0052      	lsls	r2, r2, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3332      	adds	r3, #50	; 0x32
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <ws2812Begin+0x68>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <ws2812Begin+0x6c>)
 80010ea:	f002 ffcd 	bl	8004088 <HAL_TIM_PWM_Start_DMA>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20002660 	.word	0x20002660
 80010fc:	200001a4 	.word	0x200001a4
 8001100:	2000249c 	.word	0x2000249c
 8001104:	200007d8 	.word	0x200007d8
 8001108:	200023e0 	.word	0x200023e0

0800110c <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800110c:	b480      	push	{r7}
 800110e:	b08b      	sub	sp, #44	; 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4603      	mov	r3, r0
 800111c:	70fb      	strb	r3, [r7, #3]
 800111e:	460b      	mov	r3, r1
 8001120:	70bb      	strb	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	e03e      	b.n	80011aa <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 800112c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	da06      	bge.n	8001142 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001134:	f107 0218 	add.w	r2, r7, #24
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	4413      	add	r3, r2
 800113c:	2287      	movs	r2, #135	; 0x87
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e005      	b.n	800114e <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001142:	f107 0218 	add.w	r2, r7, #24
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	4413      	add	r3, r2
 800114a:	2243      	movs	r2, #67	; 0x43
 800114c:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001154:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001158:	2b00      	cmp	r3, #0
 800115a:	da06      	bge.n	800116a <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 800115c:	f107 0210 	add.w	r2, r7, #16
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	4413      	add	r3, r2
 8001164:	2287      	movs	r2, #135	; 0x87
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e005      	b.n	8001176 <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 800116a:	f107 0210 	add.w	r2, r7, #16
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	4413      	add	r3, r2
 8001172:	2243      	movs	r2, #67	; 0x43
 8001174:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001176:	78bb      	ldrb	r3, [r7, #2]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 800117c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001180:	2b00      	cmp	r3, #0
 8001182:	da06      	bge.n	8001192 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	4413      	add	r3, r2
 800118c:	2287      	movs	r2, #135	; 0x87
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e005      	b.n	800119e <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8001192:	f107 0208 	add.w	r2, r7, #8
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	4413      	add	r3, r2
 800119a:	2243      	movs	r2, #67	; 0x43
 800119c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 800119e:	787b      	ldrb	r3, [r7, #1]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	3301      	adds	r3, #1
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	ddbd      	ble.n	800112c <ws2812SetColor+0x20>
  }

  offset = 50;
 80011b0:	2332      	movs	r3, #50	; 0x32
 80011b2:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	461a      	mov	r2, r3
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <ws2812SetColor+0x118>)
 80011c6:	4413      	add	r3, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	cb03      	ldmia	r3!, {r0, r1}
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	461a      	mov	r2, r3
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	4413      	add	r3, r2
 80011e4:	3308      	adds	r3, #8
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <ws2812SetColor+0x118>)
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	cb03      	ldmia	r3!, {r0, r1}
 80011f2:	6010      	str	r0, [r2, #0]
 80011f4:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	461a      	mov	r2, r3
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	4413      	add	r3, r2
 8001206:	3310      	adds	r3, #16
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <ws2812SetColor+0x118>)
 800120a:	4413      	add	r3, r2
 800120c:	461a      	mov	r2, r3
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	cb03      	ldmia	r3!, {r0, r1}
 8001214:	6010      	str	r0, [r2, #0]
 8001216:	6051      	str	r1, [r2, #4]
}
 8001218:	bf00      	nop
 800121a:	372c      	adds	r7, #44	; 0x2c
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200001a4 	.word	0x200001a4

08001228 <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001228:	b480      	push	{r7}
 800122a:	b08b      	sub	sp, #44	; 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4603      	mov	r3, r0
 8001238:	70fb      	strb	r3, [r7, #3]
 800123a:	460b      	mov	r3, r1
 800123c:	70bb      	strb	r3, [r7, #2]
 800123e:	4613      	mov	r3, r2
 8001240:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	e03e      	b.n	80012c6 <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 8001248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da06      	bge.n	800125e <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001250:	f107 0218 	add.w	r2, r7, #24
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	4413      	add	r3, r2
 8001258:	2287      	movs	r2, #135	; 0x87
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e005      	b.n	800126a <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 800125e:	f107 0218 	add.w	r2, r7, #24
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	4413      	add	r3, r2
 8001266:	2243      	movs	r2, #67	; 0x43
 8001268:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001270:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da06      	bge.n	8001286 <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	4413      	add	r3, r2
 8001280:	2287      	movs	r2, #135	; 0x87
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e005      	b.n	8001292 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8001286:	f107 0210 	add.w	r2, r7, #16
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	4413      	add	r3, r2
 800128e:	2243      	movs	r2, #67	; 0x43
 8001290:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8001298:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da06      	bge.n	80012ae <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 80012a0:	f107 0208 	add.w	r2, r7, #8
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	4413      	add	r3, r2
 80012a8:	2287      	movs	r2, #135	; 0x87
 80012aa:	701a      	strb	r2, [r3, #0]
 80012ac:	e005      	b.n	80012ba <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	4413      	add	r3, r2
 80012b6:	2243      	movs	r2, #67	; 0x43
 80012b8:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	3301      	adds	r3, #1
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	ddbd      	ble.n	8001248 <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 80012cc:	2332      	movs	r3, #50	; 0x32
 80012ce:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	461a      	mov	r2, r3
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	4413      	add	r3, r2
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <ws2812SetRanbowColor+0x118>)
 80012e2:	4413      	add	r3, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	cb03      	ldmia	r3!, {r0, r1}
 80012ec:	6010      	str	r0, [r2, #0]
 80012ee:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	461a      	mov	r2, r3
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	4413      	add	r3, r2
 8001300:	3308      	adds	r3, #8
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <ws2812SetRanbowColor+0x118>)
 8001304:	4413      	add	r3, r2
 8001306:	461a      	mov	r2, r3
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	cb03      	ldmia	r3!, {r0, r1}
 800130e:	6010      	str	r0, [r2, #0]
 8001310:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	461a      	mov	r2, r3
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	4413      	add	r3, r2
 8001322:	3310      	adds	r3, #16
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <ws2812SetRanbowColor+0x118>)
 8001326:	4413      	add	r3, r2
 8001328:	461a      	mov	r2, r3
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	cb03      	ldmia	r3!, {r0, r1}
 8001330:	6010      	str	r0, [r2, #0]
 8001332:	6051      	str	r1, [r2, #4]
}
 8001334:	bf00      	nop
 8001336:	372c      	adds	r7, #44	; 0x2c
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200007d8 	.word	0x200007d8

08001344 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <setPixelColor+0xec>)
 8001352:	885b      	ldrh	r3, [r3, #2]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	429a      	cmp	r2, r3
 8001358:	d266      	bcs.n	8001428 <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	0c1b      	lsrs	r3, r3, #16
 800135e:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <setPixelColor+0xf0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d014      	beq.n	800139c <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8001372:	7afb      	ldrb	r3, [r7, #11]
 8001374:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <setPixelColor+0xf0>)
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	121b      	asrs	r3, r3, #8
 800137e:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	4a2c      	ldr	r2, [pc, #176]	; (8001434 <setPixelColor+0xf0>)
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	121b      	asrs	r3, r3, #8
 800138c:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 800138e:	7a7b      	ldrb	r3, [r7, #9]
 8001390:	4a28      	ldr	r2, [pc, #160]	; (8001434 <setPixelColor+0xf0>)
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	121b      	asrs	r3, r3, #8
 800139a:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <setPixelColor+0xf4>)
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	4b26      	ldr	r3, [pc, #152]	; (800143c <setPixelColor+0xf8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d108      	bne.n	80013ba <setPixelColor+0x76>
      p = &pixels[n * 3];
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <setPixelColor+0xfc>)
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e01b      	b.n	80013f2 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <setPixelColor+0xfc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	0e1b      	lsrs	r3, r3, #24
 80013ca:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <setPixelColor+0xf0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <setPixelColor+0xa0>
 80013d4:	7a3b      	ldrb	r3, [r7, #8]
 80013d6:	4a17      	ldr	r2, [pc, #92]	; (8001434 <setPixelColor+0xf0>)
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	121b      	asrs	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e000      	b.n	80013e6 <setPixelColor+0xa2>
 80013e4:	7a3b      	ldrb	r3, [r7, #8]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <setPixelColor+0xf4>)
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	4611      	mov	r1, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	440a      	add	r2, r1
 80013f0:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <setPixelColor+0xf8>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	7afa      	ldrb	r2, [r7, #11]
 80013fe:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <setPixelColor+0x100>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	7aba      	ldrb	r2, [r7, #10]
 800140c:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <setPixelColor+0x104>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	7a7a      	ldrb	r2, [r7, #9]
 800141a:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 800141c:	88f8      	ldrh	r0, [r7, #6]
 800141e:	7a7b      	ldrb	r3, [r7, #9]
 8001420:	7aba      	ldrb	r2, [r7, #10]
 8001422:	7af9      	ldrb	r1, [r7, #11]
 8001424:	f7ff ff00 	bl	8001228 <ws2812SetRanbowColor>
  }

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20002660 	.word	0x20002660
 8001434:	2000254c 	.word	0x2000254c
 8001438:	20002430 	.word	0x20002430
 800143c:	20002610 	.word	0x20002610
 8001440:	20002378 	.word	0x20002378
 8001444:	20002434 	.word	0x20002434
 8001448:	2000254d 	.word	0x2000254d

0800144c <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	43db      	mvns	r3, r3
 800145a:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b54      	cmp	r3, #84	; 0x54
 8001460:	d811      	bhi.n	8001486 <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	461a      	mov	r2, r3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	3b01      	subs	r3, #1
 800146e:	b2d8      	uxtb	r0, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	461a      	mov	r2, r3
 8001474:	0052      	lsls	r2, r2, #1
 8001476:	4413      	add	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	f000 f832 	bl	80014e6 <Color>
 8001482:	4603      	mov	r3, r0
 8001484:	e02b      	b.n	80014de <Wheel+0x92>
  }
  if(WheelPos < 170) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2ba9      	cmp	r3, #169	; 0xa9
 800148a:	d814      	bhi.n	80014b6 <Wheel+0x6a>
  		WheelPos -= 85;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	3b55      	subs	r3, #85	; 0x55
 8001490:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	461a      	mov	r2, r3
 8001496:	0052      	lsls	r2, r2, #1
 8001498:	4413      	add	r3, r2
 800149a:	b2d9      	uxtb	r1, r3
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	461a      	mov	r2, r3
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f81a 	bl	80014e6 <Color>
 80014b2:	4603      	mov	r3, r0
 80014b4:	e013      	b.n	80014de <Wheel+0x92>
  }
  WheelPos -= 170;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	3356      	adds	r3, #86	; 0x56
 80014ba:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	461a      	mov	r2, r3
 80014c0:	0052      	lsls	r2, r2, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	b2d8      	uxtb	r0, r3
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	461a      	mov	r2, r3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f000 f805 	bl	80014e6 <Color>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	460b      	mov	r3, r1
 80014f2:	71bb      	strb	r3, [r7, #6]
 80014f4:	4613      	mov	r3, r2
 80014f6:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	041a      	lsls	r2, r3, #16
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	431a      	orrs	r2, r3
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	4313      	orrs	r3, r2
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151a:	490e      	ldr	r1, [pc, #56]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001530:	4c0b      	ldr	r4, [pc, #44]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153e:	f7ff fd81 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f008 fb11 	bl	8009b68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001546:	f7fe fe6b 	bl	8000220 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   r0, =_estack
 800154c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001558:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 800155c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001560:	20003570 	.word	0x20003570

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>

08001566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f8dc 	bl	800172e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fcb8 	bl	8000eec <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e001      	b.n	800158c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001588:	f7ff fad6 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158c:	79fb      	ldrb	r3, [r7, #7]

}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x1c>)
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20002664 	.word	0x20002664
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20002664 	.word	0x20002664

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	; (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	; (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	; (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	; (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	; 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ff4c 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001752:	f7ff ff63 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001756:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7ff ffb3 	bl	80016c8 <NVIC_EncodePriority>
 8001762:	4602      	mov	r2, r0
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff82 	bl	8001674 <__NVIC_SetPriority>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff56 	bl	8001638 <__NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e08d      	b.n	80018c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_DMA_Init+0x138>)
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d80f      	bhi.n	80017d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_DMA_Init+0x13c>)
 80017ba:	4413      	add	r3, r2
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_DMA_Init+0x140>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	009a      	lsls	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_DMA_Init+0x144>)
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
 80017d0:	e00e      	b.n	80017f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_DMA_Init+0x148>)
 80017da:	4413      	add	r3, r2
 80017dc:	4a3d      	ldr	r2, [pc, #244]	; (80018d4 <HAL_DMA_Init+0x140>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a3c      	ldr	r2, [pc, #240]	; (80018e0 <HAL_DMA_Init+0x14c>)
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f9b6 	bl	8001bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001850:	d102      	bne.n	8001858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800186c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_DMA_Init+0x104>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b04      	cmp	r3, #4
 800187c:	d80c      	bhi.n	8001898 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f9d6 	bl	8001c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e008      	b.n	80018aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020407 	.word	0x40020407
 80018d0:	bffdfff8 	.word	0xbffdfff8
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40020000 	.word	0x40020000
 80018dc:	bffdfbf8 	.word	0xbffdfbf8
 80018e0:	40020400 	.word	0x40020400

080018e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Start_IT+0x20>
 8001900:	2302      	movs	r3, #2
 8001902:	e066      	b.n	80019d2 <HAL_DMA_Start_IT+0xee>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d155      	bne.n	80019c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f8fb 	bl	8001b38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 020e 	orr.w	r2, r2, #14
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e00f      	b.n	800197c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0204 	bic.w	r2, r2, #4
 800196a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 020a 	orr.w	r2, r2, #10
 800197a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001998:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e005      	b.n	80019d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
 80019ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2204      	movs	r2, #4
 80019fc:	409a      	lsls	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d026      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x7a>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d021      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0204 	bic.w	r2, r2, #4
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f003 021f 	and.w	r2, r3, #31
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d071      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a52:	e06c      	b.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02e      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d029      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020a 	bic.w	r2, r2, #10
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d038      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ac4:	e033      	b.n	8001b2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2208      	movs	r2, #8
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d025      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 020e 	bic.w	r2, r2, #14
 8001af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
}
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f003 021f 	and.w	r2, r3, #31
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d108      	bne.n	8001b98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b96:	e007      	b.n	8001ba8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d802      	bhi.n	8001bce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	e001      	b.n	8001bd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bd0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	009a      	lsls	r2, r3, #2
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40020407 	.word	0x40020407
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020820 	.word	0x40020820
 8001c28:	cccccccd 	.word	0xcccccccd
 8001c2c:	40020880 	.word	0x40020880

08001c30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c52:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	1000823f 	.word	0x1000823f
 8001c74:	40020940 	.word	0x40020940

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c86:	e15a      	b.n	8001f3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 814c 	beq.w	8001f38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_GPIO_Init+0x48>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb4:	2b11      	cmp	r3, #17
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d130      	bne.n	8001d22 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 0201 	and.w	r2, r3, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0xea>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d123      	bne.n	8001daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	6939      	ldr	r1, [r7, #16]
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a6 	beq.w	8001f38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6613      	str	r3, [r2, #96]	; 0x60
 8001df8:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_GPIO_Init+0x2e4>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e2e:	d01f      	beq.n	8001e70 <HAL_GPIO_Init+0x1f8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x2ec>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d019      	beq.n	8001e6c <HAL_GPIO_Init+0x1f4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_GPIO_Init+0x1f0>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_GPIO_Init+0x2f4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1ec>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a49      	ldr	r2, [pc, #292]	; (8001f70 <HAL_GPIO_Init+0x2f8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1e8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_GPIO_Init+0x2fc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1e4>
 8001e58:	2305      	movs	r3, #5
 8001e5a:	e00a      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2306      	movs	r3, #6
 8001e5e:	e008      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e006      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e004      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e002      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_GPIO_Init+0x1fa>
 8001e70:	2300      	movs	r3, #0
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	f002 0203 	and.w	r2, r2, #3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4093      	lsls	r3, r2
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e82:	4937      	ldr	r1, [pc, #220]	; (8001f60 <HAL_GPIO_Init+0x2e8>)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e90:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb4:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001eba:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ede:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f47f ae9d 	bne.w	8001c88 <HAL_GPIO_Init+0x10>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010000 	.word	0x40010000
 8001f64:	48000400 	.word	0x48000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	48000c00 	.word	0x48000c00
 8001f70:	48001000 	.word	0x48001000
 8001f74:	48001400 	.word	0x48001400
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fae:	b08b      	sub	sp, #44	; 0x2c
 8001fb0:	af06      	add	r7, sp, #24
 8001fb2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0ad      	b.n	800211a <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f007 fac0 	bl	8009558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fafe 	bl	80055e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e035      	b.n	800205c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	015b      	lsls	r3, r3, #5
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3329      	adds	r3, #41	; 0x29
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	4413      	add	r3, r2
 8002006:	3328      	adds	r3, #40	; 0x28
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	b291      	uxth	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	015b      	lsls	r3, r3, #5
 8002016:	4413      	add	r3, r2
 8002018:	3336      	adds	r3, #54	; 0x36
 800201a:	460a      	mov	r2, r1
 800201c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	4413      	add	r3, r2
 8002026:	332b      	adds	r3, #43	; 0x2b
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	4413      	add	r3, r2
 8002034:	3338      	adds	r3, #56	; 0x38
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	4413      	add	r3, r2
 8002042:	333c      	adds	r3, #60	; 0x3c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	3302      	adds	r3, #2
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	4413      	add	r3, r2
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3c4      	bcc.n	8001ff0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e031      	b.n	80020d0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	4413      	add	r3, r2
 8002074:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	4413      	add	r3, r2
 8002084:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	015b      	lsls	r3, r3, #5
 8002092:	4413      	add	r3, r2
 8002094:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	015b      	lsls	r3, r3, #5
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	015b      	lsls	r3, r3, #5
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	330a      	adds	r3, #10
 80020c2:	015b      	lsls	r3, r3, #5
 80020c4:	4413      	add	r3, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	3301      	adds	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3c8      	bcc.n	800206c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	687e      	ldr	r6, [r7, #4]
 80020e2:	466d      	mov	r5, sp
 80020e4:	f106 0410 	add.w	r4, r6, #16
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	602b      	str	r3, [r5, #0]
 80020f0:	1d33      	adds	r3, r6, #4
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f003 fa91 	bl	800561c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fe35 	bl	8002d82 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002122 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_PCD_Start+0x16>
 8002134:	2302      	movs	r3, #2
 8002136:	e012      	b.n	800215e <HAL_PCD_Start+0x3c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fab5 	bl	80066b4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fa30 	bl	80055b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f004 fab5 	bl	80066e2 <USB_ReadInterrupts>
 8002178:	4603      	mov	r3, r0
 800217a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002182:	d102      	bne.n	800218a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fb33 	bl	80027f0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f004 faa7 	bl	80066e2 <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d112      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	b292      	uxth	r2, r2
 80021b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f007 fa64 	bl	8009686 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021be:	2100      	movs	r1, #0
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f91e 	bl	8002402 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fa89 	bl	80066e2 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021da:	d10b      	bne.n	80021f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 fa72 	bl	80066e2 <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002208:	d10b      	bne.n	8002222 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221c:	b292      	uxth	r2, r2
 800221e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f004 fa5b 	bl	80066e2 <USB_ReadInterrupts>
 800222c:	4603      	mov	r3, r0
 800222e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	d133      	bne.n	80022a0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0204 	bic.w	r2, r2, #4
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0208 	bic.w	r2, r2, #8
 8002262:	b292      	uxth	r2, r2
 8002264:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f007 fbf3 	bl	8009a68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f007 fa38 	bl	80096f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800229a:	b292      	uxth	r2, r2
 800229c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 fa1c 	bl	80066e2 <USB_ReadInterrupts>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022b4:	d126      	bne.n	8002304 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0208 	orr.w	r2, r2, #8
 80022c8:	b292      	uxth	r2, r2
 80022ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e0:	b292      	uxth	r2, r2
 80022e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0204 	orr.w	r2, r2, #4
 80022f8:	b292      	uxth	r2, r2
 80022fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f007 f9e0 	bl	80096c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f9ea 	bl	80066e2 <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d13f      	bne.n	8002398 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232a:	b292      	uxth	r2, r2
 800232c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12b      	bne.n	8002392 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002342:	b29a      	uxth	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0204 	orr.w	r2, r2, #4
 800234c:	b292      	uxth	r2, r2
 800234e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0208 	orr.w	r2, r2, #8
 8002364:	b292      	uxth	r2, r2
 8002366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800237a:	b29b      	uxth	r3, r3
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002388:	2101      	movs	r1, #1
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f007 fb6c 	bl	8009a68 <HAL_PCDEx_LPM_Callback>
 8002390:	e002      	b.n	8002398 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f007 f996 	bl	80096c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f004 f9a0 	bl	80066e2 <USB_ReadInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d10e      	bne.n	80023cc <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023c0:	b292      	uxth	r2, r2
 80023c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f007 f94f 	bl	800966a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 f986 	bl	80066e2 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e0:	d10b      	bne.n	80023fa <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f4:	b292      	uxth	r2, r2
 80023f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_PCD_SetAddress+0x1a>
 8002418:	2302      	movs	r3, #2
 800241a:	e013      	b.n	8002444 <HAL_PCD_SetAddress+0x42>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f004 f929 	bl	800668c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	70fb      	strb	r3, [r7, #3]
 800245e:	460b      	mov	r3, r1
 8002460:	803b      	strh	r3, [r7, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800246a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da0b      	bge.n	800248a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	015b      	lsls	r3, r3, #5
 800247a:	3328      	adds	r3, #40	; 0x28
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	705a      	strb	r2, [r3, #1]
 8002488:	e00b      	b.n	80024a2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	015b      	lsls	r3, r3, #5
 8002492:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024ae:	883a      	ldrh	r2, [r7, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	78ba      	ldrb	r2, [r7, #2]
 80024b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024cc:	78bb      	ldrb	r3, [r7, #2]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d102      	bne.n	80024d8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_EP_Open+0x9a>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e00e      	b.n	8002504 <HAL_PCD_EP_Open+0xb8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f8b5 	bl	8005664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002502:	7afb      	ldrb	r3, [r7, #11]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	da0b      	bge.n	8002538 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002520:	78fb      	ldrb	r3, [r7, #3]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	3328      	adds	r3, #40	; 0x28
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	705a      	strb	r2, [r3, #1]
 8002536:	e00b      	b.n	8002550 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	015b      	lsls	r3, r3, #5
 8002540:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_PCD_EP_Close+0x5e>
 8002566:	2302      	movs	r3, #2
 8002568:	e00e      	b.n	8002588 <HAL_PCD_EP_Close+0x7c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fb63 	bl	8005c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	460b      	mov	r3, r1
 800259e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	015b      	lsls	r3, r3, #5
 80025a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2200      	movs	r2, #0
 80025c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2200      	movs	r2, #0
 80025c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6979      	ldr	r1, [r7, #20]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fcc2 	bl	8005f70 <USB_EPStartXfer>
 80025ec:	e005      	b.n	80025fa <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6979      	ldr	r1, [r7, #20]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fcbb 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	330a      	adds	r3, #10
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	4413      	add	r3, r2
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	460b      	mov	r3, r1
 800263c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	3328      	adds	r3, #40	; 0x28
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2201      	movs	r2, #1
 8002664:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	b2da      	uxtb	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fc74 	bl	8005f70 <USB_EPStartXfer>
 8002688:	e005      	b.n	8002696 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6979      	ldr	r1, [r7, #20]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc6d 	bl	8005f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 0207 	and.w	r2, r3, #7
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d901      	bls.n	80026be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e046      	b.n	800274c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da0b      	bge.n	80026de <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	015b      	lsls	r3, r3, #5
 80026ce:	3328      	adds	r3, #40	; 0x28
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	705a      	strb	r2, [r3, #1]
 80026dc:	e009      	b.n	80026f2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	015b      	lsls	r3, r3, #5
 80026e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_SetStall+0x72>
 800270e:	2302      	movs	r3, #2
 8002710:	e01c      	b.n	800274c <HAL_PCD_EP_SetStall+0xac>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fedd 	bl	80064e0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f003 ffe0 	bl	8006702 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 020f 	and.w	r2, r3, #15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d901      	bls.n	8002772 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e03a      	b.n	80027e8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002776:	2b00      	cmp	r3, #0
 8002778:	da0b      	bge.n	8002792 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	3328      	adds	r3, #40	; 0x28
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
 8002790:	e00b      	b.n	80027aa <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	015b      	lsls	r3, r3, #5
 800279a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4413      	add	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_PCD_EP_ClrStall+0x76>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e00e      	b.n	80027e8 <HAL_PCD_EP_ClrStall+0x94>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fec3 	bl	8006564 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027f8:	e274      	b.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002802:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002804:	8afb      	ldrh	r3, [r7, #22]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800280e:	7d7b      	ldrb	r3, [r7, #21]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 813c 	bne.w	8002a8e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002816:	8afb      	ldrh	r3, [r7, #22]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d14f      	bne.n	80028c0 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800282c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002830:	b29c      	uxth	r4, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800283a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283e:	b29b      	uxth	r3, r3
 8002840:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3328      	adds	r3, #40	; 0x28
 8002846:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	4413      	add	r3, r2
 8002862:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	441a      	add	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800287e:	2100      	movs	r1, #0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f006 fedb 	bl	800963c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8228 	beq.w	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 8223 	bne.w	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b292      	uxth	r2, r2
 80028b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028be:	e211      	b.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028c6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028d0:	8a7b      	ldrh	r3, [r7, #18]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d031      	beq.n	800293e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002914:	b29b      	uxth	r3, r3
 8002916:	f003 ff41 	bl	800679c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29a      	uxth	r2, r3
 8002922:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002926:	4013      	ands	r3, r2
 8002928:	b29c      	uxth	r4, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002932:	b292      	uxth	r2, r2
 8002934:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 fe56 	bl	80095e8 <HAL_PCD_SetupStageCallback>
 800293c:	e1d2      	b.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800293e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f280 81ce 	bge.w	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29a      	uxth	r2, r3
 8002950:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002954:	4013      	ands	r3, r2
 8002956:	b29c      	uxth	r4, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002960:	b292      	uxth	r2, r2
 8002962:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d019      	beq.n	80029c8 <PCD_EP_ISR_Handler+0x1d8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f003 fef5 	bl	800679c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029c0:	2100      	movs	r1, #0
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f006 fe22 	bl	800960c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461c      	mov	r4, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	441c      	add	r4, r3
 80029da:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80029de:	461c      	mov	r4, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10e      	bne.n	8002a06 <PCD_EP_ISR_Handler+0x216>
 80029e8:	8823      	ldrh	r3, [r4, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	8023      	strh	r3, [r4, #0]
 80029f4:	8823      	ldrh	r3, [r4, #0]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8023      	strh	r3, [r4, #0]
 8002a04:	e02d      	b.n	8002a62 <PCD_EP_ISR_Handler+0x272>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a0c:	d812      	bhi.n	8002a34 <PCD_EP_ISR_Handler+0x244>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <PCD_EP_ISR_Handler+0x238>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	029b      	lsls	r3, r3, #10
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8023      	strh	r3, [r4, #0]
 8002a32:	e016      	b.n	8002a62 <PCD_EP_ISR_Handler+0x272>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <PCD_EP_ISR_Handler+0x25e>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	b29c      	uxth	r4, r3
 8002a74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002a78:	b29c      	uxth	r4, r3
 8002a7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a7e:	b29c      	uxth	r4, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <PCD_EP_ISR_Handler+0x510>)
 8002a86:	4323      	orrs	r3, r4
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8013      	strh	r3, [r2, #0]
 8002a8c:	e12a      	b.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	7d7b      	ldrb	r3, [r7, #21]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f280 80cb 	bge.w	8002c3e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	7d7b      	ldrb	r3, [r7, #21]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002abc:	4013      	ands	r3, r2
 8002abe:	b29c      	uxth	r4, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	7d7b      	ldrb	r3, [r7, #21]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ad4:	7d7b      	ldrb	r3, [r7, #21]
 8002ad6:	015b      	lsls	r3, r3, #5
 8002ad8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	7b1b      	ldrb	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d11f      	bne.n	8002b2a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b0e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002b10:	8bfb      	ldrh	r3, [r7, #30]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06e      	beq.n	8002bf4 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6959      	ldr	r1, [r3, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88da      	ldrh	r2, [r3, #6]
 8002b22:	8bfb      	ldrh	r3, [r7, #30]
 8002b24:	f003 fe3a 	bl	800679c <USB_ReadPMA>
 8002b28:	e064      	b.n	8002bf4 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	b29c      	uxth	r4, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	441a      	add	r2, r3
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <PCD_EP_ISR_Handler+0x514>)
 8002b56:	4323      	orrs	r3, r4
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01f      	beq.n	8002bb6 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002b9c:	8bfb      	ldrh	r3, [r7, #30]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d028      	beq.n	8002bf4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6959      	ldr	r1, [r3, #20]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	891a      	ldrh	r2, [r3, #8]
 8002bae:	8bfb      	ldrh	r3, [r7, #30]
 8002bb0:	f003 fdf4 	bl	800679c <USB_ReadPMA>
 8002bb4:	e01e      	b.n	8002bf4 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bda:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002bdc:	8bfb      	ldrh	r3, [r7, #30]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6959      	ldr	r1, [r3, #20]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	895a      	ldrh	r2, [r3, #10]
 8002bee:	8bfb      	ldrh	r3, [r7, #30]
 8002bf0:	f003 fdd4 	bl	800679c <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	8bfb      	ldrh	r3, [r7, #30]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	8bfb      	ldrh	r3, [r7, #30]
 8002c06:	441a      	add	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x42e>
 8002c14:	8bfa      	ldrh	r2, [r7, #30]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d206      	bcs.n	8002c2c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f006 fcf1 	bl	800960c <HAL_PCD_DataOutStageCallback>
 8002c2a:	e008      	b.n	8002c3e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	7819      	ldrb	r1, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fca9 	bl	8002590 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c3e:	8a7b      	ldrh	r3, [r7, #18]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d04d      	beq.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c48:	7d7b      	ldrb	r3, [r7, #21]
 8002c4a:	015b      	lsls	r3, r3, #5
 8002c4c:	3328      	adds	r3, #40	; 0x28
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	7d7b      	ldrb	r3, [r7, #21]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	b29c      	uxth	r4, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	7d7b      	ldrb	r3, [r7, #21]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d106      	bne.n	8002cd2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f006 fcb6 	bl	800963c <HAL_PCD_DataInStageCallback>
 8002cd0:	e008      	b.n	8002ce4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	7819      	ldrb	r1, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fca5 	bl	800262e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f6ff ad82 	blt.w	80027fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3724      	adds	r7, #36	; 0x24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	ffff8080 	.word	0xffff8080
 8002d04:	ffff80c0 	.word	0xffff80c0

08002d08 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	817b      	strh	r3, [r7, #10]
 8002d16:	4613      	mov	r3, r2
 8002d18:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	897b      	ldrh	r3, [r7, #10]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	3328      	adds	r3, #40	; 0x28
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e006      	b.n	8002d46 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d38:	897b      	ldrh	r3, [r7, #10]
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	80da      	strh	r2, [r3, #6]
 8002d5a:	e00b      	b.n	8002d74 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f043 0302 	orr.w	r3, r3, #2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d141      	bne.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de6:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df2:	d131      	bne.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002df4:	4b47      	ldr	r3, [pc, #284]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0c:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e14:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2232      	movs	r2, #50	; 0x32
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	3301      	adds	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e2a:	e002      	b.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d102      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f2      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e46:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d158      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e057      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e68:	e04d      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e70:	d141      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d131      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e80:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2232      	movs	r2, #50	; 0x32
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9b      	lsrs	r3, r3, #18
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb6:	e002      	b.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d102      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f2      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d112      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e011      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ef4:	e007      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40007000 	.word	0x40007000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e308      	b.n	8003544 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d075      	beq.n	800302a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4ba3      	ldr	r3, [pc, #652]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3e>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_OscConfig+0x44>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4b99      	ldr	r3, [pc, #612]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05b      	beq.n	8003028 <HAL_RCC_OscConfig+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d157      	bne.n	8003028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2e3      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x74>
 8002f86:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a90      	ldr	r2, [pc, #576]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a8a      	ldr	r2, [pc, #552]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a87      	ldr	r2, [pc, #540]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a83      	ldr	r2, [pc, #524]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a80      	ldr	r2, [pc, #512]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe faf0 	bl	80015bc <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe faec 	bl	80015bc <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e2a8      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xc0>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fadc 	bl	80015bc <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fad8 	bl	80015bc <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e294      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0xe8>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d075      	beq.n	8003122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003040:	4b62      	ldr	r3, [pc, #392]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d102      	bne.n	8003056 <HAL_RCC_OscConfig+0x136>
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d002      	beq.n	800305c <HAL_RCC_OscConfig+0x13c>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d11f      	bne.n	800309c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x154>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e267      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	4952      	ldr	r1, [pc, #328]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003088:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_RCC_OscConfig+0x2b0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd ff2d 	bl	8000eec <HAL_InitTick>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e253      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a48      	ldr	r2, [pc, #288]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe fa84 	bl	80015bc <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe fa80 	bl	80015bc <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e23c      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ca:	4b40      	ldr	r3, [pc, #256]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	4939      	ldr	r1, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
 80030ea:	e01a      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a36      	ldr	r2, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fa60 	bl	80015bc <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fa5c 	bl	80015bc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e218      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1e0>
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03c      	beq.n	80031a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01c      	beq.n	8003170 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003146:	f7fe fa39 	bl	80015bc <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe fa35 	bl	80015bc <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1f1      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ef      	beq.n	800314e <HAL_RCC_OscConfig+0x22e>
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	4a15      	ldr	r2, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fe fa1c 	bl	80015bc <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003188:	f7fe fa18 	bl	80015bc <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1d4      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ef      	bne.n	8003188 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80ab 	beq.w	800330c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e005      	b.n	80031d6 <HAL_RCC_OscConfig+0x2b6>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	20000004 	.word	0x20000004
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4baf      	ldr	r3, [pc, #700]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	4aae      	ldr	r2, [pc, #696]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6593      	str	r3, [r2, #88]	; 0x58
 80031e6:	4bac      	ldr	r3, [pc, #688]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	4ba9      	ldr	r3, [pc, #676]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003202:	4ba6      	ldr	r3, [pc, #664]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4aa5      	ldr	r2, [pc, #660]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fe f9d5 	bl	80015bc <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fe f9d1 	bl	80015bc <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e18d      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003228:	4b9c      	ldr	r3, [pc, #624]	; (800349c <HAL_RCC_OscConfig+0x57c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_RCC_OscConfig+0x32e>
 800323c:	4b96      	ldr	r3, [pc, #600]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a95      	ldr	r2, [pc, #596]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324c:	e024      	b.n	8003298 <HAL_RCC_OscConfig+0x378>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d110      	bne.n	8003278 <HAL_RCC_OscConfig+0x358>
 8003256:	4b90      	ldr	r3, [pc, #576]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	4a8e      	ldr	r2, [pc, #568]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003266:	4b8c      	ldr	r3, [pc, #560]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a8a      	ldr	r2, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e00f      	b.n	8003298 <HAL_RCC_OscConfig+0x378>
 8003278:	4b87      	ldr	r3, [pc, #540]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	4a86      	ldr	r2, [pc, #536]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003288:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	4a82      	ldr	r2, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d016      	beq.n	80032ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe f98c 	bl	80015bc <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	e00a      	b.n	80032be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a8:	f7fe f988 	bl	80015bc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e142      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ed      	beq.n	80032a8 <HAL_RCC_OscConfig+0x388>
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fe f975 	bl	80015bc <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	e00a      	b.n	80032ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d6:	f7fe f971 	bl	80015bc <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e12b      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ed      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fa:	7ffb      	ldrb	r3, [r7, #31]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d105      	bne.n	800330c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4a64      	ldr	r2, [pc, #400]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03c      	beq.n	8003392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01c      	beq.n	800335a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003326:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fe f944 	bl	80015bc <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003338:	f7fe f940 	bl	80015bc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0fc      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800334a:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800334c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ef      	beq.n	8003338 <HAL_RCC_OscConfig+0x418>
 8003358:	e01b      	b.n	8003392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800335a:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800335c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fe f927 	bl	80015bc <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003372:	f7fe f923 	bl	80015bc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0df      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ef      	bne.n	8003372 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80d3 	beq.w	8003542 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	2b0c      	cmp	r3, #12
 80033a6:	f000 808d 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d15a      	bne.n	8003468 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b2:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a38      	ldr	r2, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe f8fd 	bl	80015bc <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe f8f9 	bl	80015bc <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0b5      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_OscConfig+0x580>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6a11      	ldr	r1, [r2, #32]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f4:	3a01      	subs	r2, #1
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033fe:	0212      	lsls	r2, r2, #8
 8003400:	4311      	orrs	r1, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003406:	0852      	lsrs	r2, r2, #1
 8003408:	3a01      	subs	r2, #1
 800340a:	0552      	lsls	r2, r2, #21
 800340c:	4311      	orrs	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003412:	0852      	lsrs	r2, r2, #1
 8003414:	3a01      	subs	r2, #1
 8003416:	0652      	lsls	r2, r2, #25
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800341e:	06d2      	lsls	r2, r2, #27
 8003420:	430a      	orrs	r2, r1
 8003422:	491d      	ldr	r1, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003424:	4313      	orrs	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800342e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003434:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe f8bc 	bl	80015bc <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe f8b8 	bl	80015bc <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e074      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345a:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x528>
 8003466:	e06c      	b.n	8003542 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800346e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003472:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 800347a:	f023 0303 	bic.w	r3, r3, #3
 800347e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a04      	ldr	r2, [pc, #16]	; (8003498 <HAL_RCC_OscConfig+0x578>)
 8003486:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe f894 	bl	80015bc <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003496:	e00e      	b.n	80034b6 <HAL_RCC_OscConfig+0x596>
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f88a 	bl	80015bc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e046      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x62c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x584>
 80034c2:	e03e      	b.n	8003542 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e039      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <HAL_RCC_OscConfig+0x62c>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d12c      	bne.n	800353e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	3b01      	subs	r3, #1
 80034f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d123      	bne.n	800353e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11b      	bne.n	800353e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d113      	bne.n	800353e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d109      	bne.n	800353e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e11e      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d910      	bls.n	8003598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 020f 	bic.w	r2, r3, #15
 800357e:	498c      	ldr	r1, [pc, #560]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b8a      	ldr	r3, [pc, #552]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e106      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d073      	beq.n	800368c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d129      	bne.n	8003600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0f4      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035bc:	f000 f9b8 	bl	8003930 <RCC_GetSysClockFreqFromPLLSource>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4a7c      	ldr	r2, [pc, #496]	; (80037b8 <HAL_RCC_ClockConfig+0x268>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d93f      	bls.n	800364a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ca:	4b7a      	ldr	r3, [pc, #488]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d009      	beq.n	80035ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d033      	beq.n	800364a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d12f      	bne.n	800364a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035ea:	4b72      	ldr	r3, [pc, #456]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f2:	4a70      	ldr	r2, [pc, #448]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80035f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e024      	b.n	800364a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d107      	bne.n	8003618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0c6      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0be      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003628:	f000 f8ce 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800362c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a61      	ldr	r2, [pc, #388]	; (80037b8 <HAL_RCC_ClockConfig+0x268>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d909      	bls.n	800364a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003636:	4b5f      	ldr	r3, [pc, #380]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800363e:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4957      	ldr	r1, [pc, #348]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fd ffae 	bl	80015bc <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fd ffaa 	bl	80015bc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e095      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036bc:	4b3d      	ldr	r3, [pc, #244]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036c4:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4936      	ldr	r1, [pc, #216]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
 80036de:	e008      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b80      	cmp	r3, #128	; 0x80
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f2:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d21d      	bcs.n	800373c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 020f 	bic.w	r2, r3, #15
 8003708:	4929      	ldr	r1, [pc, #164]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003710:	f7fd ff54 	bl	80015bc <HAL_GetTick>
 8003714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	e00a      	b.n	800372e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003718:	f7fd ff50 	bl	80015bc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e03b      	b.n	80037a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_ClockConfig+0x260>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d1ed      	bne.n	8003718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4917      	ldr	r1, [pc, #92]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490f      	ldr	r1, [pc, #60]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800377a:	f000 f825 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 800377e:	4601      	mov	r1, r0
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_RCC_ClockConfig+0x264>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_RCC_ClockConfig+0x26c>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	fa21 f303 	lsr.w	r3, r1, r3
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_RCC_ClockConfig+0x270>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800379a:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <HAL_RCC_ClockConfig+0x274>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fd fba4 	bl	8000eec <HAL_InitTick>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	04c4b400 	.word	0x04c4b400
 80037bc:	08009c8c 	.word	0x08009c8c
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037ce:	4b2c      	ldr	r3, [pc, #176]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037da:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e047      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e03e      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037f2:	4b23      	ldr	r3, [pc, #140]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d136      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381c:	4a19      	ldr	r2, [pc, #100]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	0a12      	lsrs	r2, r2, #8
 800382a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	617b      	str	r3, [r7, #20]
      break;
 8003834:	e00c      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	0a12      	lsrs	r2, r2, #8
 8003844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
      break;
 800384e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e001      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003870:	693b      	ldr	r3, [r7, #16]
}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	00f42400 	.word	0x00f42400

08003888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000000 	.word	0x20000000

080038a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0adb      	lsrs	r3, r3, #11
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	08009c9c 	.word	0x08009c9c

080038cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	220f      	movs	r2, #15
 80038da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0203 	and.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_RCC_GetClockConfig+0x60>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	40022000 	.word	0x40022000

08003930 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d10c      	bne.n	800396e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800395e:	68d2      	ldr	r2, [r2, #12]
 8003960:	0a12      	lsrs	r2, r2, #8
 8003962:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	617b      	str	r3, [r7, #20]
    break;
 800396c:	e00c      	b.n	8003988 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800396e:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	0a12      	lsrs	r2, r2, #8
 800397c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
    break;
 8003986:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0e5b      	lsrs	r3, r3, #25
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	3301      	adds	r3, #1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039a2:	687b      	ldr	r3, [r7, #4]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40021000 	.word	0x40021000
 80039b4:	00f42400 	.word	0x00f42400

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c0:	2300      	movs	r3, #0
 80039c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c4:	2300      	movs	r3, #0
 80039c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8098 	beq.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	4a3f      	ldr	r2, [pc, #252]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6593      	str	r3, [r2, #88]	; 0x58
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	2301      	movs	r3, #1
 8003a00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a39      	ldr	r2, [pc, #228]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a0e:	f7fd fdd5 	bl	80015bc <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a14:	e009      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fd fdd1 	bl	80015bc <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d902      	bls.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	74fb      	strb	r3, [r7, #19]
        break;
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ef      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d159      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01e      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d019      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7fd fd91 	bl	80015bc <HAL_GetTick>
 8003a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fd fd8d 	bl	80015bc <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d902      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ec      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	4903      	ldr	r1, [pc, #12]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	74bb      	strb	r3, [r7, #18]
 8003ae6:	e005      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af4:	7c7b      	ldrb	r3, [r7, #17]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afa:	4ba6      	ldr	r3, [pc, #664]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	4aa5      	ldr	r2, [pc, #660]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b12:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 0203 	bic.w	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	499c      	ldr	r1, [pc, #624]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b34:	4b97      	ldr	r3, [pc, #604]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 020c 	bic.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4994      	ldr	r1, [pc, #592]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b56:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	498b      	ldr	r1, [pc, #556]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b78:	4b86      	ldr	r3, [pc, #536]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	4983      	ldr	r1, [pc, #524]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b9a:	4b7e      	ldr	r3, [pc, #504]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	497a      	ldr	r1, [pc, #488]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	4972      	ldr	r1, [pc, #456]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bde:	4b6d      	ldr	r3, [pc, #436]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4969      	ldr	r1, [pc, #420]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c00:	4b64      	ldr	r3, [pc, #400]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4961      	ldr	r1, [pc, #388]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	4958      	ldr	r1, [pc, #352]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d015      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	4950      	ldr	r1, [pc, #320]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c62:	d105      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c7c:	4b45      	ldr	r3, [pc, #276]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4942      	ldr	r1, [pc, #264]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9c:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d015      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cb4:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4a2e      	ldr	r2, [pc, #184]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cde:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	4926      	ldr	r1, [pc, #152]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	4918      	ldr	r1, [pc, #96]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d42:	d105      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d88:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e084      	b.n	8003eb4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fc fee1 	bl	8000b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dea:	d902      	bls.n	8003df2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e002      	b.n	8003df8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e00:	d007      	beq.n	8003e12 <HAL_SPI_Init+0x7a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e22:	d903      	bls.n	8003e2c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
 8003e2a:	e002      	b.n	8003e32 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	431a      	orrs	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0204 	and.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	ea42 0103 	orr.w	r1, r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e049      	b.n	8003f62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc ff5c 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fe46 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d001      	beq.n	8003f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e021      	b.n	8003fc8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <HAL_TIM_Base_Start_IT+0x68>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d00b      	beq.n	8003fc6 <HAL_TIM_Base_Start_IT+0x5a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb4:	d007      	beq.n	8003fc6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	00010007 	.word	0x00010007

08003fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e049      	b.n	800407e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fe84 	bl	8000d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fdb8 	bl	8004b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_TIM_PWM_Start_DMA+0x28>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e03c      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0xa2>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d109      	bne.n	80040ca <HAL_TIM_PWM_Start_DMA+0x42>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e02f      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0xa2>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start_DMA+0x5c>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0xa2>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start_DMA+0x76>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0xa2>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start_DMA+0x90>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start_DMA+0xa2>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	e178      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_TIM_PWM_Start_DMA+0xc4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e03c      	b.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x13e>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b04      	cmp	r3, #4
 8004150:	d109      	bne.n	8004166 <HAL_TIM_PWM_Start_DMA+0xde>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e02f      	b.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d109      	bne.n	8004180 <HAL_TIM_PWM_Start_DMA+0xf8>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e022      	b.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d109      	bne.n	800419a <HAL_TIM_PWM_Start_DMA+0x112>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	e015      	b.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x13e>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b10      	cmp	r3, #16
 800419e:	d109      	bne.n	80041b4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e008      	b.n	80041c6 <HAL_TIM_PWM_Start_DMA+0x13e>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d034      	beq.n	8004234 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Start_DMA+0x152>
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e124      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d104      	bne.n	80041ea <HAL_TIM_PWM_Start_DMA+0x162>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	e026      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d104      	bne.n	80041fa <HAL_TIM_PWM_Start_DMA+0x172>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f8:	e01e      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d104      	bne.n	800420a <HAL_TIM_PWM_Start_DMA+0x182>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004208:	e016      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d104      	bne.n	800421a <HAL_TIM_PWM_Start_DMA+0x192>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004218:	e00e      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b10      	cmp	r3, #16
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004228:	e006      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004232:	e001      	b.n	8004238 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0f5      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	f200 80ae 	bhi.w	800439c <HAL_TIM_PWM_Start_DMA+0x314>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800427d 	.word	0x0800427d
 800424c:	0800439d 	.word	0x0800439d
 8004250:	0800439d 	.word	0x0800439d
 8004254:	0800439d 	.word	0x0800439d
 8004258:	080042c5 	.word	0x080042c5
 800425c:	0800439d 	.word	0x0800439d
 8004260:	0800439d 	.word	0x0800439d
 8004264:	0800439d 	.word	0x0800439d
 8004268:	0800430d 	.word	0x0800430d
 800426c:	0800439d 	.word	0x0800439d
 8004270:	0800439d 	.word	0x0800439d
 8004274:	0800439d 	.word	0x0800439d
 8004278:	08004355 	.word	0x08004355
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	4a6a      	ldr	r2, [pc, #424]	; (800442c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	4a69      	ldr	r2, [pc, #420]	; (8004430 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800428a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4a68      	ldr	r2, [pc, #416]	; (8004434 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3334      	adds	r3, #52	; 0x34
 80042a0:	461a      	mov	r2, r3
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	f7fd fb1e 	bl	80018e4 <HAL_DMA_Start_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0b8      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e06c      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	4a58      	ldr	r2, [pc, #352]	; (800442c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	4a57      	ldr	r2, [pc, #348]	; (8004430 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	4a56      	ldr	r2, [pc, #344]	; (8004434 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80042da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3338      	adds	r3, #56	; 0x38
 80042e8:	461a      	mov	r2, r3
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	f7fd fafa 	bl	80018e4 <HAL_DMA_Start_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e094      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004308:	60da      	str	r2, [r3, #12]
      break;
 800430a:	e048      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	4a46      	ldr	r2, [pc, #280]	; (800442c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a45      	ldr	r2, [pc, #276]	; (8004430 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a44      	ldr	r2, [pc, #272]	; (8004434 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	333c      	adds	r3, #60	; 0x3c
 8004330:	461a      	mov	r2, r3
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	f7fd fad6 	bl	80018e4 <HAL_DMA_Start_IT>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e070      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004350:	60da      	str	r2, [r3, #12]
      break;
 8004352:	e024      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	4a34      	ldr	r2, [pc, #208]	; (800442c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	4a33      	ldr	r2, [pc, #204]	; (8004430 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004362:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	4a32      	ldr	r2, [pc, #200]	; (8004434 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800436a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3340      	adds	r3, #64	; 0x40
 8004378:	461a      	mov	r2, r3
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	f7fd fab2 	bl	80018e4 <HAL_DMA_Start_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e04c      	b.n	8004424 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004398:	60da      	str	r2, [r3, #12]
      break;
 800439a:	e000      	b.n	800439e <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 800439c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 ff76 	bl	8005298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_TIM_PWM_Start_DMA+0x356>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a20      	ldr	r2, [pc, #128]	; (800443c <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIM_PWM_Start_DMA+0x356>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_TIM_PWM_Start_DMA+0x356>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIM_PWM_Start_DMA+0x356>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_TIM_PWM_Start_DMA+0x35c>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004400:	4013      	ands	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b06      	cmp	r3, #6
 8004408:	d00b      	beq.n	8004422 <HAL_TIM_PWM_Start_DMA+0x39a>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d007      	beq.n	8004422 <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	08004a7b 	.word	0x08004a7b
 8004430:	08004b23 	.word	0x08004b23
 8004434:	080049e9 	.word	0x080049e9
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40013400 	.word	0x40013400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800
 800444c:	00010007 	.word	0x00010007

08004450 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0202 	mvn.w	r2, #2
 800447c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa76 	bl	8004984 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa68 	bl	8004970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fa79 	bl	8004998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d122      	bne.n	8004500 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0204 	mvn.w	r2, #4
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa4c 	bl	8004984 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa3e 	bl	8004970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa4f 	bl	8004998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b08      	cmp	r3, #8
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b08      	cmp	r3, #8
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0208 	mvn.w	r2, #8
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2204      	movs	r2, #4
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa22 	bl	8004984 <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa14 	bl	8004970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fa25 	bl	8004998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b10      	cmp	r3, #16
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0210 	mvn.w	r2, #16
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2208      	movs	r2, #8
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9f8 	bl	8004984 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f9ea 	bl	8004970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9fb 	bl	8004998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0201 	mvn.w	r2, #1
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fa88 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045de:	2b80      	cmp	r3, #128	; 0x80
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ec:	2b80      	cmp	r3, #128	; 0x80
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 ff9e 	bl	800553c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 ff91 	bl	8005550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d10e      	bne.n	800465a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d107      	bne.n	800465a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f9b3 	bl	80049c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d10e      	bne.n	8004686 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b20      	cmp	r3, #32
 8004674:	d107      	bne.n	8004686 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f06f 0220 	mvn.w	r2, #32
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 ff51 	bl	8005528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d10f      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 ff57 	bl	8005564 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c4:	d10f      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 ff49 	bl	8005578 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f4:	d10f      	bne.n	8004716 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 ff3b 	bl	800558c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004720:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004724:	d10f      	bne.n	8004746 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 ff2d 	bl	80055a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004766:	2302      	movs	r3, #2
 8004768:	e0fd      	b.n	8004966 <HAL_TIM_PWM_ConfigChannel+0x216>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b14      	cmp	r3, #20
 8004776:	f200 80f0 	bhi.w	800495a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047d5 	.word	0x080047d5
 8004784:	0800495b 	.word	0x0800495b
 8004788:	0800495b 	.word	0x0800495b
 800478c:	0800495b 	.word	0x0800495b
 8004790:	08004815 	.word	0x08004815
 8004794:	0800495b 	.word	0x0800495b
 8004798:	0800495b 	.word	0x0800495b
 800479c:	0800495b 	.word	0x0800495b
 80047a0:	08004857 	.word	0x08004857
 80047a4:	0800495b 	.word	0x0800495b
 80047a8:	0800495b 	.word	0x0800495b
 80047ac:	0800495b 	.word	0x0800495b
 80047b0:	08004897 	.word	0x08004897
 80047b4:	0800495b 	.word	0x0800495b
 80047b8:	0800495b 	.word	0x0800495b
 80047bc:	0800495b 	.word	0x0800495b
 80047c0:	080048d9 	.word	0x080048d9
 80047c4:	0800495b 	.word	0x0800495b
 80047c8:	0800495b 	.word	0x0800495b
 80047cc:	0800495b 	.word	0x0800495b
 80047d0:	08004919 	.word	0x08004919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fa66 	bl	8004cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
      break;
 8004812:	e0a3      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fad6 	bl	8004dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	021a      	lsls	r2, r3, #8
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	619a      	str	r2, [r3, #24]
      break;
 8004854:	e082      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fb3f 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      break;
 8004894:	e062      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fba7 	bl	8004ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
      break;
 80048d6:	e041      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fc10 	bl	8005104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0208 	orr.w	r2, r2, #8
 80048f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0204 	bic.w	r2, r2, #4
 8004902:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004916:	e021      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fc54 	bl	80051cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004932:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	021a      	lsls	r2, r3, #8
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004958:	e000      	b.n	800495c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800495a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop

08004970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d107      	bne.n	8004a10 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a0e:	e02a      	b.n	8004a66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d107      	bne.n	8004a2a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a28:	e01d      	b.n	8004a66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d107      	bne.n	8004a44 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2204      	movs	r2, #4
 8004a38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a42:	e010      	b.n	8004a66 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d107      	bne.n	8004a5e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2208      	movs	r2, #8
 8004a52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a5c:	e003      	b.n	8004a66 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ffb4 	bl	80049d4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	771a      	strb	r2, [r3, #28]
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d10b      	bne.n	8004aaa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d136      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	e031      	b.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d10b      	bne.n	8004acc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d125      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aca:	e020      	b.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10b      	bne.n	8004aee <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d114      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	e00f      	b.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d10a      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2208      	movs	r2, #8
 8004afc:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff ff42 	bl	8004998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d103      	bne.n	8004b42 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	771a      	strb	r2, [r3, #28]
 8004b40:	e019      	b.n	8004b76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d103      	bne.n	8004b54 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	771a      	strb	r2, [r3, #28]
 8004b52:	e010      	b.n	8004b76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d103      	bne.n	8004b66 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2204      	movs	r2, #4
 8004b62:	771a      	strb	r2, [r3, #28]
 8004b64:	e007      	b.n	8004b76 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d102      	bne.n	8004b76 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2208      	movs	r2, #8
 8004b74:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7ff ff18 	bl	80049ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	771a      	strb	r2, [r3, #28]
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <TIM_Base_SetConfig+0x104>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00f      	beq.n	8004bc4 <TIM_Base_SetConfig+0x38>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004baa:	d00b      	beq.n	8004bc4 <TIM_Base_SetConfig+0x38>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a39      	ldr	r2, [pc, #228]	; (8004c94 <TIM_Base_SetConfig+0x108>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_Base_SetConfig+0x38>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <TIM_Base_SetConfig+0x10c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_Base_SetConfig+0x38>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <TIM_Base_SetConfig+0x110>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d108      	bne.n	8004bd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2d      	ldr	r2, [pc, #180]	; (8004c90 <TIM_Base_SetConfig+0x104>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d01b      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be4:	d017      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_Base_SetConfig+0x108>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0x10c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00f      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <TIM_Base_SetConfig+0x110>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <TIM_Base_SetConfig+0x104>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00f      	beq.n	8004c74 <TIM_Base_SetConfig+0xe8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <TIM_Base_SetConfig+0x110>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00b      	beq.n	8004c74 <TIM_Base_SetConfig+0xe8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <TIM_Base_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d007      	beq.n	8004c74 <TIM_Base_SetConfig+0xe8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0f      	ldr	r2, [pc, #60]	; (8004ca4 <TIM_Base_SetConfig+0x118>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_Base_SetConfig+0xe8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <TIM_Base_SetConfig+0x11c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d103      	bne.n	8004c7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	615a      	str	r2, [r3, #20]
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 0302 	bic.w	r3, r3, #2
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	; (8004db8 <TIM_OC1_SetConfig+0x10c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <TIM_OC1_SetConfig+0x110>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <TIM_OC1_SetConfig+0x114>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <TIM_OC1_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <TIM_OC1_SetConfig+0x11c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10c      	bne.n	8004d46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0308 	bic.w	r3, r3, #8
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <TIM_OC1_SetConfig+0x10c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <TIM_OC1_SetConfig+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <TIM_OC1_SetConfig+0x114>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <TIM_OC1_SetConfig+0x118>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <TIM_OC1_SetConfig+0x11c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d111      	bne.n	8004d92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800

08004dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0210 	bic.w	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a28      	ldr	r2, [pc, #160]	; (8004ecc <TIM_OC2_SetConfig+0x100>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0x6c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a27      	ldr	r2, [pc, #156]	; (8004ed0 <TIM_OC2_SetConfig+0x104>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10d      	bne.n	8004e54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <TIM_OC2_SetConfig+0x100>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_OC2_SetConfig+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <TIM_OC2_SetConfig+0x108>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <TIM_OC2_SetConfig+0x10c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a19      	ldr	r2, [pc, #100]	; (8004edc <TIM_OC2_SetConfig+0x110>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d113      	bne.n	8004ea4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <TIM_OC3_SetConfig+0xfc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC3_SetConfig+0x6a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a26      	ldr	r2, [pc, #152]	; (8004fe0 <TIM_OC3_SetConfig+0x100>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <TIM_OC3_SetConfig+0xfc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <TIM_OC3_SetConfig+0x100>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <TIM_OC3_SetConfig+0x104>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <TIM_OC3_SetConfig+0x108>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a18      	ldr	r2, [pc, #96]	; (8004fec <TIM_OC3_SetConfig+0x10c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d113      	bne.n	8004fb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <TIM_OC4_SetConfig+0x100>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC4_SetConfig+0x6c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a27      	ldr	r2, [pc, #156]	; (80050f4 <TIM_OC4_SetConfig+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <TIM_OC4_SetConfig+0x100>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <TIM_OC4_SetConfig+0x104>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <TIM_OC4_SetConfig+0x108>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <TIM_OC4_SetConfig+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <TIM_OC4_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	019b      	lsls	r3, r3, #6
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	019b      	lsls	r3, r3, #6
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <TIM_OC5_SetConfig+0xb4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a16      	ldr	r2, [pc, #88]	; (80051bc <TIM_OC5_SetConfig+0xb8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <TIM_OC5_SetConfig+0xbc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <TIM_OC5_SetConfig+0xc0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <TIM_OC5_SetConfig+0xc4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d109      	bne.n	8005192 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a18      	ldr	r2, [pc, #96]	; (8005284 <TIM_OC6_SetConfig+0xb8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a17      	ldr	r2, [pc, #92]	; (8005288 <TIM_OC6_SetConfig+0xbc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a16      	ldr	r2, [pc, #88]	; (800528c <TIM_OC6_SetConfig+0xc0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	; (8005290 <TIM_OC6_SetConfig+0xc4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a14      	ldr	r2, [pc, #80]	; (8005294 <TIM_OC6_SetConfig+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40013400 	.word	0x40013400
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e065      	b.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005336:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d018      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005372:	d013      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00e      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40014000 	.word	0x40014000

080053e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e087      	b.n	8005514 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a27      	ldr	r2, [pc, #156]	; (8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a25      	ldr	r2, [pc, #148]	; (8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d106      	bne.n	80054a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d126      	bne.n	8005502 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	051b      	lsls	r3, r3, #20
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0e      	ldr	r2, [pc, #56]	; (8005520 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d106      	bne.n	8005502 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400

08005528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055bc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b085      	sub	sp, #20
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055ee:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	b29b      	uxth	r3, r3
 8005604:	4013      	ands	r3, r2
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800561c:	b084      	sub	sp, #16
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	f107 0014 	add.w	r0, r7, #20
 800562a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffb0 	bl	80055b4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005660:	b004      	add	sp, #16
 8005662:	4770      	bx	lr

08005664 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005664:	b490      	push	{r4, r7}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d819      	bhi.n	80056c6 <USB_ActivateEndpoint+0x62>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <USB_ActivateEndpoint+0x34>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056cd 	.word	0x080056cd
 80056a4:	080056b3 	.word	0x080056b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056a8:	89bb      	ldrh	r3, [r7, #12]
 80056aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ae:	81bb      	strh	r3, [r7, #12]
      break;
 80056b0:	e00d      	b.n	80056ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b2:	89bb      	ldrh	r3, [r7, #12]
 80056b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056b8:	81bb      	strh	r3, [r7, #12]
      break;
 80056ba:	e008      	b.n	80056ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056bc:	89bb      	ldrh	r3, [r7, #12]
 80056be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c2:	81bb      	strh	r3, [r7, #12]
      break;
 80056c4:	e003      	b.n	80056ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ca:	e000      	b.n	80056ce <USB_ActivateEndpoint+0x6a>
      break;
 80056cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	89bb      	ldrh	r3, [r7, #12]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	b21b      	sxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	b21a      	sxth	r2, r3
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	b21b      	sxth	r3, r3
 800570e:	4313      	orrs	r3, r2
 8005710:	b21b      	sxth	r3, r3
 8005712:	b29c      	uxth	r4, r3
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	4b8a      	ldr	r3, [pc, #552]	; (8005948 <USB_ActivateEndpoint+0x2e4>)
 8005720:	4323      	orrs	r3, r4
 8005722:	b29b      	uxth	r3, r3
 8005724:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	7b1b      	ldrb	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 8112 	bne.w	8005954 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d067      	beq.n	8005808 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005738:	687c      	ldr	r4, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005740:	b29b      	uxth	r3, r3
 8005742:	441c      	add	r4, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4423      	add	r3, r4
 800574c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005750:	461c      	mov	r4, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	88db      	ldrh	r3, [r3, #6]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	b29b      	uxth	r3, r3
 800575e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29c      	uxth	r4, r3
 800576e:	4623      	mov	r3, r4
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d014      	beq.n	80057a2 <USB_ActivateEndpoint+0x13e>
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	b29c      	uxth	r4, r3
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	441a      	add	r2, r3
 800579a:	4b6c      	ldr	r3, [pc, #432]	; (800594c <USB_ActivateEndpoint+0x2e8>)
 800579c:	4323      	orrs	r3, r4
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	78db      	ldrb	r3, [r3, #3]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d018      	beq.n	80057dc <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	b29c      	uxth	r4, r3
 80057c2:	f084 0320 	eor.w	r3, r4, #32
 80057c6:	b29c      	uxth	r4, r3
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	441a      	add	r2, r3
 80057d2:	4b5d      	ldr	r3, [pc, #372]	; (8005948 <USB_ActivateEndpoint+0x2e4>)
 80057d4:	4323      	orrs	r3, r4
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]
 80057da:	e22b      	b.n	8005c34 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f2:	b29c      	uxth	r4, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	441a      	add	r2, r3
 80057fe:	4b52      	ldr	r3, [pc, #328]	; (8005948 <USB_ActivateEndpoint+0x2e4>)
 8005800:	4323      	orrs	r3, r4
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
 8005806:	e215      	b.n	8005c34 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005808:	687c      	ldr	r4, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	441c      	add	r4, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4423      	add	r3, r4
 800581c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005820:	461c      	mov	r4, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	88db      	ldrh	r3, [r3, #6]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	b29b      	uxth	r3, r3
 800582e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005830:	687c      	ldr	r4, [r7, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005838:	b29b      	uxth	r3, r3
 800583a:	441c      	add	r4, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	4423      	add	r3, r4
 8005844:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005848:	461c      	mov	r4, r3
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10e      	bne.n	8005870 <USB_ActivateEndpoint+0x20c>
 8005852:	8823      	ldrh	r3, [r4, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800585a:	b29b      	uxth	r3, r3
 800585c:	8023      	strh	r3, [r4, #0]
 800585e:	8823      	ldrh	r3, [r4, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29b      	uxth	r3, r3
 800586c:	8023      	strh	r3, [r4, #0]
 800586e:	e02d      	b.n	80058cc <USB_ActivateEndpoint+0x268>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	2b3e      	cmp	r3, #62	; 0x3e
 8005876:	d812      	bhi.n	800589e <USB_ActivateEndpoint+0x23a>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <USB_ActivateEndpoint+0x22e>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	3301      	adds	r3, #1
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	8023      	strh	r3, [r4, #0]
 800589c:	e016      	b.n	80058cc <USB_ActivateEndpoint+0x268>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <USB_ActivateEndpoint+0x254>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	029b      	lsls	r3, r3, #10
 80058be:	b29b      	uxth	r3, r3
 80058c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29c      	uxth	r4, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d014      	beq.n	800590e <USB_ActivateEndpoint+0x2aa>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	b29c      	uxth	r4, r3
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	4b12      	ldr	r3, [pc, #72]	; (8005950 <USB_ActivateEndpoint+0x2ec>)
 8005908:	4323      	orrs	r3, r4
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	b29c      	uxth	r4, r3
 8005926:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800592a:	b29c      	uxth	r4, r3
 800592c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005930:	b29c      	uxth	r4, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	441a      	add	r2, r3
 800593c:	4b02      	ldr	r3, [pc, #8]	; (8005948 <USB_ActivateEndpoint+0x2e4>)
 800593e:	4323      	orrs	r3, r4
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
 8005944:	e176      	b.n	8005c34 <USB_ActivateEndpoint+0x5d0>
 8005946:	bf00      	nop
 8005948:	ffff8080 	.word	0xffff8080
 800594c:	ffff80c0 	.word	0xffff80c0
 8005950:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	b29c      	uxth	r4, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	4b96      	ldr	r3, [pc, #600]	; (8005bd0 <USB_ActivateEndpoint+0x56c>)
 8005978:	4323      	orrs	r3, r4
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800597e:	687c      	ldr	r4, [r7, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005986:	b29b      	uxth	r3, r3
 8005988:	441c      	add	r4, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4423      	add	r3, r4
 8005992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005996:	461c      	mov	r4, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	891b      	ldrh	r3, [r3, #8]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8023      	strh	r3, [r4, #0]
 80059a6:	687c      	ldr	r4, [r7, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	441c      	add	r4, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4423      	add	r3, r4
 80059ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059be:	461c      	mov	r4, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	895b      	ldrh	r3, [r3, #10]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 8088 	bne.w	8005ae8 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29c      	uxth	r4, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d014      	beq.n	8005a1a <USB_ActivateEndpoint+0x3b6>
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	b29c      	uxth	r4, r3
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	4b70      	ldr	r3, [pc, #448]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005a14:	4323      	orrs	r3, r4
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	b29c      	uxth	r4, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d014      	beq.n	8005a5c <USB_ActivateEndpoint+0x3f8>
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a48:	b29c      	uxth	r4, r3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	441a      	add	r2, r3
 8005a54:	4b60      	ldr	r3, [pc, #384]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005a56:	4323      	orrs	r3, r4
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a72:	b29c      	uxth	r4, r3
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005a80:	4323      	orrs	r3, r4
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9c:	b29c      	uxth	r4, r3
 8005a9e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005aa2:	b29c      	uxth	r4, r3
 8005aa4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005aa8:	b29c      	uxth	r4, r3
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	441a      	add	r2, r3
 8005ab4:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <USB_ActivateEndpoint+0x578>)
 8005ab6:	4323      	orrs	r3, r4
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	b29c      	uxth	r4, r3
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	441a      	add	r2, r3
 8005ade:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <USB_ActivateEndpoint+0x578>)
 8005ae0:	4323      	orrs	r3, r4
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]
 8005ae6:	e0a5      	b.n	8005c34 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29c      	uxth	r4, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d014      	beq.n	8005b2a <USB_ActivateEndpoint+0x4c6>
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	b29c      	uxth	r4, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005b24:	4323      	orrs	r3, r4
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29c      	uxth	r4, r3
 8005b38:	4623      	mov	r3, r4
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d014      	beq.n	8005b6c <USB_ActivateEndpoint+0x508>
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b58:	b29c      	uxth	r4, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005b66:	4323      	orrs	r3, r4
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	b29c      	uxth	r4, r3
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	4b11      	ldr	r3, [pc, #68]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005b90:	4323      	orrs	r3, r4
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d020      	beq.n	8005be0 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb4:	b29c      	uxth	r4, r3
 8005bb6:	f084 0320 	eor.w	r3, r4, #32
 8005bba:	b29c      	uxth	r4, r3
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <USB_ActivateEndpoint+0x578>)
 8005bc8:	4323      	orrs	r3, r4
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	8013      	strh	r3, [r2, #0]
 8005bce:	e01c      	b.n	8005c0a <USB_ActivateEndpoint+0x5a6>
 8005bd0:	ffff8180 	.word	0xffff8180
 8005bd4:	ffffc080 	.word	0xffffc080
 8005bd8:	ffff80c0 	.word	0xffff80c0
 8005bdc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf6:	b29c      	uxth	r4, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <USB_ActivateEndpoint+0x5dc>)
 8005c04:	4323      	orrs	r3, r4
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c20:	b29c      	uxth	r4, r3
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <USB_ActivateEndpoint+0x5dc>)
 8005c2e:	4323      	orrs	r3, r4
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc90      	pop	{r4, r7}
 8005c3e:	4770      	bx	lr
 8005c40:	ffff8080 	.word	0xffff8080

08005c44 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c44:	b490      	push	{r4, r7}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	7b1b      	ldrb	r3, [r3, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d171      	bne.n	8005d3a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d036      	beq.n	8005ccc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29c      	uxth	r4, r3
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <USB_DeactivateEndpoint+0x5c>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	b29c      	uxth	r4, r3
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	4b6b      	ldr	r3, [pc, #428]	; (8005e48 <USB_DeactivateEndpoint+0x204>)
 8005c9a:	4323      	orrs	r3, r4
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb6:	b29c      	uxth	r4, r3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	4b62      	ldr	r3, [pc, #392]	; (8005e4c <USB_DeactivateEndpoint+0x208>)
 8005cc4:	4323      	orrs	r3, r4
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
 8005cca:	e144      	b.n	8005f56 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29c      	uxth	r4, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d014      	beq.n	8005d0e <USB_DeactivateEndpoint+0xca>
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfa:	b29c      	uxth	r4, r3
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	4b52      	ldr	r3, [pc, #328]	; (8005e50 <USB_DeactivateEndpoint+0x20c>)
 8005d08:	4323      	orrs	r3, r4
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	b29c      	uxth	r4, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	441a      	add	r2, r3
 8005d30:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <USB_DeactivateEndpoint+0x208>)
 8005d32:	4323      	orrs	r3, r4
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]
 8005d38:	e10d      	b.n	8005f56 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f040 8088 	bne.w	8005e54 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29c      	uxth	r4, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d014      	beq.n	8005d86 <USB_DeactivateEndpoint+0x142>
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	b29c      	uxth	r4, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	441a      	add	r2, r3
 8005d7e:	4b34      	ldr	r3, [pc, #208]	; (8005e50 <USB_DeactivateEndpoint+0x20c>)
 8005d80:	4323      	orrs	r3, r4
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29c      	uxth	r4, r3
 8005d94:	4623      	mov	r3, r4
 8005d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d014      	beq.n	8005dc8 <USB_DeactivateEndpoint+0x184>
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	b29c      	uxth	r4, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <USB_DeactivateEndpoint+0x204>)
 8005dc2:	4323      	orrs	r3, r4
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	b29c      	uxth	r4, r3
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <USB_DeactivateEndpoint+0x204>)
 8005dec:	4323      	orrs	r3, r4
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	b29c      	uxth	r4, r3
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <USB_DeactivateEndpoint+0x208>)
 8005e16:	4323      	orrs	r3, r4
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	b29c      	uxth	r4, r3
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <USB_DeactivateEndpoint+0x208>)
 8005e40:	4323      	orrs	r3, r4
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]
 8005e46:	e086      	b.n	8005f56 <USB_DeactivateEndpoint+0x312>
 8005e48:	ffff80c0 	.word	0xffff80c0
 8005e4c:	ffff8080 	.word	0xffff8080
 8005e50:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29c      	uxth	r4, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d014      	beq.n	8005e96 <USB_DeactivateEndpoint+0x252>
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e82:	b29c      	uxth	r4, r3
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <USB_DeactivateEndpoint+0x320>)
 8005e90:	4323      	orrs	r3, r4
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29c      	uxth	r4, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d014      	beq.n	8005ed8 <USB_DeactivateEndpoint+0x294>
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec4:	b29c      	uxth	r4, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <USB_DeactivateEndpoint+0x324>)
 8005ed2:	4323      	orrs	r3, r4
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eee:	b29c      	uxth	r4, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	441a      	add	r2, r3
 8005efa:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <USB_DeactivateEndpoint+0x320>)
 8005efc:	4323      	orrs	r3, r4
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f18:	b29c      	uxth	r4, r3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	4b11      	ldr	r3, [pc, #68]	; (8005f6c <USB_DeactivateEndpoint+0x328>)
 8005f26:	4323      	orrs	r3, r4
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	b29c      	uxth	r4, r3
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <USB_DeactivateEndpoint+0x328>)
 8005f50:	4323      	orrs	r3, r4
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc90      	pop	{r4, r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	ffffc080 	.word	0xffffc080
 8005f68:	ffff80c0 	.word	0xffff80c0
 8005f6c:	ffff8080 	.word	0xffff8080

08005f70 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f70:	b590      	push	{r4, r7, lr}
 8005f72:	b08d      	sub	sp, #52	; 0x34
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	f040 8160 	bne.w	8006244 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	699a      	ldr	r2, [r3, #24]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d909      	bls.n	8005fa4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	1ad2      	subs	r2, r2, r3
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	619a      	str	r2, [r3, #24]
 8005fa2:	e005      	b.n	8005fb0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	7b1b      	ldrb	r3, [r3, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d119      	bne.n	8005fec <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6959      	ldr	r1, [r3, #20]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	88da      	ldrh	r2, [r3, #6]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fba8 	bl	800671a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fca:	687c      	ldr	r4, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	441c      	add	r4, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4423      	add	r3, r4
 8005fde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8023      	strh	r3, [r4, #0]
 8005fea:	e10f      	b.n	800620c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d065      	beq.n	80060ce <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006002:	687c      	ldr	r4, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d148      	bne.n	800609e <USB_EPStartXfer+0x12e>
 800600c:	687c      	ldr	r4, [r7, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006014:	b29b      	uxth	r3, r3
 8006016:	441c      	add	r4, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4423      	add	r3, r4
 8006020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006024:	461c      	mov	r4, r3
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10e      	bne.n	800604a <USB_EPStartXfer+0xda>
 800602c:	8823      	ldrh	r3, [r4, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006034:	b29b      	uxth	r3, r3
 8006036:	8023      	strh	r3, [r4, #0]
 8006038:	8823      	ldrh	r3, [r4, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006044:	b29b      	uxth	r3, r3
 8006046:	8023      	strh	r3, [r4, #0]
 8006048:	e03d      	b.n	80060c6 <USB_EPStartXfer+0x156>
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2b3e      	cmp	r3, #62	; 0x3e
 800604e:	d810      	bhi.n	8006072 <USB_EPStartXfer+0x102>
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <USB_EPStartXfer+0xf6>
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	3301      	adds	r3, #1
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29b      	uxth	r3, r3
 800606e:	8023      	strh	r3, [r4, #0]
 8006070:	e029      	b.n	80060c6 <USB_EPStartXfer+0x156>
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <USB_EPStartXfer+0x118>
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	3b01      	subs	r3, #1
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	b29b      	uxth	r3, r3
 800608c:	029b      	lsls	r3, r3, #10
 800608e:	b29b      	uxth	r3, r3
 8006090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006098:	b29b      	uxth	r3, r3
 800609a:	8023      	strh	r3, [r4, #0]
 800609c:	e013      	b.n	80060c6 <USB_EPStartXfer+0x156>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10f      	bne.n	80060c6 <USB_EPStartXfer+0x156>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	441c      	add	r4, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4423      	add	r3, r4
 80060b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	895b      	ldrh	r3, [r3, #10]
 80060ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060cc:	e063      	b.n	8006196 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d148      	bne.n	8006168 <USB_EPStartXfer+0x1f8>
 80060d6:	687c      	ldr	r4, [r7, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	441c      	add	r4, r3
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4423      	add	r3, r4
 80060ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ee:	461c      	mov	r4, r3
 80060f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10e      	bne.n	8006114 <USB_EPStartXfer+0x1a4>
 80060f6:	8823      	ldrh	r3, [r4, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8023      	strh	r3, [r4, #0]
 8006102:	8823      	ldrh	r3, [r4, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610e:	b29b      	uxth	r3, r3
 8006110:	8023      	strh	r3, [r4, #0]
 8006112:	e03d      	b.n	8006190 <USB_EPStartXfer+0x220>
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2b3e      	cmp	r3, #62	; 0x3e
 8006118:	d810      	bhi.n	800613c <USB_EPStartXfer+0x1cc>
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	623b      	str	r3, [r7, #32]
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <USB_EPStartXfer+0x1c0>
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	3301      	adds	r3, #1
 800612e:	623b      	str	r3, [r7, #32]
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	8023      	strh	r3, [r4, #0]
 800613a:	e029      	b.n	8006190 <USB_EPStartXfer+0x220>
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	623b      	str	r3, [r7, #32]
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <USB_EPStartXfer+0x1e2>
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	3b01      	subs	r3, #1
 8006150:	623b      	str	r3, [r7, #32]
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	b29b      	uxth	r3, r3
 8006156:	029b      	lsls	r3, r3, #10
 8006158:	b29b      	uxth	r3, r3
 800615a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006162:	b29b      	uxth	r3, r3
 8006164:	8023      	strh	r3, [r4, #0]
 8006166:	e013      	b.n	8006190 <USB_EPStartXfer+0x220>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d10f      	bne.n	8006190 <USB_EPStartXfer+0x220>
 8006170:	687c      	ldr	r4, [r7, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006178:	b29b      	uxth	r3, r3
 800617a:	441c      	add	r4, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4423      	add	r3, r4
 8006184:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006188:	461c      	mov	r4, r3
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	b29b      	uxth	r3, r3
 800618e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	891b      	ldrh	r3, [r3, #8]
 8006194:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	6959      	ldr	r1, [r3, #20]
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	b29b      	uxth	r3, r3
 800619e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 faba 	bl	800671a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d115      	bne.n	80061da <USB_EPStartXfer+0x26a>
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c4:	b29c      	uxth	r4, r3
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	4b9a      	ldr	r3, [pc, #616]	; (800643c <USB_EPStartXfer+0x4cc>)
 80061d2:	4323      	orrs	r3, r4
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	8013      	strh	r3, [r2, #0]
 80061d8:	e018      	b.n	800620c <USB_EPStartXfer+0x29c>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d114      	bne.n	800620c <USB_EPStartXfer+0x29c>
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	b29c      	uxth	r4, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	441a      	add	r2, r3
 8006204:	4b8e      	ldr	r3, [pc, #568]	; (8006440 <USB_EPStartXfer+0x4d0>)
 8006206:	4323      	orrs	r3, r4
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	b29c      	uxth	r4, r3
 8006224:	f084 0310 	eor.w	r3, r4, #16
 8006228:	b29c      	uxth	r4, r3
 800622a:	f084 0320 	eor.w	r3, r4, #32
 800622e:	b29c      	uxth	r4, r3
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	4b82      	ldr	r3, [pc, #520]	; (8006444 <USB_EPStartXfer+0x4d4>)
 800623c:	4323      	orrs	r3, r4
 800623e:	b29b      	uxth	r3, r3
 8006240:	8013      	strh	r3, [r2, #0]
 8006242:	e146      	b.n	80064d2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	429a      	cmp	r2, r3
 800624e:	d909      	bls.n	8006264 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	619a      	str	r2, [r3, #24]
 8006262:	e005      	b.n	8006270 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2200      	movs	r2, #0
 800626e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	7b1b      	ldrb	r3, [r3, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d148      	bne.n	800630a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006278:	687c      	ldr	r4, [r7, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	441c      	add	r4, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4423      	add	r3, r4
 800628c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006290:	461c      	mov	r4, r3
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10e      	bne.n	80062b6 <USB_EPStartXfer+0x346>
 8006298:	8823      	ldrh	r3, [r4, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8023      	strh	r3, [r4, #0]
 80062a4:	8823      	ldrh	r3, [r4, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	8023      	strh	r3, [r4, #0]
 80062b4:	e0f2      	b.n	800649c <USB_EPStartXfer+0x52c>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b3e      	cmp	r3, #62	; 0x3e
 80062ba:	d810      	bhi.n	80062de <USB_EPStartXfer+0x36e>
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	085b      	lsrs	r3, r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <USB_EPStartXfer+0x362>
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	3301      	adds	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	029b      	lsls	r3, r3, #10
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8023      	strh	r3, [r4, #0]
 80062dc:	e0de      	b.n	800649c <USB_EPStartXfer+0x52c>
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <USB_EPStartXfer+0x384>
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	029b      	lsls	r3, r3, #10
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006304:	b29b      	uxth	r3, r3
 8006306:	8023      	strh	r3, [r4, #0]
 8006308:	e0c8      	b.n	800649c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785b      	ldrb	r3, [r3, #1]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d148      	bne.n	80063a4 <USB_EPStartXfer+0x434>
 8006312:	687c      	ldr	r4, [r7, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631a:	b29b      	uxth	r3, r3
 800631c:	441c      	add	r4, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4423      	add	r3, r4
 8006326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800632a:	461c      	mov	r4, r3
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10e      	bne.n	8006350 <USB_EPStartXfer+0x3e0>
 8006332:	8823      	ldrh	r3, [r4, #0]
 8006334:	b29b      	uxth	r3, r3
 8006336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800633a:	b29b      	uxth	r3, r3
 800633c:	8023      	strh	r3, [r4, #0]
 800633e:	8823      	ldrh	r3, [r4, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29b      	uxth	r3, r3
 800634c:	8023      	strh	r3, [r4, #0]
 800634e:	e03d      	b.n	80063cc <USB_EPStartXfer+0x45c>
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b3e      	cmp	r3, #62	; 0x3e
 8006354:	d810      	bhi.n	8006378 <USB_EPStartXfer+0x408>
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <USB_EPStartXfer+0x3fc>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3301      	adds	r3, #1
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	8023      	strh	r3, [r4, #0]
 8006376:	e029      	b.n	80063cc <USB_EPStartXfer+0x45c>
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <USB_EPStartXfer+0x41e>
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	3b01      	subs	r3, #1
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8023      	strh	r3, [r4, #0]
 80063a2:	e013      	b.n	80063cc <USB_EPStartXfer+0x45c>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10f      	bne.n	80063cc <USB_EPStartXfer+0x45c>
 80063ac:	687c      	ldr	r4, [r7, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	441c      	add	r4, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4423      	add	r3, r4
 80063c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063c4:	461c      	mov	r4, r3
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8023      	strh	r3, [r4, #0]
 80063cc:	687c      	ldr	r4, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	785b      	ldrb	r3, [r3, #1]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d14e      	bne.n	8006474 <USB_EPStartXfer+0x504>
 80063d6:	687c      	ldr	r4, [r7, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063de:	b29b      	uxth	r3, r3
 80063e0:	441c      	add	r4, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4423      	add	r3, r4
 80063ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063ee:	461c      	mov	r4, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10e      	bne.n	8006414 <USB_EPStartXfer+0x4a4>
 80063f6:	8823      	ldrh	r3, [r4, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8023      	strh	r3, [r4, #0]
 8006402:	8823      	ldrh	r3, [r4, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640e:	b29b      	uxth	r3, r3
 8006410:	8023      	strh	r3, [r4, #0]
 8006412:	e043      	b.n	800649c <USB_EPStartXfer+0x52c>
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b3e      	cmp	r3, #62	; 0x3e
 8006418:	d816      	bhi.n	8006448 <USB_EPStartXfer+0x4d8>
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <USB_EPStartXfer+0x4c0>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	3301      	adds	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29b      	uxth	r3, r3
 8006438:	8023      	strh	r3, [r4, #0]
 800643a:	e02f      	b.n	800649c <USB_EPStartXfer+0x52c>
 800643c:	ffff80c0 	.word	0xffff80c0
 8006440:	ffffc080 	.word	0xffffc080
 8006444:	ffff8080 	.word	0xffff8080
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <USB_EPStartXfer+0x4ee>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	3b01      	subs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	b29b      	uxth	r3, r3
 8006462:	029b      	lsls	r3, r3, #10
 8006464:	b29b      	uxth	r3, r3
 8006466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646e:	b29b      	uxth	r3, r3
 8006470:	8023      	strh	r3, [r4, #0]
 8006472:	e013      	b.n	800649c <USB_EPStartXfer+0x52c>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d10f      	bne.n	800649c <USB_EPStartXfer+0x52c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006482:	b29b      	uxth	r3, r3
 8006484:	441c      	add	r4, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4423      	add	r3, r4
 800648e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	b29a      	uxth	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	b29c      	uxth	r4, r3
 80064b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80064b8:	b29c      	uxth	r4, r3
 80064ba:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80064be:	b29c      	uxth	r4, r3
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	441a      	add	r2, r3
 80064ca:	4b04      	ldr	r3, [pc, #16]	; (80064dc <USB_EPStartXfer+0x56c>)
 80064cc:	4323      	orrs	r3, r4
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3734      	adds	r7, #52	; 0x34
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}
 80064dc:	ffff8080 	.word	0xffff8080

080064e0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064e0:	b490      	push	{r4, r7}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006508:	b29c      	uxth	r4, r3
 800650a:	f084 0310 	eor.w	r3, r4, #16
 800650e:	b29c      	uxth	r4, r3
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	441a      	add	r2, r3
 800651a:	4b11      	ldr	r3, [pc, #68]	; (8006560 <USB_EPSetStall+0x80>)
 800651c:	4323      	orrs	r3, r4
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]
 8006522:	e017      	b.n	8006554 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	b29c      	uxth	r4, r3
 800653c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006540:	b29c      	uxth	r4, r3
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	441a      	add	r2, r3
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <USB_EPSetStall+0x80>)
 800654e:	4323      	orrs	r3, r4
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bc90      	pop	{r4, r7}
 800655e:	4770      	bx	lr
 8006560:	ffff8080 	.word	0xffff8080

08006564 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006564:	b490      	push	{r4, r7}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	7b1b      	ldrb	r3, [r3, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d17d      	bne.n	8006672 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d03d      	beq.n	80065fa <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29c      	uxth	r4, r3
 800658c:	4623      	mov	r3, r4
 800658e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <USB_EPClearStall+0x5c>
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	b29c      	uxth	r4, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	4b31      	ldr	r3, [pc, #196]	; (8006680 <USB_EPClearStall+0x11c>)
 80065ba:	4323      	orrs	r3, r4
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d054      	beq.n	8006672 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065de:	b29c      	uxth	r4, r3
 80065e0:	f084 0320 	eor.w	r3, r4, #32
 80065e4:	b29c      	uxth	r4, r3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	4b24      	ldr	r3, [pc, #144]	; (8006684 <USB_EPClearStall+0x120>)
 80065f2:	4323      	orrs	r3, r4
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
 80065f8:	e03b      	b.n	8006672 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29c      	uxth	r4, r3
 8006608:	4623      	mov	r3, r4
 800660a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d014      	beq.n	800663c <USB_EPClearStall+0xd8>
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006628:	b29c      	uxth	r4, r3
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	4b14      	ldr	r3, [pc, #80]	; (8006688 <USB_EPClearStall+0x124>)
 8006636:	4323      	orrs	r3, r4
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	b29c      	uxth	r4, r3
 8006654:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006658:	b29c      	uxth	r4, r3
 800665a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800665e:	b29c      	uxth	r4, r3
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <USB_EPClearStall+0x120>)
 800666c:	4323      	orrs	r3, r4
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bc90      	pop	{r4, r7}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	ffff80c0 	.word	0xffff80c0
 8006684:	ffff8080 	.word	0xffff8080
 8006688:	ffffc080 	.word	0xffffc080

0800668c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d103      	bne.n	80066a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2280      	movs	r2, #128	; 0x80
 80066a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b085      	sub	sp, #20
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800671a:	b480      	push	{r7}
 800671c:	b08d      	sub	sp, #52	; 0x34
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4611      	mov	r1, r2
 8006726:	461a      	mov	r2, r3
 8006728:	460b      	mov	r3, r1
 800672a:	80fb      	strh	r3, [r7, #6]
 800672c:	4613      	mov	r3, r2
 800672e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006730:	88bb      	ldrh	r3, [r7, #4]
 8006732:	3301      	adds	r3, #1
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006750:	e01b      	b.n	800678a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	3301      	adds	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	b29b      	uxth	r3, r3
 8006764:	021b      	lsls	r3, r3, #8
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	b29a      	uxth	r2, r3
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	3302      	adds	r3, #2
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	3301      	adds	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	3b01      	subs	r3, #1
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e0      	bne.n	8006752 <USB_WritePMA+0x38>
  }
}
 8006790:	bf00      	nop
 8006792:	3734      	adds	r7, #52	; 0x34
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800679c:	b480      	push	{r7}
 800679e:	b08b      	sub	sp, #44	; 0x2c
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4611      	mov	r1, r2
 80067a8:	461a      	mov	r2, r3
 80067aa:	460b      	mov	r3, r1
 80067ac:	80fb      	strh	r3, [r7, #6]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067b2:	88bb      	ldrh	r3, [r7, #4]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067cc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
 80067d2:	e018      	b.n	8006806 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	3302      	adds	r3, #2
 80067e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3301      	adds	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3301      	adds	r3, #1
 80067fe:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	3b01      	subs	r3, #1
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e3      	bne.n	80067d4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800680c:	88bb      	ldrh	r3, [r7, #4]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	701a      	strb	r2, [r3, #0]
  }
}
 8006828:	bf00      	nop
 800682a:	372c      	adds	r7, #44	; 0x2c
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7c1b      	ldrb	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800684c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006850:	2202      	movs	r2, #2
 8006852:	2181      	movs	r1, #129	; 0x81
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 ffe6 	bl	8009826 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006864:	2202      	movs	r2, #2
 8006866:	2101      	movs	r1, #1
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 ffdc 	bl	8009826 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006876:	e012      	b.n	800689e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006878:	2340      	movs	r3, #64	; 0x40
 800687a:	2202      	movs	r2, #2
 800687c:	2181      	movs	r1, #129	; 0x81
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 ffd1 	bl	8009826 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800688a:	2340      	movs	r3, #64	; 0x40
 800688c:	2202      	movs	r2, #2
 800688e:	2101      	movs	r1, #1
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 ffc8 	bl	8009826 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800689e:	2308      	movs	r3, #8
 80068a0:	2203      	movs	r2, #3
 80068a2:	2182      	movs	r1, #130	; 0x82
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 ffbe 	bl	8009826 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068b4:	f003 f90e 	bl	8009ad4 <USBD_static_malloc>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
 80068ce:	e026      	b.n	800691e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c1b      	ldrb	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006904:	2101      	movs	r1, #1
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f003 f878 	bl	80099fc <USBD_LL_PrepareReceive>
 800690c:	e007      	b.n	800691e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	2101      	movs	r1, #1
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f003 f86f 	bl	80099fc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006938:	2181      	movs	r1, #129	; 0x81
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f002 ff99 	bl	8009872 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006946:	2101      	movs	r1, #1
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f002 ff92 	bl	8009872 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006956:	2182      	movs	r1, #130	; 0x82
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 ff8a 	bl	8009872 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697e:	4618      	mov	r0, r3
 8006980:	f003 f8b6 	bl	8009af0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d039      	beq.n	8006a34 <USBD_CDC_Setup+0x9e>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d17c      	bne.n	8006abe <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	88db      	ldrh	r3, [r3, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d029      	beq.n	8006a20 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da11      	bge.n	80069fa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	88d2      	ldrh	r2, [r2, #6]
 80069e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069ea:	6939      	ldr	r1, [r7, #16]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	88db      	ldrh	r3, [r3, #6]
 80069f0:	461a      	mov	r2, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f9fa 	bl	8007dec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069f8:	e068      	b.n	8006acc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	785a      	ldrb	r2, [r3, #1]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	88db      	ldrh	r3, [r3, #6]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a10:	6939      	ldr	r1, [r7, #16]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	88db      	ldrh	r3, [r3, #6]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fa15 	bl	8007e48 <USBD_CtlPrepareRx>
      break;
 8006a1e:	e055      	b.n	8006acc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	7850      	ldrb	r0, [r2, #1]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	4798      	blx	r3
      break;
 8006a32:	e04b      	b.n	8006acc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b0a      	cmp	r3, #10
 8006a3a:	d017      	beq.n	8006a6c <USBD_CDC_Setup+0xd6>
 8006a3c:	2b0b      	cmp	r3, #11
 8006a3e:	d029      	beq.n	8006a94 <USBD_CDC_Setup+0xfe>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d133      	bne.n	8006aac <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d107      	bne.n	8006a5e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	2202      	movs	r2, #2
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f9c8 	bl	8007dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a5c:	e02e      	b.n	8006abc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f958 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a66:	2302      	movs	r3, #2
 8006a68:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6a:	e027      	b.n	8006abc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d107      	bne.n	8006a86 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a76:	f107 030f 	add.w	r3, r7, #15
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 f9b4 	bl	8007dec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a84:	e01a      	b.n	8006abc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a86:	6839      	ldr	r1, [r7, #0]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 f944 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	75fb      	strb	r3, [r7, #23]
          break;
 8006a92:	e013      	b.n	8006abc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d00d      	beq.n	8006aba <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f938 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006aaa:	e006      	b.n	8006aba <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 f931 	bl	8007d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab8:	e000      	b.n	8006abc <USBD_CDC_Setup+0x126>
          break;
 8006aba:	bf00      	nop
      }
      break;
 8006abc:	e006      	b.n	8006acc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 f928 	bl	8007d16 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aca:	bf00      	nop
  }

  return ret;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006af0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d037      	beq.n	8006b6c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	331c      	adds	r3, #28
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d026      	beq.n	8006b60 <USBD_CDC_DataIn+0x8a>
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	331c      	adds	r3, #28
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	0152      	lsls	r2, r2, #5
 8006b2a:	440a      	add	r2, r1
 8006b2c:	3238      	adds	r2, #56	; 0x38
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b34:	fb02 f201 	mul.w	r2, r2, r1
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d110      	bne.n	8006b60 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	331c      	adds	r3, #28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b52:	78f9      	ldrb	r1, [r7, #3]
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f002 ff2c 	bl	80099b6 <USBD_LL_Transmit>
 8006b5e:	e003      	b.n	8006b68 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 ff57 	bl	8009a42 <USBD_LL_GetRxDataSize>
 8006b94:	4602      	mov	r2, r0
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00d      	beq.n	8006bc2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4798      	blx	r3

    return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e000      	b.n	8006bc4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
  }
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bda:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d015      	beq.n	8006c12 <USBD_CDC_EP0_RxReady+0x46>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bec:	2bff      	cmp	r3, #255	; 0xff
 8006bee:	d010      	beq.n	8006c12 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bfe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c06:	b292      	uxth	r2, r2
 8006c08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	22ff      	movs	r2, #255	; 0xff
 8006c0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2243      	movs	r2, #67	; 0x43
 8006c28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	20000094 	.word	0x20000094

08006c3c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2243      	movs	r2, #67	; 0x43
 8006c48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c4a:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000050 	.word	0x20000050

08006c5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2243      	movs	r2, #67	; 0x43
 8006c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c6a:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	200000d8 	.word	0x200000d8

08006c7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	220a      	movs	r2, #10
 8006c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	; (8006c98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	2000000c 	.word	0x2000000c

08006c9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	7c1b      	ldrb	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d52:	2101      	movs	r1, #1
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f002 fe51 	bl	80099fc <USBD_LL_PrepareReceive>
 8006d5a:	e007      	b.n	8006d6c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	2101      	movs	r1, #1
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f002 fe48 	bl	80099fc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e01a      	b.n	8006dc8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	79fa      	ldrb	r2, [r7, #7]
 8006dbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f002 fcb5 	bl	8009730 <USBD_LL_Init>

  return USBD_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d006      	beq.n	8006df2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e001      	b.n	8006df6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 fcef 	bl	80097f0 <USBD_LL_Start>

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b084      	sub	sp, #16
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00c      	beq.n	8006e66 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	4611      	mov	r1, r2
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	4798      	blx	r3
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	4611      	mov	r1, r2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fef7 	bl	8007c9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d00c      	beq.n	8006eec <USBD_LL_SetupStage+0x56>
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d302      	bcc.n	8006edc <USBD_LL_SetupStage+0x46>
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d010      	beq.n	8006efc <USBD_LL_SetupStage+0x66>
 8006eda:	e017      	b.n	8006f0c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f9cd 	bl	8007284 <USBD_StdDevReq>
      break;
 8006eea:	e01a      	b.n	8006f22 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa2f 	bl	8007358 <USBD_StdItfReq>
      break;
 8006efa:	e012      	b.n	8006f22 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fa6d 	bl	80073e4 <USBD_StdEPReq>
      break;
 8006f0a:	e00a      	b.n	8006f22 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fcc8 	bl	80098b0 <USBD_LL_StallEP>
      break;
 8006f20:	bf00      	nop
  }

  return USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d14b      	bne.n	8006fd8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f46:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d134      	bne.n	8006fbc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d919      	bls.n	8006f92 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d203      	bcs.n	8006f80 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	e002      	b.n	8006f86 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 ff7a 	bl	8007e84 <USBD_CtlContinueRx>
 8006f90:	e038      	b.n	8007004 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d105      	bne.n	8006fb4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 ff77 	bl	8007ea8 <USBD_CtlSendStatus>
 8006fba:	e023      	b.n	8007004 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d11e      	bne.n	8007004 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006fce:	2100      	movs	r1, #0
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f002 fc6d 	bl	80098b0 <USBD_LL_StallEP>
 8006fd6:	e015      	b.n	8007004 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00d      	beq.n	8007000 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d108      	bne.n	8007000 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	7afa      	ldrb	r2, [r7, #11]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	4798      	blx	r3
 8006ffe:	e001      	b.n	8007004 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007000:	2302      	movs	r3, #2
 8007002:	e000      	b.n	8007006 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	460b      	mov	r3, r1
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800701c:	7afb      	ldrb	r3, [r7, #11]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d17f      	bne.n	8007122 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3314      	adds	r3, #20
 8007026:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800702e:	2b02      	cmp	r3, #2
 8007030:	d15c      	bne.n	80070ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d915      	bls.n	800706a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fee4 	bl	8007e24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	2100      	movs	r1, #0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f002 fcca 	bl	80099fc <USBD_LL_PrepareReceive>
 8007068:	e04e      	b.n	8007108 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	6912      	ldr	r2, [r2, #16]
 8007072:	fbb3 f1f2 	udiv	r1, r3, r2
 8007076:	fb02 f201 	mul.w	r2, r2, r1
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11c      	bne.n	80070ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007088:	429a      	cmp	r2, r3
 800708a:	d316      	bcc.n	80070ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007096:	429a      	cmp	r2, r3
 8007098:	d20f      	bcs.n	80070ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fec0 	bl	8007e24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f002 fca2 	bl	80099fc <USBD_LL_PrepareReceive>
 80070b8:	e026      	b.n	8007108 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d105      	bne.n	80070dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f002 fbe6 	bl	80098b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fef2 	bl	8007ece <USBD_CtlReceiveStatus>
 80070ea:	e00d      	b.n	8007108 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d004      	beq.n	8007100 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d103      	bne.n	8007108 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f002 fbd4 	bl	80098b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d11d      	bne.n	800714e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fe82 	bl	8006e1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007120:	e015      	b.n	800714e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00d      	beq.n	800714a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007134:	2b03      	cmp	r3, #3
 8007136:	d108      	bne.n	800714a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	7afa      	ldrb	r2, [r7, #11]
 8007142:	4611      	mov	r1, r2
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	4798      	blx	r3
 8007148:	e001      	b.n	800714e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800714a:	2302      	movs	r3, #2
 800714c:	e000      	b.n	8007150 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	2200      	movs	r2, #0
 8007164:	2100      	movs	r1, #0
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f002 fb5d 	bl	8009826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2240      	movs	r2, #64	; 0x40
 8007178:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	2200      	movs	r2, #0
 8007180:	2180      	movs	r1, #128	; 0x80
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f002 fb4f 	bl	8009826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2240      	movs	r2, #64	; 0x40
 8007192:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6852      	ldr	r2, [r2, #4]
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	4611      	mov	r1, r2
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
  }

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2204      	movs	r2, #4
 8007212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	2b04      	cmp	r3, #4
 8007234:	d105      	bne.n	8007242 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725e:	2b03      	cmp	r3, #3
 8007260:	d10b      	bne.n	800727a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800729a:	2b20      	cmp	r3, #32
 800729c:	d004      	beq.n	80072a8 <USBD_StdDevReq+0x24>
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d002      	beq.n	80072a8 <USBD_StdDevReq+0x24>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <USBD_StdDevReq+0x34>
 80072a6:	e04c      	b.n	8007342 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
      break;
 80072b6:	e049      	b.n	800734c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	2b09      	cmp	r3, #9
 80072be:	d83a      	bhi.n	8007336 <USBD_StdDevReq+0xb2>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <USBD_StdDevReq+0x44>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	08007319 	.word	0x08007319
 80072cc:	0800732d 	.word	0x0800732d
 80072d0:	08007337 	.word	0x08007337
 80072d4:	08007323 	.word	0x08007323
 80072d8:	08007337 	.word	0x08007337
 80072dc:	080072fb 	.word	0x080072fb
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	08007337 	.word	0x08007337
 80072e8:	0800730f 	.word	0x0800730f
 80072ec:	08007305 	.word	0x08007305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9d4 	bl	80076a0 <USBD_GetDescriptor>
          break;
 80072f8:	e022      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fb61 	bl	80079c4 <USBD_SetAddress>
          break;
 8007302:	e01d      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fb9e 	bl	8007a48 <USBD_SetConfig>
          break;
 800730c:	e018      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc27 	bl	8007b64 <USBD_GetConfig>
          break;
 8007316:	e013      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fc56 	bl	8007bcc <USBD_GetStatus>
          break;
 8007320:	e00e      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fc84 	bl	8007c32 <USBD_SetFeature>
          break;
 800732a:	e009      	b.n	8007340 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fc93 	bl	8007c5a <USBD_ClrFeature>
          break;
 8007334:	e004      	b.n	8007340 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fcec 	bl	8007d16 <USBD_CtlError>
          break;
 800733e:	bf00      	nop
      }
      break;
 8007340:	e004      	b.n	800734c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fce6 	bl	8007d16 <USBD_CtlError>
      break;
 800734a:	bf00      	nop
  }

  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop

08007358 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736e:	2b20      	cmp	r3, #32
 8007370:	d003      	beq.n	800737a <USBD_StdItfReq+0x22>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d001      	beq.n	800737a <USBD_StdItfReq+0x22>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d12a      	bne.n	80073d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	3b01      	subs	r3, #1
 8007382:	2b02      	cmp	r3, #2
 8007384:	d81d      	bhi.n	80073c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	889b      	ldrh	r3, [r3, #4]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d813      	bhi.n	80073b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	4798      	blx	r3
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	88db      	ldrh	r3, [r3, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d110      	bne.n	80073cc <USBD_StdItfReq+0x74>
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10d      	bne.n	80073cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fd79 	bl	8007ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073b6:	e009      	b.n	80073cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fcab 	bl	8007d16 <USBD_CtlError>
          break;
 80073c0:	e004      	b.n	80073cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fca6 	bl	8007d16 <USBD_CtlError>
          break;
 80073ca:	e000      	b.n	80073ce <USBD_StdItfReq+0x76>
          break;
 80073cc:	bf00      	nop
      }
      break;
 80073ce:	e004      	b.n	80073da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fc9f 	bl	8007d16 <USBD_CtlError>
      break;
 80073d8:	bf00      	nop
  }

  return USBD_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	889b      	ldrh	r3, [r3, #4]
 80073f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007400:	2b20      	cmp	r3, #32
 8007402:	d004      	beq.n	800740e <USBD_StdEPReq+0x2a>
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d002      	beq.n	800740e <USBD_StdEPReq+0x2a>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d008      	beq.n	800741e <USBD_StdEPReq+0x3a>
 800740c:	e13d      	b.n	800768a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	4798      	blx	r3
      break;
 800741c:	e13a      	b.n	8007694 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007426:	2b20      	cmp	r3, #32
 8007428:	d10a      	bne.n	8007440 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	e12a      	b.n	8007696 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d03e      	beq.n	80074c6 <USBD_StdEPReq+0xe2>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d002      	beq.n	8007452 <USBD_StdEPReq+0x6e>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d070      	beq.n	8007532 <USBD_StdEPReq+0x14e>
 8007450:	e115      	b.n	800767e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	2b02      	cmp	r3, #2
 800745a:	d002      	beq.n	8007462 <USBD_StdEPReq+0x7e>
 800745c:	2b03      	cmp	r3, #3
 800745e:	d015      	beq.n	800748c <USBD_StdEPReq+0xa8>
 8007460:	e02b      	b.n	80074ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <USBD_StdEPReq+0x9e>
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d009      	beq.n	8007482 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 fa1c 	bl	80098b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 fa18 	bl	80098b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007480:	e020      	b.n	80074c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc46 	bl	8007d16 <USBD_CtlError>
              break;
 800748a:	e01b      	b.n	80074c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	885b      	ldrh	r3, [r3, #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10e      	bne.n	80074b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_StdEPReq+0xce>
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b80      	cmp	r3, #128	; 0x80
 800749e:	d008      	beq.n	80074b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	88db      	ldrh	r3, [r3, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 f9ff 	bl	80098b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fcf8 	bl	8007ea8 <USBD_CtlSendStatus>

              break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc2a 	bl	8007d16 <USBD_CtlError>
              break;
 80074c2:	bf00      	nop
          }
          break;
 80074c4:	e0e0      	b.n	8007688 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d002      	beq.n	80074d6 <USBD_StdEPReq+0xf2>
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d015      	beq.n	8007500 <USBD_StdEPReq+0x11c>
 80074d4:	e026      	b.n	8007524 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <USBD_StdEPReq+0x112>
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d009      	beq.n	80074f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f002 f9e2 	bl	80098b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f002 f9de 	bl	80098b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074f4:	e01c      	b.n	8007530 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc0c 	bl	8007d16 <USBD_CtlError>
              break;
 80074fe:	e017      	b.n	8007530 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	885b      	ldrh	r3, [r3, #2]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d112      	bne.n	800752e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 f9e9 	bl	80098ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fcc3 	bl	8007ea8 <USBD_CtlSendStatus>
              }
              break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fbf5 	bl	8007d16 <USBD_CtlError>
              break;
 800752c:	e000      	b.n	8007530 <USBD_StdEPReq+0x14c>
              break;
 800752e:	bf00      	nop
          }
          break;
 8007530:	e0aa      	b.n	8007688 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	2b02      	cmp	r3, #2
 800753a:	d002      	beq.n	8007542 <USBD_StdEPReq+0x15e>
 800753c:	2b03      	cmp	r3, #3
 800753e:	d032      	beq.n	80075a6 <USBD_StdEPReq+0x1c2>
 8007540:	e097      	b.n	8007672 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <USBD_StdEPReq+0x174>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b80      	cmp	r3, #128	; 0x80
 800754c:	d004      	beq.n	8007558 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fbe0 	bl	8007d16 <USBD_CtlError>
                break;
 8007556:	e091      	b.n	800767c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0b      	bge.n	8007578 <USBD_StdEPReq+0x194>
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	3310      	adds	r3, #16
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	e00b      	b.n	8007590 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	3304      	adds	r3, #4
 8007590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2202      	movs	r2, #2
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fc24 	bl	8007dec <USBD_CtlSendData>
              break;
 80075a4:	e06a      	b.n	800767c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da11      	bge.n	80075d2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	f003 020f 	and.w	r2, r3, #15
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	3318      	adds	r3, #24
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d117      	bne.n	80075f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fba3 	bl	8007d16 <USBD_CtlError>
                  break;
 80075d0:	e054      	b.n	800767c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb90 	bl	8007d16 <USBD_CtlError>
                  break;
 80075f6:	e041      	b.n	800767c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da0b      	bge.n	8007618 <USBD_StdEPReq+0x234>
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	3310      	adds	r3, #16
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	3304      	adds	r3, #4
 8007616:	e00b      	b.n	8007630 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <USBD_StdEPReq+0x25a>
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d103      	bne.n	8007646 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e00e      	b.n	8007664 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 f96e 	bl	800992c <USBD_LL_IsStallEP>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e002      	b.n	8007664 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2202      	movs	r2, #2
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fbbe 	bl	8007dec <USBD_CtlSendData>
              break;
 8007670:	e004      	b.n	800767c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fb4e 	bl	8007d16 <USBD_CtlError>
              break;
 800767a:	bf00      	nop
          }
          break;
 800767c:	e004      	b.n	8007688 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb48 	bl	8007d16 <USBD_CtlError>
          break;
 8007686:	bf00      	nop
      }
      break;
 8007688:	e004      	b.n	8007694 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fb42 	bl	8007d16 <USBD_CtlError>
      break;
 8007692:	bf00      	nop
  }

  return ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b0e      	cmp	r3, #14
 80076c2:	f200 8152 	bhi.w	800796a <USBD_GetDescriptor+0x2ca>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBD_GetDescriptor+0x2c>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	0800773d 	.word	0x0800773d
 80076d0:	08007755 	.word	0x08007755
 80076d4:	08007795 	.word	0x08007795
 80076d8:	0800796b 	.word	0x0800796b
 80076dc:	0800796b 	.word	0x0800796b
 80076e0:	0800790b 	.word	0x0800790b
 80076e4:	08007937 	.word	0x08007937
 80076e8:	0800796b 	.word	0x0800796b
 80076ec:	0800796b 	.word	0x0800796b
 80076f0:	0800796b 	.word	0x0800796b
 80076f4:	0800796b 	.word	0x0800796b
 80076f8:	0800796b 	.word	0x0800796b
 80076fc:	0800796b 	.word	0x0800796b
 8007700:	0800796b 	.word	0x0800796b
 8007704:	08007709 	.word	0x08007709
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800772a:	e126      	b.n	800797a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 faf1 	bl	8007d16 <USBD_CtlError>
        err++;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	3301      	adds	r3, #1
 8007738:	72fb      	strb	r3, [r7, #11]
      break;
 800773a:	e11e      	b.n	800797a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      break;
 8007752:	e112      	b.n	800797a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	7c1b      	ldrb	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10d      	bne.n	8007778 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	f107 0208 	add.w	r2, r7, #8
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
 800776c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	2202      	movs	r2, #2
 8007774:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007776:	e100      	b.n	800797a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	f107 0208 	add.w	r2, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	2202      	movs	r2, #2
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e0f2      	b.n	800797a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b05      	cmp	r3, #5
 800779c:	f200 80ac 	bhi.w	80078f8 <USBD_GetDescriptor+0x258>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBD_GetDescriptor+0x108>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077f5 	.word	0x080077f5
 80077b0:	08007829 	.word	0x08007829
 80077b4:	0800785d 	.word	0x0800785d
 80077b8:	08007891 	.word	0x08007891
 80077bc:	080078c5 	.word	0x080078c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	7c12      	ldrb	r2, [r2, #16]
 80077d8:	f107 0108 	add.w	r1, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e2:	e091      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa95 	bl	8007d16 <USBD_CtlError>
            err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
          break;
 80077f2:	e089      	b.n	8007908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e077      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa7b 	bl	8007d16 <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e06f      	b.n	8007908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e05d      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa61 	bl	8007d16 <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e055      	b.n	8007908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e043      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa47 	bl	8007d16 <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e03b      	b.n	8007908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e029      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa2d 	bl	8007d16 <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e021      	b.n	8007908 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e00f      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa13 	bl	8007d16 <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e007      	b.n	8007908 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa0b 	bl	8007d16 <USBD_CtlError>
          err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007906:	e038      	b.n	800797a <USBD_GetDescriptor+0x2da>
 8007908:	e037      	b.n	800797a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791a:	f107 0208 	add.w	r2, r7, #8
 800791e:	4610      	mov	r0, r2
 8007920:	4798      	blx	r3
 8007922:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007924:	e029      	b.n	800797a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f9f4 	bl	8007d16 <USBD_CtlError>
        err++;
 800792e:	7afb      	ldrb	r3, [r7, #11]
 8007930:	3301      	adds	r3, #1
 8007932:	72fb      	strb	r3, [r7, #11]
      break;
 8007934:	e021      	b.n	800797a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7c1b      	ldrb	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10d      	bne.n	800795a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	4610      	mov	r0, r2
 800794c:	4798      	blx	r3
 800794e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	2207      	movs	r2, #7
 8007956:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007958:	e00f      	b.n	800797a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f9da 	bl	8007d16 <USBD_CtlError>
        err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
      break;
 8007968:	e007      	b.n	800797a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f9d2 	bl	8007d16 <USBD_CtlError>
      err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	bf00      	nop
  }

  if (err != 0U)
 800797a:	7afb      	ldrb	r3, [r7, #11]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11c      	bne.n	80079ba <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007980:	893b      	ldrh	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d011      	beq.n	80079aa <USBD_GetDescriptor+0x30a>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	88db      	ldrh	r3, [r3, #6]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	88da      	ldrh	r2, [r3, #6]
 8007992:	893b      	ldrh	r3, [r7, #8]
 8007994:	4293      	cmp	r3, r2
 8007996:	bf28      	it	cs
 8007998:	4613      	movcs	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800799e:	893b      	ldrh	r3, [r7, #8]
 80079a0:	461a      	mov	r2, r3
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa21 	bl	8007dec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	88db      	ldrh	r3, [r3, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa78 	bl	8007ea8 <USBD_CtlSendStatus>
 80079b8:	e000      	b.n	80079bc <USBD_GetDescriptor+0x31c>
    return;
 80079ba:	bf00      	nop
    }
  }
}
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	889b      	ldrh	r3, [r3, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d130      	bne.n	8007a38 <USBD_SetAddress+0x74>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	88db      	ldrh	r3, [r3, #6]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d12c      	bne.n	8007a38 <USBD_SetAddress+0x74>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	2b7f      	cmp	r3, #127	; 0x7f
 80079e4:	d828      	bhi.n	8007a38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d104      	bne.n	8007a06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f989 	bl	8007d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a04:	e01c      	b.n	8007a40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7bfa      	ldrb	r2, [r7, #15]
 8007a0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 ffb0 	bl	8009978 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fa45 	bl	8007ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2c:	e008      	b.n	8007a40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a36:	e003      	b.n	8007a40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f96b 	bl	8007d16 <USBD_CtlError>
  }
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a5c:	4b40      	ldr	r3, [pc, #256]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d904      	bls.n	8007a6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f955 	bl	8007d16 <USBD_CtlError>
 8007a6c:	e075      	b.n	8007b5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d002      	beq.n	8007a7e <USBD_SetConfig+0x36>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d023      	beq.n	8007ac4 <USBD_SetConfig+0x7c>
 8007a7c:	e062      	b.n	8007b44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a7e:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01a      	beq.n	8007abc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a86:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2203      	movs	r2, #3
 8007a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f9c7 	bl	8006e32 <USBD_SetClassConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d104      	bne.n	8007ab4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f932 	bl	8007d16 <USBD_CtlError>
            return;
 8007ab2:	e052      	b.n	8007b5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9f7 	bl	8007ea8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aba:	e04e      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9f3 	bl	8007ea8 <USBD_CtlSendStatus>
        break;
 8007ac2:	e04a      	b.n	8007b5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ac4:	4b26      	ldr	r3, [pc, #152]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d112      	bne.n	8007af2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ad4:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ade:	4b20      	ldr	r3, [pc, #128]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff f9c3 	bl	8006e70 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9dc 	bl	8007ea8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007af0:	e033      	b.n	8007b5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007af2:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <USBD_SetConfig+0x118>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d01d      	beq.n	8007b3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff f9b1 	bl	8006e70 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b0e:	4b14      	ldr	r3, [pc, #80]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b18:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f987 	bl	8006e32 <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d104      	bne.n	8007b34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8f2 	bl	8007d16 <USBD_CtlError>
            return;
 8007b32:	e012      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9b7 	bl	8007ea8 <USBD_CtlSendStatus>
        break;
 8007b3a:	e00e      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9b3 	bl	8007ea8 <USBD_CtlSendStatus>
        break;
 8007b42:	e00a      	b.n	8007b5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8e5 	bl	8007d16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f98c 	bl	8006e70 <USBD_ClrClassConfig>
        break;
 8007b58:	bf00      	nop
    }
  }
}
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	2000140a 	.word	0x2000140a

08007b64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d004      	beq.n	8007b80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8cc 	bl	8007d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b7e:	e021      	b.n	8007bc4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	db17      	blt.n	8007bba <USBD_GetConfig+0x56>
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	dd02      	ble.n	8007b94 <USBD_GetConfig+0x30>
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d00b      	beq.n	8007baa <USBD_GetConfig+0x46>
 8007b92:	e012      	b.n	8007bba <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f922 	bl	8007dec <USBD_CtlSendData>
        break;
 8007ba8:	e00c      	b.n	8007bc4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3304      	adds	r3, #4
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f91a 	bl	8007dec <USBD_CtlSendData>
        break;
 8007bb8:	e004      	b.n	8007bc4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8aa 	bl	8007d16 <USBD_CtlError>
        break;
 8007bc2:	bf00      	nop
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d81e      	bhi.n	8007c20 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	88db      	ldrh	r3, [r3, #6]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d004      	beq.n	8007bf4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f892 	bl	8007d16 <USBD_CtlError>
        break;
 8007bf2:	e01a      	b.n	8007c2a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f043 0202 	orr.w	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	330c      	adds	r3, #12
 8007c14:	2202      	movs	r2, #2
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8e7 	bl	8007dec <USBD_CtlSendData>
      break;
 8007c1e:	e004      	b.n	8007c2a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f877 	bl	8007d16 <USBD_CtlError>
      break;
 8007c28:	bf00      	nop
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	885b      	ldrh	r3, [r3, #2]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d106      	bne.n	8007c52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f92b 	bl	8007ea8 <USBD_CtlSendStatus>
  }
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d80b      	bhi.n	8007c88 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	885b      	ldrh	r3, [r3, #2]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10c      	bne.n	8007c92 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f911 	bl	8007ea8 <USBD_CtlSendStatus>
      }
      break;
 8007c86:	e004      	b.n	8007c92 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f843 	bl	8007d16 <USBD_CtlError>
      break;
 8007c90:	e000      	b.n	8007c94 <USBD_ClrFeature+0x3a>
      break;
 8007c92:	bf00      	nop
  }
}
 8007c94:	bf00      	nop
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	785a      	ldrb	r2, [r3, #1]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	3302      	adds	r3, #2
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3303      	adds	r3, #3
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4413      	add	r3, r2
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	3305      	adds	r3, #5
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	3306      	adds	r3, #6
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3307      	adds	r3, #7
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4413      	add	r3, r2
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	80da      	strh	r2, [r3, #6]

}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fdc4 	bl	80098b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fdc0 	bl	80098b0 <USBD_LL_StallEP>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d032      	beq.n	8007db4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f834 	bl	8007dbc <USBD_GetLen>
 8007d54:	4603      	mov	r3, r0
 8007d56:	3301      	adds	r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	75fa      	strb	r2, [r7, #23]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	75fa      	strb	r2, [r7, #23]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4413      	add	r3, r2
 8007d80:	2203      	movs	r2, #3
 8007d82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d84:	e012      	b.n	8007dac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	7dfa      	ldrb	r2, [r7, #23]
 8007d8e:	1c51      	adds	r1, r2, #1
 8007d90:	75f9      	strb	r1, [r7, #23]
 8007d92:	4611      	mov	r1, r2
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	440a      	add	r2, r1
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	75fa      	strb	r2, [r7, #23]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4413      	add	r3, r2
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e8      	bne.n	8007d86 <USBD_GetString+0x4e>
    }
  }
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007dc8:	e005      	b.n	8007dd6 <USBD_GetLen+0x1a>
  {
    len++;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f5      	bne.n	8007dca <USBD_GetLen+0xe>
  }

  return len;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	2100      	movs	r1, #0
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f001 fdce 	bl	80099b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	2100      	movs	r1, #0
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fdbc 	bl	80099b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2203      	movs	r2, #3
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e5e:	88fa      	ldrh	r2, [r7, #6]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e66:	88fa      	ldrh	r2, [r7, #6]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	2100      	movs	r1, #0
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f001 fdc1 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f001 fdaf 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f001 fd79 	bl	80099b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2205      	movs	r2, #5
 8007eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fd89 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f06:	2b84      	cmp	r3, #132	; 0x84
 8007f08:	d005      	beq.n	8007f16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	3303      	adds	r3, #3
 8007f14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f16:	68fb      	ldr	r3, [r7, #12]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f28:	f000 fa58 	bl	80083dc <vTaskStartScheduler>
  
  return osOK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af02      	add	r7, sp, #8
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685c      	ldr	r4, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f48:	b29e      	uxth	r6, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff ffcf 	bl	8007ef4 <makeFreeRtosPriority>
 8007f56:	4602      	mov	r2, r0
 8007f58:	f107 030c 	add.w	r3, r7, #12
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	9200      	str	r2, [sp, #0]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	4632      	mov	r2, r6
 8007f64:	4629      	mov	r1, r5
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 f8d2 	bl	8008110 <xTaskCreate>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d001      	beq.n	8007f76 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f80 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <osDelay+0x16>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	e000      	b.n	8007f98 <osDelay+0x18>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 f9eb 	bl	8008374 <vTaskDelay>
  
  return osOK;
 8007f9e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f103 0208 	add.w	r2, r3, #8
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f103 0208 	add.w	r2, r3, #8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f103 0208 	add.w	r2, r3, #8
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008060:	d103      	bne.n	800806a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e00c      	b.n	8008084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3308      	adds	r3, #8
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e002      	b.n	8008078 <vListInsert+0x2e>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	429a      	cmp	r2, r3
 8008082:	d2f6      	bcs.n	8008072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6892      	ldr	r2, [r2, #8]
 80080d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6852      	ldr	r2, [r2, #4]
 80080dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d103      	bne.n	80080f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08c      	sub	sp, #48	; 0x30
 8008114:	af04      	add	r7, sp, #16
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4618      	mov	r0, r3
 8008126:	f000 fe75 	bl	8008e14 <pvPortMalloc>
 800812a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00e      	beq.n	8008150 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008132:	2054      	movs	r0, #84	; 0x54
 8008134:	f000 fe6e 	bl	8008e14 <pvPortMalloc>
 8008138:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	631a      	str	r2, [r3, #48]	; 0x30
 8008146:	e005      	b.n	8008154 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008148:	6978      	ldr	r0, [r7, #20]
 800814a:	f000 ff25 	bl	8008f98 <vPortFree>
 800814e:	e001      	b.n	8008154 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d013      	beq.n	8008182 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800815a:	88fa      	ldrh	r2, [r7, #6]
 800815c:	2300      	movs	r3, #0
 800815e:	9303      	str	r3, [sp, #12]
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	9302      	str	r3, [sp, #8]
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f80e 	bl	8008192 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008176:	69f8      	ldr	r0, [r7, #28]
 8008178:	f000 f892 	bl	80082a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800817c:	2301      	movs	r3, #1
 800817e:	61bb      	str	r3, [r7, #24]
 8008180:	e002      	b.n	8008188 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008182:	f04f 33ff 	mov.w	r3, #4294967295
 8008186:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008188:	69bb      	ldr	r3, [r7, #24]
	}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081aa:	3b01      	subs	r3, #1
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	f023 0307 	bic.w	r3, r3, #7
 80081b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d009      	beq.n	80081d8 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	e7fe      	b.n	80081d6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01f      	beq.n	800821e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081de:	2300      	movs	r3, #0
 80081e0:	61fb      	str	r3, [r7, #28]
 80081e2:	e012      	b.n	800820a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	7819      	ldrb	r1, [r3, #0]
 80081ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	3334      	adds	r3, #52	; 0x34
 80081f4:	460a      	mov	r2, r1
 80081f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d006      	beq.n	8008212 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2b0f      	cmp	r3, #15
 800820e:	d9e9      	bls.n	80081e4 <prvInitialiseNewTask+0x52>
 8008210:	e000      	b.n	8008214 <prvInitialiseNewTask+0x82>
			{
				break;
 8008212:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800821c:	e003      	b.n	8008226 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	2b06      	cmp	r3, #6
 800822a:	d901      	bls.n	8008230 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800822c:	2306      	movs	r3, #6
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008234:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	2200      	movs	r2, #0
 8008240:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008244:	3304      	adds	r3, #4
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fece 	bl	8007fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	3318      	adds	r3, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fec9 	bl	8007fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	f1c3 0207 	rsb	r2, r3, #7
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	2200      	movs	r2, #0
 8008270:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	68f9      	ldr	r1, [r7, #12]
 800827e:	69b8      	ldr	r0, [r7, #24]
 8008280:	f000 fbc8 	bl	8008a14 <pxPortInitialiseStack>
 8008284:	4602      	mov	r2, r0
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008296:	bf00      	nop
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082a8:	f000 fcd8 	bl	8008c5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082ac:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <prvAddNewTaskToReadyList+0xb8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3301      	adds	r3, #1
 80082b2:	4a29      	ldr	r2, [pc, #164]	; (8008358 <prvAddNewTaskToReadyList+0xb8>)
 80082b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082b6:	4b29      	ldr	r3, [pc, #164]	; (800835c <prvAddNewTaskToReadyList+0xbc>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082be:	4a27      	ldr	r2, [pc, #156]	; (800835c <prvAddNewTaskToReadyList+0xbc>)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082c4:	4b24      	ldr	r3, [pc, #144]	; (8008358 <prvAddNewTaskToReadyList+0xb8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d110      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082cc:	f000 faa0 	bl	8008810 <prvInitialiseTaskLists>
 80082d0:	e00d      	b.n	80082ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082d2:	4b23      	ldr	r3, [pc, #140]	; (8008360 <prvAddNewTaskToReadyList+0xc0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082da:	4b20      	ldr	r3, [pc, #128]	; (800835c <prvAddNewTaskToReadyList+0xbc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d802      	bhi.n	80082ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082e8:	4a1c      	ldr	r2, [pc, #112]	; (800835c <prvAddNewTaskToReadyList+0xbc>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3301      	adds	r3, #1
 80082f4:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <prvAddNewTaskToReadyList+0xc4>)
 80082f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	4b19      	ldr	r3, [pc, #100]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4313      	orrs	r3, r2
 8008306:	4a18      	ldr	r2, [pc, #96]	; (8008368 <prvAddNewTaskToReadyList+0xc8>)
 8008308:	6013      	str	r3, [r2, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	4613      	mov	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4a15      	ldr	r2, [pc, #84]	; (800836c <prvAddNewTaskToReadyList+0xcc>)
 8008318:	441a      	add	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7ff fe6e 	bl	8008002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008326:	f000 fcc7 	bl	8008cb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800832a:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <prvAddNewTaskToReadyList+0xc0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvAddNewTaskToReadyList+0xbc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d207      	bcs.n	8008350 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <prvAddNewTaskToReadyList+0xd0>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	2000150c 	.word	0x2000150c
 800835c:	2000140c 	.word	0x2000140c
 8008360:	20001518 	.word	0x20001518
 8008364:	20001528 	.word	0x20001528
 8008368:	20001514 	.word	0x20001514
 800836c:	20001410 	.word	0x20001410
 8008370:	e000ed04 	.word	0xe000ed04

08008374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d016      	beq.n	80083b4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <vTaskDelay+0x60>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <vTaskDelay+0x2e>
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60bb      	str	r3, [r7, #8]
 80083a0:	e7fe      	b.n	80083a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80083a2:	f000 f861 	bl	8008468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083a6:	2100      	movs	r1, #0
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 facd 	bl	8008948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083ae:	f000 f869 	bl	8008484 <xTaskResumeAll>
 80083b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d107      	bne.n	80083ca <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <vTaskDelay+0x64>)
 80083bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20001534 	.word	0x20001534
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <vTaskStartScheduler+0x74>)
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	2300      	movs	r3, #0
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	2280      	movs	r2, #128	; 0x80
 80083ee:	4919      	ldr	r1, [pc, #100]	; (8008454 <vTaskStartScheduler+0x78>)
 80083f0:	4819      	ldr	r0, [pc, #100]	; (8008458 <vTaskStartScheduler+0x7c>)
 80083f2:	f7ff fe8d 	bl	8008110 <xTaskCreate>
 80083f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d115      	bne.n	800842a <vTaskStartScheduler+0x4e>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <vTaskStartScheduler+0x80>)
 8008412:	f04f 32ff 	mov.w	r2, #4294967295
 8008416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <vTaskStartScheduler+0x84>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <vTaskStartScheduler+0x88>)
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008424:	f000 fb7c 	bl	8008b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008428:	e00d      	b.n	8008446 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008430:	d109      	bne.n	8008446 <vTaskStartScheduler+0x6a>
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	607b      	str	r3, [r7, #4]
 8008444:	e7fe      	b.n	8008444 <vTaskStartScheduler+0x68>
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20001530 	.word	0x20001530
 8008454:	08009c3c 	.word	0x08009c3c
 8008458:	080087e1 	.word	0x080087e1
 800845c:	2000152c 	.word	0x2000152c
 8008460:	20001518 	.word	0x20001518
 8008464:	20001510 	.word	0x20001510

08008468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800846c:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vTaskSuspendAll+0x18>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a03      	ldr	r2, [pc, #12]	; (8008480 <vTaskSuspendAll+0x18>)
 8008474:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20001534 	.word	0x20001534

08008484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008492:	4b41      	ldr	r3, [pc, #260]	; (8008598 <xTaskResumeAll+0x114>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <xTaskResumeAll+0x2a>
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	e7fe      	b.n	80084ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084ae:	f000 fbd5 	bl	8008c5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084b2:	4b39      	ldr	r3, [pc, #228]	; (8008598 <xTaskResumeAll+0x114>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	4a37      	ldr	r2, [pc, #220]	; (8008598 <xTaskResumeAll+0x114>)
 80084ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <xTaskResumeAll+0x114>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d161      	bne.n	8008588 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084c4:	4b35      	ldr	r3, [pc, #212]	; (800859c <xTaskResumeAll+0x118>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d05d      	beq.n	8008588 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084cc:	e02e      	b.n	800852c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ce:	4b34      	ldr	r3, [pc, #208]	; (80085a0 <xTaskResumeAll+0x11c>)
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3318      	adds	r3, #24
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fdee 	bl	80080bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fde9 	bl	80080bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	2201      	movs	r2, #1
 80084f0:	409a      	lsls	r2, r3
 80084f2:	4b2c      	ldr	r3, [pc, #176]	; (80085a4 <xTaskResumeAll+0x120>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <xTaskResumeAll+0x120>)
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4a27      	ldr	r2, [pc, #156]	; (80085a8 <xTaskResumeAll+0x124>)
 800850a:	441a      	add	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7ff fd75 	bl	8008002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4b23      	ldr	r3, [pc, #140]	; (80085ac <xTaskResumeAll+0x128>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008526:	4b22      	ldr	r3, [pc, #136]	; (80085b0 <xTaskResumeAll+0x12c>)
 8008528:	2201      	movs	r2, #1
 800852a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800852c:	4b1c      	ldr	r3, [pc, #112]	; (80085a0 <xTaskResumeAll+0x11c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1cc      	bne.n	80084ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800853a:	f000 f9e5 	bl	8008908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <xTaskResumeAll+0x130>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d010      	beq.n	800856c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800854a:	f000 f837 	bl	80085bc <xTaskIncrementTick>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008554:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <xTaskResumeAll+0x12c>)
 8008556:	2201      	movs	r2, #1
 8008558:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3b01      	subs	r3, #1
 800855e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1f1      	bne.n	800854a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008566:	4b13      	ldr	r3, [pc, #76]	; (80085b4 <xTaskResumeAll+0x130>)
 8008568:	2200      	movs	r2, #0
 800856a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800856c:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <xTaskResumeAll+0x12c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <xTaskResumeAll+0x134>)
 800857a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008588:	f000 fb96 	bl	8008cb8 <vPortExitCritical>

	return xAlreadyYielded;
 800858c:	68bb      	ldr	r3, [r7, #8]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20001534 	.word	0x20001534
 800859c:	2000150c 	.word	0x2000150c
 80085a0:	200014cc 	.word	0x200014cc
 80085a4:	20001514 	.word	0x20001514
 80085a8:	20001410 	.word	0x20001410
 80085ac:	2000140c 	.word	0x2000140c
 80085b0:	20001520 	.word	0x20001520
 80085b4:	2000151c 	.word	0x2000151c
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c6:	4b4e      	ldr	r3, [pc, #312]	; (8008700 <xTaskIncrementTick+0x144>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 8087 	bne.w	80086de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085d0:	4b4c      	ldr	r3, [pc, #304]	; (8008704 <xTaskIncrementTick+0x148>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085d8:	4a4a      	ldr	r2, [pc, #296]	; (8008704 <xTaskIncrementTick+0x148>)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d11f      	bne.n	8008624 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80085e4:	4b48      	ldr	r3, [pc, #288]	; (8008708 <xTaskIncrementTick+0x14c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d009      	beq.n	8008602 <xTaskIncrementTick+0x46>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	e7fe      	b.n	8008600 <xTaskIncrementTick+0x44>
 8008602:	4b41      	ldr	r3, [pc, #260]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	4b40      	ldr	r3, [pc, #256]	; (800870c <xTaskIncrementTick+0x150>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a3e      	ldr	r2, [pc, #248]	; (8008708 <xTaskIncrementTick+0x14c>)
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	4a3e      	ldr	r2, [pc, #248]	; (800870c <xTaskIncrementTick+0x150>)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <xTaskIncrementTick+0x154>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3301      	adds	r3, #1
 800861c:	4a3c      	ldr	r2, [pc, #240]	; (8008710 <xTaskIncrementTick+0x154>)
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	f000 f972 	bl	8008908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008624:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <xTaskIncrementTick+0x158>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	429a      	cmp	r2, r3
 800862c:	d348      	bcc.n	80086c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800862e:	4b36      	ldr	r3, [pc, #216]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <xTaskIncrementTick+0x158>)
 800863a:	f04f 32ff 	mov.w	r2, #4294967295
 800863e:	601a      	str	r2, [r3, #0]
					break;
 8008640:	e03e      	b.n	80086c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008642:	4b31      	ldr	r3, [pc, #196]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d203      	bcs.n	8008662 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800865a:	4a2e      	ldr	r2, [pc, #184]	; (8008714 <xTaskIncrementTick+0x158>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008660:	e02e      	b.n	80086c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fd28 	bl	80080bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3318      	adds	r3, #24
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fd1f 	bl	80080bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	2201      	movs	r2, #1
 8008684:	409a      	lsls	r2, r3
 8008686:	4b24      	ldr	r3, [pc, #144]	; (8008718 <xTaskIncrementTick+0x15c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4313      	orrs	r3, r2
 800868c:	4a22      	ldr	r2, [pc, #136]	; (8008718 <xTaskIncrementTick+0x15c>)
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4a1f      	ldr	r2, [pc, #124]	; (800871c <xTaskIncrementTick+0x160>)
 800869e:	441a      	add	r2, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f7ff fcab 	bl	8008002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <xTaskIncrementTick+0x164>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d3b9      	bcc.n	800862e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80086ba:	2301      	movs	r3, #1
 80086bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086be:	e7b6      	b.n	800862e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <xTaskIncrementTick+0x164>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c6:	4915      	ldr	r1, [pc, #84]	; (800871c <xTaskIncrementTick+0x160>)
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d907      	bls.n	80086e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e004      	b.n	80086e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80086de:	4b11      	ldr	r3, [pc, #68]	; (8008724 <xTaskIncrementTick+0x168>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	4a0f      	ldr	r2, [pc, #60]	; (8008724 <xTaskIncrementTick+0x168>)
 80086e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80086e8:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <xTaskIncrementTick+0x16c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80086f4:	697b      	ldr	r3, [r7, #20]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20001534 	.word	0x20001534
 8008704:	20001510 	.word	0x20001510
 8008708:	200014c4 	.word	0x200014c4
 800870c:	200014c8 	.word	0x200014c8
 8008710:	20001524 	.word	0x20001524
 8008714:	2000152c 	.word	0x2000152c
 8008718:	20001514 	.word	0x20001514
 800871c:	20001410 	.word	0x20001410
 8008720:	2000140c 	.word	0x2000140c
 8008724:	2000151c 	.word	0x2000151c
 8008728:	20001520 	.word	0x20001520

0800872c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008732:	4b26      	ldr	r3, [pc, #152]	; (80087cc <vTaskSwitchContext+0xa0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800873a:	4b25      	ldr	r3, [pc, #148]	; (80087d0 <vTaskSwitchContext+0xa4>)
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008740:	e03e      	b.n	80087c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008742:	4b23      	ldr	r3, [pc, #140]	; (80087d0 <vTaskSwitchContext+0xa4>)
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b22      	ldr	r3, [pc, #136]	; (80087d4 <vTaskSwitchContext+0xa8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	fab3 f383 	clz	r3, r3
 8008754:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	f1c3 031f 	rsb	r3, r3, #31
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	491e      	ldr	r1, [pc, #120]	; (80087d8 <vTaskSwitchContext+0xac>)
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	e7fe      	b.n	8008784 <vTaskSwitchContext+0x58>
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4a11      	ldr	r2, [pc, #68]	; (80087d8 <vTaskSwitchContext+0xac>)
 8008792:	4413      	add	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	605a      	str	r2, [r3, #4]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	3308      	adds	r3, #8
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d104      	bne.n	80087b6 <vTaskSwitchContext+0x8a>
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	605a      	str	r2, [r3, #4]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a07      	ldr	r2, [pc, #28]	; (80087dc <vTaskSwitchContext+0xb0>)
 80087be:	6013      	str	r3, [r2, #0]
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20001534 	.word	0x20001534
 80087d0:	20001520 	.word	0x20001520
 80087d4:	20001514 	.word	0x20001514
 80087d8:	20001410 	.word	0x20001410
 80087dc:	2000140c 	.word	0x2000140c

080087e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087e8:	f000 f852 	bl	8008890 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087ec:	4b06      	ldr	r3, [pc, #24]	; (8008808 <prvIdleTask+0x28>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d9f9      	bls.n	80087e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <prvIdleTask+0x2c>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008804:	e7f0      	b.n	80087e8 <prvIdleTask+0x8>
 8008806:	bf00      	nop
 8008808:	20001410 	.word	0x20001410
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008816:	2300      	movs	r3, #0
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	e00c      	b.n	8008836 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4a12      	ldr	r2, [pc, #72]	; (8008870 <prvInitialiseTaskLists+0x60>)
 8008828:	4413      	add	r3, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fbbc 	bl	8007fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3301      	adds	r3, #1
 8008834:	607b      	str	r3, [r7, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b06      	cmp	r3, #6
 800883a:	d9ef      	bls.n	800881c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800883c:	480d      	ldr	r0, [pc, #52]	; (8008874 <prvInitialiseTaskLists+0x64>)
 800883e:	f7ff fbb3 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008842:	480d      	ldr	r0, [pc, #52]	; (8008878 <prvInitialiseTaskLists+0x68>)
 8008844:	f7ff fbb0 	bl	8007fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008848:	480c      	ldr	r0, [pc, #48]	; (800887c <prvInitialiseTaskLists+0x6c>)
 800884a:	f7ff fbad 	bl	8007fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800884e:	480c      	ldr	r0, [pc, #48]	; (8008880 <prvInitialiseTaskLists+0x70>)
 8008850:	f7ff fbaa 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008854:	480b      	ldr	r0, [pc, #44]	; (8008884 <prvInitialiseTaskLists+0x74>)
 8008856:	f7ff fba7 	bl	8007fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800885a:	4b0b      	ldr	r3, [pc, #44]	; (8008888 <prvInitialiseTaskLists+0x78>)
 800885c:	4a05      	ldr	r2, [pc, #20]	; (8008874 <prvInitialiseTaskLists+0x64>)
 800885e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <prvInitialiseTaskLists+0x7c>)
 8008862:	4a05      	ldr	r2, [pc, #20]	; (8008878 <prvInitialiseTaskLists+0x68>)
 8008864:	601a      	str	r2, [r3, #0]
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20001410 	.word	0x20001410
 8008874:	2000149c 	.word	0x2000149c
 8008878:	200014b0 	.word	0x200014b0
 800887c:	200014cc 	.word	0x200014cc
 8008880:	200014e0 	.word	0x200014e0
 8008884:	200014f8 	.word	0x200014f8
 8008888:	200014c4 	.word	0x200014c4
 800888c:	200014c8 	.word	0x200014c8

08008890 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008896:	e019      	b.n	80088cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008898:	f000 f9e0 	bl	8008c5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <prvCheckTasksWaitingTermination+0x4c>)
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fc07 	bl	80080bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <prvCheckTasksWaitingTermination+0x50>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <prvCheckTasksWaitingTermination+0x50>)
 80088b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvCheckTasksWaitingTermination+0x54>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3b01      	subs	r3, #1
 80088be:	4a09      	ldr	r2, [pc, #36]	; (80088e4 <prvCheckTasksWaitingTermination+0x54>)
 80088c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088c2:	f000 f9f9 	bl	8008cb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f80e 	bl	80088e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088cc:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <prvCheckTasksWaitingTermination+0x54>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1e1      	bne.n	8008898 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	200014e0 	.word	0x200014e0
 80088e0:	2000150c 	.word	0x2000150c
 80088e4:	200014f4 	.word	0x200014f4

080088e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fb4f 	bl	8008f98 <vPortFree>
			vPortFree( pxTCB );
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb4c 	bl	8008f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800890e:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <prvResetNextTaskUnblockTime+0x38>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <prvResetNextTaskUnblockTime+0x3c>)
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008920:	e008      	b.n	8008934 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <prvResetNextTaskUnblockTime+0x38>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	4a04      	ldr	r2, [pc, #16]	; (8008944 <prvResetNextTaskUnblockTime+0x3c>)
 8008932:	6013      	str	r3, [r2, #0]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	200014c4 	.word	0x200014c4
 8008944:	2000152c 	.word	0x2000152c

08008948 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008952:	4b29      	ldr	r3, [pc, #164]	; (80089f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008958:	4b28      	ldr	r3, [pc, #160]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3304      	adds	r3, #4
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fbac 	bl	80080bc <uxListRemove>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	2201      	movs	r2, #1
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	43da      	mvns	r2, r3
 8008978:	4b21      	ldr	r3, [pc, #132]	; (8008a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4013      	ands	r3, r2
 800897e:	4a20      	ldr	r2, [pc, #128]	; (8008a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008980:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d10a      	bne.n	80089a0 <prvAddCurrentTaskToDelayedList+0x58>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008990:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3304      	adds	r3, #4
 8008996:	4619      	mov	r1, r3
 8008998:	481a      	ldr	r0, [pc, #104]	; (8008a04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800899a:	f7ff fb32 	bl	8008002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800899e:	e026      	b.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089a8:	4b14      	ldr	r3, [pc, #80]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d209      	bcs.n	80089cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3304      	adds	r3, #4
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7ff fb40 	bl	800804a <vListInsert>
}
 80089ca:	e010      	b.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <prvAddCurrentTaskToDelayedList+0xc4>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4619      	mov	r1, r3
 80089d8:	4610      	mov	r0, r2
 80089da:	f7ff fb36 	bl	800804a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d202      	bcs.n	80089ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6013      	str	r3, [r2, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20001510 	.word	0x20001510
 80089fc:	2000140c 	.word	0x2000140c
 8008a00:	20001514 	.word	0x20001514
 8008a04:	200014f8 	.word	0x200014f8
 8008a08:	200014c8 	.word	0x200014c8
 8008a0c:	200014c4 	.word	0x200014c4
 8008a10:	2000152c 	.word	0x2000152c

08008a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3b04      	subs	r3, #4
 8008a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	3b04      	subs	r3, #4
 8008a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f023 0201 	bic.w	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3b04      	subs	r3, #4
 8008a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a44:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <pxPortInitialiseStack+0x64>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3b14      	subs	r3, #20
 8008a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b04      	subs	r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f06f 0202 	mvn.w	r2, #2
 8008a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3b20      	subs	r3, #32
 8008a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	08008a7d 	.word	0x08008a7d

08008a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <prvTaskExitError+0x50>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d009      	beq.n	8008aa4 <prvTaskExitError+0x28>
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	e7fe      	b.n	8008aa2 <prvTaskExitError+0x26>
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ab6:	bf00      	nop
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0fc      	beq.n	8008ab8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	2000011c 	.word	0x2000011c

08008ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <pxCurrentTCBConst2>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f380 8809 	msr	PSP, r0
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8811 	msr	BASEPRI, r0
 8008aea:	4770      	bx	lr
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst2>:
 8008af0:	2000140c 	.word	0x2000140c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <prvPortStartFirstTask+0x24>)
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f380 8808 	msr	MSP, r0
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8814 	msr	CONTROL, r0
 8008b0a:	b662      	cpsie	i
 8008b0c:	b661      	cpsie	f
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	df00      	svc	0
 8008b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed08 	.word	0xe000ed08

08008b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b26:	4b44      	ldr	r3, [pc, #272]	; (8008c38 <xPortStartScheduler+0x118>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a44      	ldr	r2, [pc, #272]	; (8008c3c <xPortStartScheduler+0x11c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d109      	bne.n	8008b44 <xPortStartScheduler+0x24>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e7fe      	b.n	8008b42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b44:	4b3c      	ldr	r3, [pc, #240]	; (8008c38 <xPortStartScheduler+0x118>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a3d      	ldr	r2, [pc, #244]	; (8008c40 <xPortStartScheduler+0x120>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d109      	bne.n	8008b62 <xPortStartScheduler+0x42>
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	e7fe      	b.n	8008b60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b62:	4b38      	ldr	r3, [pc, #224]	; (8008c44 <xPortStartScheduler+0x124>)
 8008b64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4b30      	ldr	r3, [pc, #192]	; (8008c48 <xPortStartScheduler+0x128>)
 8008b88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b8a:	4b30      	ldr	r3, [pc, #192]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b90:	e009      	b.n	8008ba6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008b92:	4b2e      	ldr	r3, [pc, #184]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	4a2c      	ldr	r2, [pc, #176]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008b9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bae:	2b80      	cmp	r3, #128	; 0x80
 8008bb0:	d0ef      	beq.n	8008b92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bb2:	4b26      	ldr	r3, [pc, #152]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f1c3 0307 	rsb	r3, r3, #7
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d009      	beq.n	8008bd2 <xPortStartScheduler+0xb2>
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60bb      	str	r3, [r7, #8]
 8008bd0:	e7fe      	b.n	8008bd0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bd2:	4b1e      	ldr	r3, [pc, #120]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008bda:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008be4:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008be6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bf0:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <xPortStartScheduler+0x130>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <xPortStartScheduler+0x130>)
 8008bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bfa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bfc:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <xPortStartScheduler+0x130>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <xPortStartScheduler+0x130>)
 8008c02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c08:	f000 f8d6 	bl	8008db8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c0c:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <xPortStartScheduler+0x134>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c12:	f000 f8f5 	bl	8008e00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c16:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c22:	f7ff ff69 	bl	8008af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c26:	f7ff fd81 	bl	800872c <vTaskSwitchContext>
	prvTaskExitError();
 8008c2a:	f7ff ff27 	bl	8008a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	e000ed00 	.word	0xe000ed00
 8008c3c:	410fc271 	.word	0x410fc271
 8008c40:	410fc270 	.word	0x410fc270
 8008c44:	e000e400 	.word	0xe000e400
 8008c48:	20001538 	.word	0x20001538
 8008c4c:	2000153c 	.word	0x2000153c
 8008c50:	e000ed20 	.word	0xe000ed20
 8008c54:	2000011c 	.word	0x2000011c
 8008c58:	e000ef34 	.word	0xe000ef34

08008c5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <vPortEnterCritical+0x54>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <vPortEnterCritical+0x54>)
 8008c7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c7e:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <vPortEnterCritical+0x54>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d10e      	bne.n	8008ca4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <vPortEnterCritical+0x58>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d009      	beq.n	8008ca4 <vPortEnterCritical+0x48>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	e7fe      	b.n	8008ca2 <vPortEnterCritical+0x46>
	}
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	2000011c 	.word	0x2000011c
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <vPortExitCritical+0x4c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <vPortExitCritical+0x22>
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	e7fe      	b.n	8008cd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <vPortExitCritical+0x4c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	4a08      	ldr	r2, [pc, #32]	; (8008d04 <vPortExitCritical+0x4c>)
 8008ce2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ce4:	4b07      	ldr	r3, [pc, #28]	; (8008d04 <vPortExitCritical+0x4c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <vPortExitCritical+0x3e>
 8008cec:	2300      	movs	r3, #0
 8008cee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2000011c 	.word	0x2000011c
	...

08008d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d10:	f3ef 8009 	mrs	r0, PSP
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <pxCurrentTCBConst>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	f01e 0f10 	tst.w	lr, #16
 8008d20:	bf08      	it	eq
 8008d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d34:	f380 8811 	msr	BASEPRI, r0
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f7ff fcf4 	bl	800872c <vTaskSwitchContext>
 8008d44:	f04f 0000 	mov.w	r0, #0
 8008d48:	f380 8811 	msr	BASEPRI, r0
 8008d4c:	bc09      	pop	{r0, r3}
 8008d4e:	6819      	ldr	r1, [r3, #0]
 8008d50:	6808      	ldr	r0, [r1, #0]
 8008d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d56:	f01e 0f10 	tst.w	lr, #16
 8008d5a:	bf08      	it	eq
 8008d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d60:	f380 8809 	msr	PSP, r0
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w

08008d70 <pxCurrentTCBConst>:
 8008d70:	2000140c 	.word	0x2000140c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop

08008d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d90:	f7ff fc14 	bl	80085bc <xTaskIncrementTick>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <SysTick_Handler+0x3c>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	2300      	movs	r3, #0
 8008da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <vPortSetupTimerInterrupt+0x34>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <vPortSetupTimerInterrupt+0x38>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <vPortSetupTimerInterrupt+0x3c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <vPortSetupTimerInterrupt+0x40>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	099b      	lsrs	r3, r3, #6
 8008dd4:	4a09      	ldr	r2, [pc, #36]	; (8008dfc <vPortSetupTimerInterrupt+0x44>)
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dda:	4b04      	ldr	r3, [pc, #16]	; (8008dec <vPortSetupTimerInterrupt+0x34>)
 8008ddc:	2207      	movs	r2, #7
 8008dde:	601a      	str	r2, [r3, #0]
}
 8008de0:	bf00      	nop
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	e000e010 	.word	0xe000e010
 8008df0:	e000e018 	.word	0xe000e018
 8008df4:	20000000 	.word	0x20000000
 8008df8:	10624dd3 	.word	0x10624dd3
 8008dfc:	e000e014 	.word	0xe000e014

08008e00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e10 <vPortEnableVFP+0x10>
 8008e04:	6801      	ldr	r1, [r0, #0]
 8008e06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e0a:	6001      	str	r1, [r0, #0]
 8008e0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e0e:	bf00      	nop
 8008e10:	e000ed88 	.word	0xe000ed88

08008e14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e20:	f7ff fb22 	bl	8008468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e24:	4b57      	ldr	r3, [pc, #348]	; (8008f84 <pvPortMalloc+0x170>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e2c:	f000 f90c 	bl	8009048 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e30:	4b55      	ldr	r3, [pc, #340]	; (8008f88 <pvPortMalloc+0x174>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4013      	ands	r3, r2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f040 808c 	bne.w	8008f56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01c      	beq.n	8008e7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e44:	2208      	movs	r2, #8
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d013      	beq.n	8008e7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f023 0307 	bic.w	r3, r3, #7
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <pvPortMalloc+0x6a>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	e7fe      	b.n	8008e7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d068      	beq.n	8008f56 <pvPortMalloc+0x142>
 8008e84:	4b41      	ldr	r3, [pc, #260]	; (8008f8c <pvPortMalloc+0x178>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d863      	bhi.n	8008f56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e8e:	4b40      	ldr	r3, [pc, #256]	; (8008f90 <pvPortMalloc+0x17c>)
 8008e90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e92:	4b3f      	ldr	r3, [pc, #252]	; (8008f90 <pvPortMalloc+0x17c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e98:	e004      	b.n	8008ea4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d903      	bls.n	8008eb6 <pvPortMalloc+0xa2>
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f1      	bne.n	8008e9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eb6:	4b33      	ldr	r3, [pc, #204]	; (8008f84 <pvPortMalloc+0x170>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d04a      	beq.n	8008f56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2208      	movs	r2, #8
 8008ec6:	4413      	add	r3, r2
 8008ec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	2308      	movs	r3, #8
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d91e      	bls.n	8008f20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d009      	beq.n	8008f08 <pvPortMalloc+0xf4>
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	613b      	str	r3, [r7, #16]
 8008f06:	e7fe      	b.n	8008f06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f1a:	69b8      	ldr	r0, [r7, #24]
 8008f1c:	f000 f8f6 	bl	800910c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f20:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <pvPortMalloc+0x178>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <pvPortMalloc+0x178>)
 8008f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f2e:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <pvPortMalloc+0x178>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b18      	ldr	r3, [pc, #96]	; (8008f94 <pvPortMalloc+0x180>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d203      	bcs.n	8008f42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f3a:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <pvPortMalloc+0x178>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a15      	ldr	r2, [pc, #84]	; (8008f94 <pvPortMalloc+0x180>)
 8008f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	4b10      	ldr	r3, [pc, #64]	; (8008f88 <pvPortMalloc+0x174>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f56:	f7ff fa95 	bl	8008484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d009      	beq.n	8008f78 <pvPortMalloc+0x164>
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e7fe      	b.n	8008f76 <pvPortMalloc+0x162>
	return pvReturn;
 8008f78:	69fb      	ldr	r3, [r7, #28]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3728      	adds	r7, #40	; 0x28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20002148 	.word	0x20002148
 8008f88:	20002154 	.word	0x20002154
 8008f8c:	2000214c 	.word	0x2000214c
 8008f90:	20002140 	.word	0x20002140
 8008f94:	20002150 	.word	0x20002150

08008f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d046      	beq.n	8009038 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008faa:	2308      	movs	r3, #8
 8008fac:	425b      	negs	r3, r3
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b20      	ldr	r3, [pc, #128]	; (8009040 <vPortFree+0xa8>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d109      	bne.n	8008fda <vPortFree+0x42>
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60fb      	str	r3, [r7, #12]
 8008fd8:	e7fe      	b.n	8008fd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <vPortFree+0x5e>
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	e7fe      	b.n	8008ff4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	4b11      	ldr	r3, [pc, #68]	; (8009040 <vPortFree+0xa8>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4013      	ands	r3, r2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d019      	beq.n	8009038 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d115      	bne.n	8009038 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	4b0b      	ldr	r3, [pc, #44]	; (8009040 <vPortFree+0xa8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	43db      	mvns	r3, r3
 8009016:	401a      	ands	r2, r3
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800901c:	f7ff fa24 	bl	8008468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <vPortFree+0xac>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4413      	add	r3, r2
 800902a:	4a06      	ldr	r2, [pc, #24]	; (8009044 <vPortFree+0xac>)
 800902c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800902e:	6938      	ldr	r0, [r7, #16]
 8009030:	f000 f86c 	bl	800910c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009034:	f7ff fa26 	bl	8008484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009038:	bf00      	nop
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20002154 	.word	0x20002154
 8009044:	2000214c 	.word	0x2000214c

08009048 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800904e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009052:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009054:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <prvHeapInit+0xac>)
 8009056:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3307      	adds	r3, #7
 8009066:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0307 	bic.w	r3, r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	4a1f      	ldr	r2, [pc, #124]	; (80090f4 <prvHeapInit+0xac>)
 8009078:	4413      	add	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009080:	4a1d      	ldr	r2, [pc, #116]	; (80090f8 <prvHeapInit+0xb0>)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009086:	4b1c      	ldr	r3, [pc, #112]	; (80090f8 <prvHeapInit+0xb0>)
 8009088:	2200      	movs	r2, #0
 800908a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	4413      	add	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009094:	2208      	movs	r2, #8
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4a15      	ldr	r2, [pc, #84]	; (80090fc <prvHeapInit+0xb4>)
 80090a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <prvHeapInit+0xb4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <prvHeapInit+0xb4>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a0a      	ldr	r2, [pc, #40]	; (8009100 <prvHeapInit+0xb8>)
 80090d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a09      	ldr	r2, [pc, #36]	; (8009104 <prvHeapInit+0xbc>)
 80090de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e0:	4b09      	ldr	r3, [pc, #36]	; (8009108 <prvHeapInit+0xc0>)
 80090e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090e6:	601a      	str	r2, [r3, #0]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20001540 	.word	0x20001540
 80090f8:	20002140 	.word	0x20002140
 80090fc:	20002148 	.word	0x20002148
 8009100:	20002150 	.word	0x20002150
 8009104:	2000214c 	.word	0x2000214c
 8009108:	20002154 	.word	0x20002154

0800910c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009114:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <prvInsertBlockIntoFreeList+0xac>)
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	e002      	b.n	8009120 <prvInsertBlockIntoFreeList+0x14>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d8f7      	bhi.n	800911a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4413      	add	r3, r2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d108      	bne.n	800914e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	441a      	add	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	441a      	add	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	429a      	cmp	r2, r3
 8009160:	d118      	bne.n	8009194 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <prvInsertBlockIntoFreeList+0xb0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d00d      	beq.n	800918a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	441a      	add	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e008      	b.n	800919c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800918a:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <prvInsertBlockIntoFreeList+0xb0>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e003      	b.n	800919c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d002      	beq.n	80091aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091aa:	bf00      	nop
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20002140 	.word	0x20002140
 80091bc:	20002148 	.word	0x20002148

080091c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80091c4:	2200      	movs	r2, #0
 80091c6:	4912      	ldr	r1, [pc, #72]	; (8009210 <MX_USB_Device_Init+0x50>)
 80091c8:	4812      	ldr	r0, [pc, #72]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091ca:	f7fd fdd6 	bl	8006d7a <USBD_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80091d4:	f7f7 fc98 	bl	8000b08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80091d8:	490f      	ldr	r1, [pc, #60]	; (8009218 <MX_USB_Device_Init+0x58>)
 80091da:	480e      	ldr	r0, [pc, #56]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091dc:	f7fd fdf8 	bl	8006dd0 <USBD_RegisterClass>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80091e6:	f7f7 fc8f 	bl	8000b08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80091ea:	490c      	ldr	r1, [pc, #48]	; (800921c <MX_USB_Device_Init+0x5c>)
 80091ec:	4809      	ldr	r0, [pc, #36]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091ee:	f7fd fd55 	bl	8006c9c <USBD_CDC_RegisterInterface>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80091f8:	f7f7 fc86 	bl	8000b08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80091fc:	4805      	ldr	r0, [pc, #20]	; (8009214 <MX_USB_Device_Init+0x54>)
 80091fe:	f7fd fe01 	bl	8006e04 <USBD_Start>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009208:	f7f7 fc7e 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800920c:	bf00      	nop
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000130 	.word	0x20000130
 8009214:	20002668 	.word	0x20002668
 8009218:	20000018 	.word	0x20000018
 800921c:	20000120 	.word	0x20000120

08009220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009224:	2200      	movs	r2, #0
 8009226:	4905      	ldr	r1, [pc, #20]	; (800923c <CDC_Init_FS+0x1c>)
 8009228:	4805      	ldr	r0, [pc, #20]	; (8009240 <CDC_Init_FS+0x20>)
 800922a:	f7fd fd4e 	bl	8006cca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800922e:	4905      	ldr	r1, [pc, #20]	; (8009244 <CDC_Init_FS+0x24>)
 8009230:	4803      	ldr	r0, [pc, #12]	; (8009240 <CDC_Init_FS+0x20>)
 8009232:	f7fd fd64 	bl	8006cfe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009238:	4618      	mov	r0, r3
 800923a:	bd80      	pop	{r7, pc}
 800923c:	20002d14 	.word	0x20002d14
 8009240:	20002668 	.word	0x20002668
 8009244:	2000292c 	.word	0x2000292c

08009248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800924c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800924e:	4618      	mov	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
 8009264:	4613      	mov	r3, r2
 8009266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009268:	79fb      	ldrb	r3, [r7, #7]
 800926a:	2b23      	cmp	r3, #35	; 0x23
 800926c:	d84a      	bhi.n	8009304 <CDC_Control_FS+0xac>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <CDC_Control_FS+0x1c>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	08009305 	.word	0x08009305
 8009278:	08009305 	.word	0x08009305
 800927c:	08009305 	.word	0x08009305
 8009280:	08009305 	.word	0x08009305
 8009284:	08009305 	.word	0x08009305
 8009288:	08009305 	.word	0x08009305
 800928c:	08009305 	.word	0x08009305
 8009290:	08009305 	.word	0x08009305
 8009294:	08009305 	.word	0x08009305
 8009298:	08009305 	.word	0x08009305
 800929c:	08009305 	.word	0x08009305
 80092a0:	08009305 	.word	0x08009305
 80092a4:	08009305 	.word	0x08009305
 80092a8:	08009305 	.word	0x08009305
 80092ac:	08009305 	.word	0x08009305
 80092b0:	08009305 	.word	0x08009305
 80092b4:	08009305 	.word	0x08009305
 80092b8:	08009305 	.word	0x08009305
 80092bc:	08009305 	.word	0x08009305
 80092c0:	08009305 	.word	0x08009305
 80092c4:	08009305 	.word	0x08009305
 80092c8:	08009305 	.word	0x08009305
 80092cc:	08009305 	.word	0x08009305
 80092d0:	08009305 	.word	0x08009305
 80092d4:	08009305 	.word	0x08009305
 80092d8:	08009305 	.word	0x08009305
 80092dc:	08009305 	.word	0x08009305
 80092e0:	08009305 	.word	0x08009305
 80092e4:	08009305 	.word	0x08009305
 80092e8:	08009305 	.word	0x08009305
 80092ec:	08009305 	.word	0x08009305
 80092f0:	08009305 	.word	0x08009305
 80092f4:	08009305 	.word	0x08009305
 80092f8:	08009305 	.word	0x08009305
 80092fc:	08009305 	.word	0x08009305
 8009300:	08009305 	.word	0x08009305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009304:	bf00      	nop
  }

  return (USBD_OK);
 8009306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4805      	ldr	r0, [pc, #20]	; (8009338 <CDC_Receive_FS+0x24>)
 8009322:	f7fd fcec 	bl	8006cfe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009326:	4804      	ldr	r0, [pc, #16]	; (8009338 <CDC_Receive_FS+0x24>)
 8009328:	f7fd fcfd 	bl	8006d26 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800932c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20002668 	.word	0x20002668

0800933c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2212      	movs	r2, #18
 800934c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800934e:	4b03      	ldr	r3, [pc, #12]	; (800935c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20000150 	.word	0x20000150

08009360 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2204      	movs	r2, #4
 8009370:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009372:	4b03      	ldr	r3, [pc, #12]	; (8009380 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000164 	.word	0x20000164

08009384 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d105      	bne.n	80093a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4907      	ldr	r1, [pc, #28]	; (80093b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800939a:	4808      	ldr	r0, [pc, #32]	; (80093bc <USBD_CDC_ProductStrDescriptor+0x38>)
 800939c:	f7fe fccc 	bl	8007d38 <USBD_GetString>
 80093a0:	e004      	b.n	80093ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4904      	ldr	r1, [pc, #16]	; (80093b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80093a6:	4805      	ldr	r0, [pc, #20]	; (80093bc <USBD_CDC_ProductStrDescriptor+0x38>)
 80093a8:	f7fe fcc6 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ac:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200030fc 	.word	0x200030fc
 80093bc:	08009c44 	.word	0x08009c44

080093c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	4904      	ldr	r1, [pc, #16]	; (80093e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80093d0:	4804      	ldr	r0, [pc, #16]	; (80093e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80093d2:	f7fe fcb1 	bl	8007d38 <USBD_GetString>
  return USBD_StrDesc;
 80093d6:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	200030fc 	.word	0x200030fc
 80093e4:	08009c5c 	.word	0x08009c5c

080093e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	221a      	movs	r2, #26
 80093f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093fa:	f000 f843 	bl	8009484 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80093fe:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000168 	.word	0x20000168

0800940c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d105      	bne.n	800942a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	4907      	ldr	r1, [pc, #28]	; (8009440 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009422:	4808      	ldr	r0, [pc, #32]	; (8009444 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009424:	f7fe fc88 	bl	8007d38 <USBD_GetString>
 8009428:	e004      	b.n	8009434 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4904      	ldr	r1, [pc, #16]	; (8009440 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800942e:	4805      	ldr	r0, [pc, #20]	; (8009444 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009430:	f7fe fc82 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	200030fc 	.word	0x200030fc
 8009444:	08009c70 	.word	0x08009c70

08009448 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	6039      	str	r1, [r7, #0]
 8009452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d105      	bne.n	8009466 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4907      	ldr	r1, [pc, #28]	; (800947c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800945e:	4808      	ldr	r0, [pc, #32]	; (8009480 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009460:	f7fe fc6a 	bl	8007d38 <USBD_GetString>
 8009464:	e004      	b.n	8009470 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4904      	ldr	r1, [pc, #16]	; (800947c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800946a:	4805      	ldr	r0, [pc, #20]	; (8009480 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800946c:	f7fe fc64 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200030fc 	.word	0x200030fc
 8009480:	08009c7c 	.word	0x08009c7c

08009484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <Get_SerialNum+0x44>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <Get_SerialNum+0x48>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009496:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <Get_SerialNum+0x4c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094aa:	2208      	movs	r2, #8
 80094ac:	4909      	ldr	r1, [pc, #36]	; (80094d4 <Get_SerialNum+0x50>)
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f814 	bl	80094dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094b4:	2204      	movs	r2, #4
 80094b6:	4908      	ldr	r1, [pc, #32]	; (80094d8 <Get_SerialNum+0x54>)
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f000 f80f 	bl	80094dc <IntToUnicode>
  }
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	1fff7590 	.word	0x1fff7590
 80094cc:	1fff7594 	.word	0x1fff7594
 80094d0:	1fff7598 	.word	0x1fff7598
 80094d4:	2000016a 	.word	0x2000016a
 80094d8:	2000017a 	.word	0x2000017a

080094dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094ee:	2300      	movs	r3, #0
 80094f0:	75fb      	strb	r3, [r7, #23]
 80094f2:	e027      	b.n	8009544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	0f1b      	lsrs	r3, r3, #28
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d80b      	bhi.n	8009514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0f1b      	lsrs	r3, r3, #28
 8009500:	b2da      	uxtb	r2, r3
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	4619      	mov	r1, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	440b      	add	r3, r1
 800950c:	3230      	adds	r2, #48	; 0x30
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e00a      	b.n	800952a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0f1b      	lsrs	r3, r3, #28
 8009518:	b2da      	uxtb	r2, r3
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	4619      	mov	r1, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	440b      	add	r3, r1
 8009524:	3237      	adds	r2, #55	; 0x37
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	3301      	adds	r3, #1
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	4413      	add	r3, r2
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	3301      	adds	r3, #1
 8009542:	75fb      	strb	r3, [r7, #23]
 8009544:	7dfa      	ldrb	r2, [r7, #23]
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	429a      	cmp	r2, r3
 800954a:	d3d3      	bcc.n	80094f4 <IntToUnicode+0x18>
  }
}
 800954c:	bf00      	nop
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	; 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009560:	f107 0314 	add.w	r3, r7, #20
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	609a      	str	r2, [r3, #8]
 800956c:	60da      	str	r2, [r3, #12]
 800956e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1a      	ldr	r2, [pc, #104]	; (80095e0 <HAL_PCD_MspInit+0x88>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d12d      	bne.n	80095d6 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800957a:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 800957c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957e:	4a19      	ldr	r2, [pc, #100]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 8009580:	f043 0301 	orr.w	r3, r3, #1
 8009584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009586:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 8009588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009592:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009598:	2303      	movs	r3, #3
 800959a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959c:	2300      	movs	r3, #0
 800959e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095a0:	f107 0314 	add.w	r3, r7, #20
 80095a4:	4619      	mov	r1, r3
 80095a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095aa:	f7f8 fb65 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	4a0c      	ldr	r2, [pc, #48]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 80095b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095b8:	6593      	str	r3, [r2, #88]	; 0x58
 80095ba:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <HAL_PCD_MspInit+0x8c>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80095c6:	2200      	movs	r2, #0
 80095c8:	2105      	movs	r1, #5
 80095ca:	2014      	movs	r0, #20
 80095cc:	f7f8 f8ba 	bl	8001744 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80095d0:	2014      	movs	r0, #20
 80095d2:	f7f8 f8d1 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095d6:	bf00      	nop
 80095d8:	3728      	adds	r7, #40	; 0x28
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	40005c00 	.word	0x40005c00
 80095e4:	40021000 	.word	0x40021000

080095e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f7fd fc49 	bl	8006e96 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800961e:	78fb      	ldrb	r3, [r7, #3]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	015b      	lsls	r3, r3, #5
 8009624:	4413      	add	r3, r2
 8009626:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	4619      	mov	r1, r3
 8009630:	f7fd fc7c 	bl	8006f2c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	015b      	lsls	r3, r3, #5
 8009654:	4413      	add	r3, r2
 8009656:	333c      	adds	r3, #60	; 0x3c
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	4619      	mov	r1, r3
 800965e:	f7fd fcd6 	bl	800700e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fde9 	bl	8007250 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b02      	cmp	r3, #2
 8009698:	d001      	beq.n	800969e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800969a:	f7f7 fa35 	bl	8000b08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096a4:	7bfa      	ldrb	r2, [r7, #15]
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd fd96 	bl	80071da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd fd4f 	bl	8007158 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fd fd91 	bl	80071fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096e0:	4b04      	ldr	r3, [pc, #16]	; (80096f4 <HAL_PCD_SuspendCallback+0x30>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	4a03      	ldr	r2, [pc, #12]	; (80096f4 <HAL_PCD_SuspendCallback+0x30>)
 80096e6:	f043 0306 	orr.w	r3, r3, #6
 80096ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	e000ed00 	.word	0xe000ed00

080096f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <HAL_PCD_ResumeCallback+0x34>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	4a07      	ldr	r2, [pc, #28]	; (800972c <HAL_PCD_ResumeCallback+0x34>)
 800970e:	f023 0306 	bic.w	r3, r3, #6
 8009712:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009714:	f000 f9f6 	bl	8009b04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd fd80 	bl	8007224 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	e000ed00 	.word	0xe000ed00

08009730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009738:	4a2b      	ldr	r2, [pc, #172]	; (80097e8 <USBD_LL_Init+0xb8>)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a29      	ldr	r2, [pc, #164]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009744:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009748:	4b27      	ldr	r3, [pc, #156]	; (80097e8 <USBD_LL_Init+0xb8>)
 800974a:	4a28      	ldr	r2, [pc, #160]	; (80097ec <USBD_LL_Init+0xbc>)
 800974c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800974e:	4b26      	ldr	r3, [pc, #152]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009750:	2208      	movs	r2, #8
 8009752:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009754:	4b24      	ldr	r3, [pc, #144]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009756:	2202      	movs	r2, #2
 8009758:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <USBD_LL_Init+0xb8>)
 800975c:	2202      	movs	r2, #2
 800975e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009760:	4b21      	ldr	r3, [pc, #132]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009762:	2200      	movs	r2, #0
 8009764:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009766:	4b20      	ldr	r3, [pc, #128]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009768:	2200      	movs	r2, #0
 800976a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800976c:	4b1e      	ldr	r3, [pc, #120]	; (80097e8 <USBD_LL_Init+0xb8>)
 800976e:	2200      	movs	r2, #0
 8009770:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009772:	4b1d      	ldr	r3, [pc, #116]	; (80097e8 <USBD_LL_Init+0xb8>)
 8009774:	2200      	movs	r2, #0
 8009776:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009778:	481b      	ldr	r0, [pc, #108]	; (80097e8 <USBD_LL_Init+0xb8>)
 800977a:	f7f8 fc17 	bl	8001fac <HAL_PCD_Init>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009784:	f7f7 f9c0 	bl	8000b08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800978e:	2318      	movs	r3, #24
 8009790:	2200      	movs	r2, #0
 8009792:	2100      	movs	r1, #0
 8009794:	f7f9 fab8 	bl	8002d08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800979e:	2358      	movs	r3, #88	; 0x58
 80097a0:	2200      	movs	r2, #0
 80097a2:	2180      	movs	r1, #128	; 0x80
 80097a4:	f7f9 fab0 	bl	8002d08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097ae:	23c0      	movs	r3, #192	; 0xc0
 80097b0:	2200      	movs	r2, #0
 80097b2:	2181      	movs	r1, #129	; 0x81
 80097b4:	f7f9 faa8 	bl	8002d08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80097c2:	2200      	movs	r2, #0
 80097c4:	2101      	movs	r1, #1
 80097c6:	f7f9 fa9f 	bl	8002d08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097d4:	2200      	movs	r2, #0
 80097d6:	2182      	movs	r1, #130	; 0x82
 80097d8:	f7f9 fa96 	bl	8002d08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200032fc 	.word	0x200032fc
 80097ec:	40005c00 	.word	0x40005c00

080097f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009806:	4618      	mov	r0, r3
 8009808:	f7f8 fc8b 	bl	8002122 <HAL_PCD_Start>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f97c 	bl	8009b10 <USBD_Get_USB_Status>
 8009818:	4603      	mov	r3, r0
 800981a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800981c:	7bbb      	ldrb	r3, [r7, #14]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b084      	sub	sp, #16
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	4608      	mov	r0, r1
 8009830:	4611      	mov	r1, r2
 8009832:	461a      	mov	r2, r3
 8009834:	4603      	mov	r3, r0
 8009836:	70fb      	strb	r3, [r7, #3]
 8009838:	460b      	mov	r3, r1
 800983a:	70bb      	strb	r3, [r7, #2]
 800983c:	4613      	mov	r3, r2
 800983e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800984e:	78bb      	ldrb	r3, [r7, #2]
 8009850:	883a      	ldrh	r2, [r7, #0]
 8009852:	78f9      	ldrb	r1, [r7, #3]
 8009854:	f7f8 fdfa 	bl	800244c <HAL_PCD_EP_Open>
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985c:	7bfb      	ldrb	r3, [r7, #15]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f956 	bl	8009b10 <USBD_Get_USB_Status>
 8009864:	4603      	mov	r3, r0
 8009866:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009868:	7bbb      	ldrb	r3, [r7, #14]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b084      	sub	sp, #16
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800988c:	78fa      	ldrb	r2, [r7, #3]
 800988e:	4611      	mov	r1, r2
 8009890:	4618      	mov	r0, r3
 8009892:	f7f8 fe3b 	bl	800250c <HAL_PCD_EP_Close>
 8009896:	4603      	mov	r3, r0
 8009898:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f937 	bl	8009b10 <USBD_Get_USB_Status>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7f8 fee6 	bl	80026a0 <HAL_PCD_EP_SetStall>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f918 	bl	8009b10 <USBD_Get_USB_Status>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7f8 ff21 	bl	8002754 <HAL_PCD_EP_ClrStall>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 f8f9 	bl	8009b10 <USBD_Get_USB_Status>
 800991e:	4603      	mov	r3, r0
 8009920:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009922:	7bbb      	ldrb	r3, [r7, #14]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800993e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009944:	2b00      	cmp	r3, #0
 8009946:	da08      	bge.n	800995a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	015b      	lsls	r3, r3, #5
 8009952:	4413      	add	r3, r2
 8009954:	332a      	adds	r3, #42	; 0x2a
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	e008      	b.n	800996c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	015b      	lsls	r3, r3, #5
 8009964:	4413      	add	r3, r2
 8009966:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800996a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009992:	78fa      	ldrb	r2, [r7, #3]
 8009994:	4611      	mov	r1, r2
 8009996:	4618      	mov	r0, r3
 8009998:	f7f8 fd33 	bl	8002402 <HAL_PCD_SetAddress>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f8b4 	bl	8009b10 <USBD_Get_USB_Status>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	461a      	mov	r2, r3
 80099c2:	460b      	mov	r3, r1
 80099c4:	72fb      	strb	r3, [r7, #11]
 80099c6:	4613      	mov	r3, r2
 80099c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099d8:	893b      	ldrh	r3, [r7, #8]
 80099da:	7af9      	ldrb	r1, [r7, #11]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	f7f8 fe26 	bl	800262e <HAL_PCD_EP_Transmit>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f891 	bl	8009b10 <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80099f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	461a      	mov	r2, r3
 8009a08:	460b      	mov	r3, r1
 8009a0a:	72fb      	strb	r3, [r7, #11]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a1e:	893b      	ldrh	r3, [r7, #8]
 8009a20:	7af9      	ldrb	r1, [r7, #11]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	f7f8 fdb4 	bl	8002590 <HAL_PCD_EP_Receive>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f86e 	bl	8009b10 <USBD_Get_USB_Status>
 8009a34:	4603      	mov	r3, r0
 8009a36:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009a38:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f8 fdd3 	bl	8002604 <HAL_PCD_EP_GetRxCount>
 8009a5e:	4603      	mov	r3, r0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <HAL_PCDEx_LPM_Callback+0x18>
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d013      	beq.n	8009aa6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8009a7e:	e023      	b.n	8009ac8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009a88:	f000 f83c 	bl	8009b04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4a0f      	ldr	r2, [pc, #60]	; (8009ad0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009a92:	f023 0306 	bic.w	r3, r3, #6
 8009a96:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd fbc0 	bl	8007224 <USBD_LL_Resume>
    break;
 8009aa4:	e010      	b.n	8009ac8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fd fba4 	bl	80071fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d005      	beq.n	8009ac6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ac0:	f043 0306 	orr.w	r3, r3, #6
 8009ac4:	6113      	str	r3, [r2, #16]
    break;   
 8009ac6:	bf00      	nop
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	e000ed00 	.word	0xe000ed00

08009ad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009adc:	4b03      	ldr	r3, [pc, #12]	; (8009aec <USBD_static_malloc+0x18>)
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20002158 	.word	0x20002158

08009af0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]

}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b08:	f7f6 fbe4 	bl	80002d4 <SystemClock_Config>
}
 8009b0c:	bf00      	nop
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d817      	bhi.n	8009b54 <USBD_Get_USB_Status+0x44>
 8009b24:	a201      	add	r2, pc, #4	; (adr r2, 8009b2c <USBD_Get_USB_Status+0x1c>)
 8009b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2a:	bf00      	nop
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b43 	.word	0x08009b43
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b4f 	.word	0x08009b4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b40:	e00b      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b42:	2302      	movs	r3, #2
 8009b44:	73fb      	strb	r3, [r7, #15]
    break;
 8009b46:	e008      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e005      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b4e:	2302      	movs	r3, #2
 8009b50:	73fb      	strb	r3, [r7, #15]
    break;
 8009b52:	e002      	b.n	8009b5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b54:	2302      	movs	r3, #2
 8009b56:	73fb      	strb	r3, [r7, #15]
    break;
 8009b58:	bf00      	nop
  }
  return usb_status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <__libc_init_array>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	4e0d      	ldr	r6, [pc, #52]	; (8009ba0 <__libc_init_array+0x38>)
 8009b6c:	4c0d      	ldr	r4, [pc, #52]	; (8009ba4 <__libc_init_array+0x3c>)
 8009b6e:	1ba4      	subs	r4, r4, r6
 8009b70:	10a4      	asrs	r4, r4, #2
 8009b72:	2500      	movs	r5, #0
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d109      	bne.n	8009b8c <__libc_init_array+0x24>
 8009b78:	4e0b      	ldr	r6, [pc, #44]	; (8009ba8 <__libc_init_array+0x40>)
 8009b7a:	4c0c      	ldr	r4, [pc, #48]	; (8009bac <__libc_init_array+0x44>)
 8009b7c:	f000 f820 	bl	8009bc0 <_init>
 8009b80:	1ba4      	subs	r4, r4, r6
 8009b82:	10a4      	asrs	r4, r4, #2
 8009b84:	2500      	movs	r5, #0
 8009b86:	42a5      	cmp	r5, r4
 8009b88:	d105      	bne.n	8009b96 <__libc_init_array+0x2e>
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b90:	4798      	blx	r3
 8009b92:	3501      	adds	r5, #1
 8009b94:	e7ee      	b.n	8009b74 <__libc_init_array+0xc>
 8009b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b9a:	4798      	blx	r3
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	e7f2      	b.n	8009b86 <__libc_init_array+0x1e>
 8009ba0:	08009ca4 	.word	0x08009ca4
 8009ba4:	08009ca4 	.word	0x08009ca4
 8009ba8:	08009ca4 	.word	0x08009ca4
 8009bac:	08009ca8 	.word	0x08009ca8

08009bb0 <memset>:
 8009bb0:	4402      	add	r2, r0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d100      	bne.n	8009bba <memset+0xa>
 8009bb8:	4770      	bx	lr
 8009bba:	f803 1b01 	strb.w	r1, [r3], #1
 8009bbe:	e7f9      	b.n	8009bb4 <memset+0x4>

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
