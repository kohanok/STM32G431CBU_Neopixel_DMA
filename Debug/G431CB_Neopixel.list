
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007adc  08007adc  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08007adc  08007adc  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007adc  08007adc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000180  08007c64  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a5c  08007c64  00021a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b827  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003774  00000000  00000000  0003b9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  00040550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020c4f  00000000  00000000  000417b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012613  00000000  00000000  00062407  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5356  00000000  00000000  00074a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000529c  00000000  00000000  00139dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a6c 	.word	0x08007a6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	08007a6c 	.word	0x08007a6c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fcdc 	bl	8000bda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f875 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f9db 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f9a7 	bl	800057c <MX_DMA_Init>
  MX_TIM2_Init();
 800022e:	f000 f8d5 	bl	80003dc <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000232:	f006 ff1b 	bl	800706c <MX_USB_Device_Init>
  MX_TIM17_Init();
 8000236:	f000 f929 	bl	800048c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 800023a:	f000 fbd5 	bl	80009e8 <ws2812Init>
  ws2812Begin(LED_CNT);
 800023e:	2012      	movs	r0, #18
 8000240:	f000 fbe4 	bl	8000a0c <ws2812Begin>

  uint32_t pre_time;
  uint32_t led_index = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	60bb      	str	r3, [r7, #8]
  int32_t  led_index_pre = -1;
 8000248:	f04f 33ff 	mov.w	r3, #4294967295
 800024c:	607b      	str	r3, [r7, #4]
  uint8_t led_color = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (millis()-pre_time >= 50)
 8000252:	f000 fa35 	bl	80006c0 <millis>
 8000256:	4602      	mov	r2, r0
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	1ad3      	subs	r3, r2, r3
 800025c:	2b31      	cmp	r3, #49	; 0x31
 800025e:	d9f8      	bls.n	8000252 <main+0x3a>
    {

      pre_time = millis();
 8000260:	f000 fa2e 	bl	80006c0 <millis>
 8000264:	60f8      	str	r0, [r7, #12]
      HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026a:	4825      	ldr	r0, [pc, #148]	; (8000300 <main+0xe8>)
 800026c:	f001 fa42 	bl	80016f4 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000274:	4823      	ldr	r0, [pc, #140]	; (8000304 <main+0xec>)
 8000276:	f001 fa3d 	bl	80016f4 <HAL_GPIO_TogglePin>

      if (led_color == 0) ws2812SetColor(led_index, 255, 0, 0);
 800027a:	78fb      	ldrb	r3, [r7, #3]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d105      	bne.n	800028c <main+0x74>
 8000280:	2300      	movs	r3, #0
 8000282:	2200      	movs	r2, #0
 8000284:	21ff      	movs	r1, #255	; 0xff
 8000286:	68b8      	ldr	r0, [r7, #8]
 8000288:	f000 fbf0 	bl	8000a6c <ws2812SetColor>
      if (led_color == 1) ws2812SetColor(led_index, 0, 255, 0);
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d105      	bne.n	800029e <main+0x86>
 8000292:	2300      	movs	r3, #0
 8000294:	22ff      	movs	r2, #255	; 0xff
 8000296:	2100      	movs	r1, #0
 8000298:	68b8      	ldr	r0, [r7, #8]
 800029a:	f000 fbe7 	bl	8000a6c <ws2812SetColor>
      if (led_color == 2) ws2812SetColor(led_index, 0, 0, 255);
 800029e:	78fb      	ldrb	r3, [r7, #3]
 80002a0:	2b02      	cmp	r3, #2
 80002a2:	d105      	bne.n	80002b0 <main+0x98>
 80002a4:	23ff      	movs	r3, #255	; 0xff
 80002a6:	2200      	movs	r2, #0
 80002a8:	2100      	movs	r1, #0
 80002aa:	68b8      	ldr	r0, [r7, #8]
 80002ac:	f000 fbde 	bl	8000a6c <ws2812SetColor>

      if (led_index_pre >= 0)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	db05      	blt.n	80002c2 <main+0xaa>
      {
        ws2812SetColor(led_index_pre, 0, 0, 0);
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	2300      	movs	r3, #0
 80002ba:	2200      	movs	r2, #0
 80002bc:	2100      	movs	r1, #0
 80002be:	f000 fbd5 	bl	8000a6c <ws2812SetColor>
      }
      led_index_pre = led_index;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	607b      	str	r3, [r7, #4]
      led_index = (led_index + 1) % 18;
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <main+0xf0>)
 80002cc:	fba3 1302 	umull	r1, r3, r3, r2
 80002d0:	0899      	lsrs	r1, r3, #2
 80002d2:	460b      	mov	r3, r1
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	440b      	add	r3, r1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	60bb      	str	r3, [r7, #8]

      if (led_index == 0)
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1b6      	bne.n	8000252 <main+0x3a>
      {
        led_color = (led_color + 1) % 3;
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <main+0xf4>)
 80002ea:	fb83 3102 	smull	r3, r1, r3, r2
 80002ee:	17d3      	asrs	r3, r2, #31
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	460b      	mov	r3, r1
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	440b      	add	r3, r1
 80002f8:	1ad1      	subs	r1, r2, r3
 80002fa:	460b      	mov	r3, r1
 80002fc:	70fb      	strb	r3, [r7, #3]
    if (millis()-pre_time >= 50)
 80002fe:	e7a8      	b.n	8000252 <main+0x3a>
 8000300:	48000400 	.word	0x48000400
 8000304:	48000800 	.word	0x48000800
 8000308:	38e38e39 	.word	0x38e38e39
 800030c:	55555556 	.word	0x55555556

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b0a4      	sub	sp, #144	; 0x90
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800031a:	2238      	movs	r2, #56	; 0x38
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f007 fb9c 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2244      	movs	r2, #68	; 0x44
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f007 fb8e 	bl	8007a5c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000340:	2000      	movs	r0, #0
 8000342:	f002 f907 	bl	8002554 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000346:	2321      	movs	r3, #33	; 0x21
 8000348:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000350:	2301      	movs	r3, #1
 8000352:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000358:	2303      	movs	r3, #3
 800035a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800035c:	2304      	movs	r3, #4
 800035e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000360:	2355      	movs	r3, #85	; 0x55
 8000362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000366:	2302      	movs	r3, #2
 8000368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800036c:	2302      	movs	r3, #2
 800036e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000372:	2302      	movs	r3, #2
 8000374:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800037c:	4618      	mov	r0, r3
 800037e:	f002 f98d 	bl	800269c <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000388:	f000 f9a1 	bl	80006ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2303      	movs	r3, #3
 8000392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80003a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003a4:	2108      	movs	r1, #8
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fc90 	bl	8002ccc <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003b2:	f000 f98c 	bl	80006ce <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003bc:	2300      	movs	r3, #0
 80003be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fe62 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003ce:	f000 f97e 	bl	80006ce <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3790      	adds	r7, #144	; 0x90
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	f107 031c 	add.w	r3, r7, #28
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ee:	463b      	mov	r3, r7
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <MX_TIM2_Init+0xac>)
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000408:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_TIM2_Init+0xac>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM2_Init+0xac>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM2_Init+0xac>)
 8000416:	22d4      	movs	r2, #212	; 0xd4
 8000418:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM2_Init+0xac>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM2_Init+0xac>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <MX_TIM2_Init+0xac>)
 8000428:	f003 f877 	bl	800351a <HAL_TIM_PWM_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000432:	f000 f94c 	bl	80006ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043e:	f107 031c 	add.w	r3, r7, #28
 8000442:	4619      	mov	r1, r3
 8000444:	4810      	ldr	r0, [pc, #64]	; (8000488 <MX_TIM2_Init+0xac>)
 8000446:	f004 f84f 	bl	80044e8 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000450:	f000 f93d 	bl	80006ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000454:	2360      	movs	r3, #96	; 0x60
 8000456:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000464:	463b      	mov	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	4619      	mov	r1, r3
 800046a:	4807      	ldr	r0, [pc, #28]	; (8000488 <MX_TIM2_Init+0xac>)
 800046c:	f003 fa90 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000476:	f000 f92a 	bl	80006ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800047a:	4803      	ldr	r0, [pc, #12]	; (8000488 <MX_TIM2_Init+0xac>)
 800047c:	f000 f9f8 	bl	8000870 <HAL_TIM_MspPostInit>

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	; 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000aa0 	.word	0x20000aa0

0800048c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b094      	sub	sp, #80	; 0x50
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000492:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004a6:	463b      	mov	r3, r7
 80004a8:	2234      	movs	r2, #52	; 0x34
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 fad5 	bl	8007a5c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80004b2:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004b4:	4a30      	ldr	r2, [pc, #192]	; (8000578 <MX_TIM17_Init+0xec>)
 80004b6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80004b8:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004c6:	22d4      	movs	r2, #212	; 0xd4
 80004c8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80004dc:	4825      	ldr	r0, [pc, #148]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004de:	f002 ffc5 	bl	800346c <HAL_TIM_Base_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80004e8:	f000 f8f1 	bl	80006ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80004ec:	4821      	ldr	r0, [pc, #132]	; (8000574 <MX_TIM17_Init+0xe8>)
 80004ee:	f003 f814 	bl	800351a <HAL_TIM_PWM_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80004f8:	f000 f8e9 	bl	80006ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fc:	2360      	movs	r3, #96	; 0x60
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000504:	2300      	movs	r3, #0
 8000506:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000508:	2300      	movs	r3, #0
 800050a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000514:	2300      	movs	r3, #0
 8000516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800051c:	2200      	movs	r2, #0
 800051e:	4619      	mov	r1, r3
 8000520:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_TIM17_Init+0xe8>)
 8000522:	f003 fa35 	bl	8003990 <HAL_TIM_PWM_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800052c:	f000 f8cf 	bl	80006ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000548:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <MX_TIM17_Init+0xe8>)
 8000558:	f004 f848 	bl	80045ec <HAL_TIMEx_ConfigBreakDeadTime>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000562:	f000 f8b4 	bl	80006ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <MX_TIM17_Init+0xe8>)
 8000568:	f000 f982 	bl	8000870 <HAL_TIM_MspPostInit>

}
 800056c:	bf00      	nop
 800056e:	3750      	adds	r7, #80	; 0x50
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000a54 	.word	0x20000a54
 8000578:	40014800 	.word	0x40014800

0800057c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_DMA_Init+0x60>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <MX_DMA_Init+0x60>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6493      	str	r3, [r2, #72]	; 0x48
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_DMA_Init+0x60>)
 8000590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <MX_DMA_Init+0x60>)
 800059c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <MX_DMA_Init+0x60>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6493      	str	r3, [r2, #72]	; 0x48
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <MX_DMA_Init+0x60>)
 80005a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200b      	movs	r0, #11
 80005b8:	f000 fc5b 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005bc:	200b      	movs	r0, #11
 80005be:	f000 fc72 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200c      	movs	r0, #12
 80005c8:	f000 fc53 	bl	8000e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005cc:	200c      	movs	r0, #12
 80005ce:	f000 fc6a 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <MX_GPIO_Init+0xd4>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <MX_GPIO_Init+0xd4>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <MX_GPIO_Init+0xd4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0320 	and.w	r3, r3, #32
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <MX_GPIO_Init+0xd4>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_GPIO_Init+0xd4>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_GPIO_Init+0xd4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	4816      	ldr	r0, [pc, #88]	; (80006b8 <MX_GPIO_Init+0xd8>)
 800065e:	f001 f831 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000668:	4814      	ldr	r0, [pc, #80]	; (80006bc <MX_GPIO_Init+0xdc>)
 800066a:	f001 f82b 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_GPIO_Init+0xd8>)
 8000688:	f000 fe9a 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 800068c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0xdc>)
 80006a6:	f000 fe8b 	bl	80013c0 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000400 	.word	0x48000400

080006c0 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006c4:	f000 faee 	bl	8000ca4 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}

080006ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40007000 	.word	0x40007000

080006fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6613      	str	r3, [r2, #96]	; 0x60
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000732:	f7ff ffd3 	bl	80006dc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000754:	d135      	bne.n	80007c2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_TIM_PWM_MspInit+0x88>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <HAL_TIM_PWM_MspInit+0x88>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6593      	str	r3, [r2, #88]	; 0x58
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_TIM_PWM_MspInit+0x88>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <HAL_TIM_PWM_MspInit+0x90>)
 8000772:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000776:	2238      	movs	r2, #56	; 0x38
 8000778:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 800077c:	2210      	movs	r2, #16
 800077e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 800078e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000792:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 800079c:	2220      	movs	r2, #32
 800079e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 80007a8:	f000 fb98 	bl	8000edc <HAL_DMA_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80007b2:	f7ff ff8c 	bl	80006ce <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_TIM_PWM_MspInit+0x8c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	200009f4 	.word	0x200009f4
 80007d4:	40020008 	.word	0x40020008

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <HAL_TIM_Base_MspInit+0x88>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d135      	bne.n	8000856 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80007ea:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_TIM_Base_MspInit+0x8c>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <HAL_TIM_Base_MspInit+0x8c>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	6613      	str	r3, [r2, #96]	; 0x60
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_TIM_Base_MspInit+0x8c>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <HAL_TIM_Base_MspInit+0x94>)
 8000806:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 800080a:	2254      	movs	r2, #84	; 0x54
 800080c:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000810:	2210      	movs	r2, #16
 8000812:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000830:	2220      	movs	r2, #32
 8000832:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 800083c:	f000 fb4e 	bl	8000edc <HAL_DMA_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000846:	f7ff ff42 	bl	80006ce <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <HAL_TIM_Base_MspInit+0x90>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40014800 	.word	0x40014800
 8000864:	40021000 	.word	0x40021000
 8000868:	20000aec 	.word	0x20000aec
 800086c:	4002001c 	.word	0x4002001c

08000870 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000890:	d11d      	bne.n	80008ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008aa:	2301      	movs	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008ba:	2301      	movs	r3, #1
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fd7a 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80008cc:	e021      	b.n	8000912 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a13      	ldr	r2, [pc, #76]	; (8000920 <HAL_TIM_MspPostInit+0xb0>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d11c      	bne.n	8000912 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_TIM_MspPostInit+0xac>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f000 fd57 	bl	80013c0 <HAL_GPIO_Init>
}
 8000912:	bf00      	nop
 8000914:	3728      	adds	r7, #40	; 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	40014800 	.word	0x40014800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f982 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Channel1_IRQHandler+0x10>)
 8000986:	f000 fbcc 	bl	8001122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200009f4 	.word	0x200009f4

08000994 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <DMA1_Channel2_IRQHandler+0x10>)
 800099a:	f000 fbc2 	bl	8001122 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000aec 	.word	0x20000aec

080009a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USB_LP_IRQHandler+0x10>)
 80009ae:	f000 ff97 	bl	80018e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200017e8 	.word	0x200017e8

080009bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x28>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x28>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0x28>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	609a      	str	r2, [r3, #8]
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 80009ec:	f240 6232 	movw	r2, #1586	; 0x632
 80009f0:	2100      	movs	r1, #0
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <ws2812Init+0x1c>)
 80009f4:	f007 f832 	bl	8007a5c <memset>
  is_init = true;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <ws2812Init+0x20>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

  return true;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001a0 	.word	0x200001a0
 8000a08:	2000019c 	.word	0x2000019c

08000a0c <ws2812Begin>:

void ws2812Begin(uint32_t led_cnt)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  ws2812.led_cnt = led_cnt;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <ws2812Begin+0x50>)
 8000a1a:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.led_cnt) * 1);
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <ws2812Begin+0x50>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	3332      	adds	r3, #50	; 0x32
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <ws2812Begin+0x54>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <ws2812Begin+0x58>)
 8000a34:	f002 fdc8 	bl	80035c8 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.led_cnt) * 1);
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <ws2812Begin+0x50>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	3332      	adds	r3, #50	; 0x32
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <ws2812Begin+0x54>)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <ws2812Begin+0x5c>)
 8000a50:	f002 fdba 	bl	80035c8 <HAL_TIM_PWM_Start_DMA>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000b4c 	.word	0x20000b4c
 8000a60:	200001a0 	.word	0x200001a0
 8000a64:	20000aa0 	.word	0x20000aa0
 8000a68:	20000a54 	.word	0x20000a54

08000a6c <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b08b      	sub	sp, #44	; 0x2c
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	70fb      	strb	r3, [r7, #3]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	70bb      	strb	r3, [r7, #2]
 8000a82:	4613      	mov	r3, r2
 8000a84:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8a:	e03e      	b.n	8000b0a <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8000a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	da06      	bge.n	8000aa2 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8000a94:	f107 0218 	add.w	r2, r7, #24
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	4413      	add	r3, r2
 8000a9c:	2287      	movs	r2, #135	; 0x87
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e005      	b.n	8000aae <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8000aa2:	f107 0218 	add.w	r2, r7, #24
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2243      	movs	r2, #67	; 0x43
 8000aac:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8000ab4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da06      	bge.n	8000aca <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	4413      	add	r3, r2
 8000ac4:	2287      	movs	r2, #135	; 0x87
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e005      	b.n	8000ad6 <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8000aca:	f107 0210 	add.w	r2, r7, #16
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	4413      	add	r3, r2
 8000ad2:	2243      	movs	r2, #67	; 0x43
 8000ad4:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8000ad6:	78bb      	ldrb	r3, [r7, #2]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8000adc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	da06      	bge.n	8000af2 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8000ae4:	f107 0208 	add.w	r2, r7, #8
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	4413      	add	r3, r2
 8000aec:	2287      	movs	r2, #135	; 0x87
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e005      	b.n	8000afe <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8000af2:	f107 0208 	add.w	r2, r7, #8
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	4413      	add	r3, r2
 8000afa:	2243      	movs	r2, #67	; 0x43
 8000afc:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8000afe:	787b      	ldrb	r3, [r7, #1]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	3301      	adds	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	2b07      	cmp	r3, #7
 8000b0e:	ddbd      	ble.n	8000a8c <ws2812SetColor+0x20>
  }

  offset = 50;
 8000b10:	2332      	movs	r3, #50	; 0x32
 8000b12:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <ws2812SetColor+0x118>)
 8000b26:	4413      	add	r3, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	cb03      	ldmia	r3!, {r0, r1}
 8000b30:	6010      	str	r0, [r2, #0]
 8000b32:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	4413      	add	r3, r2
 8000b44:	3308      	adds	r3, #8
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <ws2812SetColor+0x118>)
 8000b48:	4413      	add	r3, r2
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	cb03      	ldmia	r3!, {r0, r1}
 8000b52:	6010      	str	r0, [r2, #0]
 8000b54:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	461a      	mov	r2, r3
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	4413      	add	r3, r2
 8000b66:	3310      	adds	r3, #16
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <ws2812SetColor+0x118>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	cb03      	ldmia	r3!, {r0, r1}
 8000b74:	6010      	str	r0, [r2, #0]
 8000b76:	6051      	str	r1, [r2, #4]
}
 8000b78:	bf00      	nop
 8000b7a:	372c      	adds	r7, #44	; 0x2c
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200001a0 	.word	0x200001a0

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ff03 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f006 ff2d 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fb2d 	bl	8000218 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000bcc:	08007ae4 	.word	0x08007ae4
  ldr r2, =_sbss
 8000bd0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000bd4:	20001a5c 	.word	0x20001a5c

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>

08000bda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f939 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f80e 	bl	8000c0c <HAL_InitTick>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	e001      	b.n	8000c00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfc:	f7ff fd7e 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c00:	79fb      	ldrb	r3, [r7, #7]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_InitTick+0x68>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d022      	beq.n	8000c66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_InitTick+0x6c>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_InitTick+0x68>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f944 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10f      	bne.n	8000c60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d809      	bhi.n	8000c5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c46:	2200      	movs	r2, #0
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4e:	f000 f910 	bl	8000e72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x70>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e007      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e004      	b.n	8000c6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	20000b50 	.word	0x20000b50
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000b50 	.word	0x20000b50

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff40 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff90 	bl	8000db0 <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5f 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff33 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa4 	bl	8000e18 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e08d      	b.n	800100a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_DMA_Init+0x138>)
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d80f      	bhi.n	8000f1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b45      	ldr	r3, [pc, #276]	; (8001018 <HAL_DMA_Init+0x13c>)
 8000f02:	4413      	add	r3, r2
 8000f04:	4a45      	ldr	r2, [pc, #276]	; (800101c <HAL_DMA_Init+0x140>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	009a      	lsls	r2, r3, #2
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a42      	ldr	r2, [pc, #264]	; (8001020 <HAL_DMA_Init+0x144>)
 8000f16:	641a      	str	r2, [r3, #64]	; 0x40
 8000f18:	e00e      	b.n	8000f38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b40      	ldr	r3, [pc, #256]	; (8001024 <HAL_DMA_Init+0x148>)
 8000f22:	4413      	add	r3, r2
 8000f24:	4a3d      	ldr	r2, [pc, #244]	; (800101c <HAL_DMA_Init+0x140>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	009a      	lsls	r2, r3, #2
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a3c      	ldr	r2, [pc, #240]	; (8001028 <HAL_DMA_Init+0x14c>)
 8000f36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f9b6 	bl	80012fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f98:	d102      	bne.n	8000fa0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000fb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d010      	beq.n	8000fe0 <HAL_DMA_Init+0x104>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d80c      	bhi.n	8000fe0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f9d6 	bl	8001378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	e008      	b.n	8000ff2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020407 	.word	0x40020407
 8001018:	bffdfff8 	.word	0xbffdfff8
 800101c:	cccccccd 	.word	0xcccccccd
 8001020:	40020000 	.word	0x40020000
 8001024:	bffdfbf8 	.word	0xbffdfbf8
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_DMA_Start_IT+0x20>
 8001048:	2302      	movs	r3, #2
 800104a:	e066      	b.n	800111a <HAL_DMA_Start_IT+0xee>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d155      	bne.n	800110c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f8fb 	bl	8001280 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 020e 	orr.w	r2, r2, #14
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00f      	b.n	80010c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0204 	bic.w	r2, r2, #4
 80010b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 020a 	orr.w	r2, r2, #10
 80010c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e005      	b.n	8001118 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001114:	2302      	movs	r3, #2
 8001116:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001118:	7dfb      	ldrb	r3, [r7, #23]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2204      	movs	r2, #4
 8001144:	409a      	lsls	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d026      	beq.n	800119c <HAL_DMA_IRQHandler+0x7a>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d021      	beq.n	800119c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	2b00      	cmp	r3, #0
 8001164:	d107      	bne.n	8001176 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0204 	bic.w	r2, r2, #4
 8001174:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f003 021f 	and.w	r2, r3, #31
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	2104      	movs	r1, #4
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	2b00      	cmp	r3, #0
 8001190:	d071      	beq.n	8001276 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800119a:	e06c      	b.n	8001276 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2202      	movs	r2, #2
 80011a6:	409a      	lsls	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d02e      	beq.n	800120e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d029      	beq.n	800120e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 020a 	bic.w	r2, r2, #10
 80011d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	2102      	movs	r1, #2
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d038      	beq.n	8001276 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800120c:	e033      	b.n	8001276 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2208      	movs	r2, #8
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d02a      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d025      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 020e 	bic.w	r2, r2, #14
 800123a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	f003 021f 	and.w	r2, r3, #31
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001276:	bf00      	nop
 8001278:	bf00      	nop
}
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001296:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f003 021f 	and.w	r2, r3, #31
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b10      	cmp	r3, #16
 80012cc:	d108      	bne.n	80012e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012de:	e007      	b.n	80012f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	60da      	str	r2, [r3, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d802      	bhi.n	8001316 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e001      	b.n	800131a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001318:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3b08      	subs	r3, #8
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	009a      	lsls	r2, r3, #2
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4413      	add	r3, r2
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001346:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2201      	movs	r2, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40020407 	.word	0x40020407
 8001368:	40020800 	.word	0x40020800
 800136c:	40020820 	.word	0x40020820
 8001370:	cccccccd 	.word	0xcccccccd
 8001374:	40020880 	.word	0x40020880

08001378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800139a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	2201      	movs	r2, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	1000823f 	.word	0x1000823f
 80013bc:	40020940 	.word	0x40020940

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ce:	e15a      	b.n	8001686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 814c 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0xea>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6613      	str	r3, [r2, #96]	; 0x60
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154c:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001576:	d01f      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x2ec>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d019      	beq.n	80015b4 <HAL_GPIO_Init+0x1f4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1f0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1e4>
 80015a0:	2305      	movs	r3, #5
 80015a2:	e00a      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a4:	2306      	movs	r3, #6
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fc:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001626:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae9d 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	48001400 	.word	0x48001400
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001712:	e002      	b.n	800171a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001728:	b08b      	sub	sp, #44	; 0x2c
 800172a:	af06      	add	r7, sp, #24
 800172c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0ad      	b.n	8001894 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 fe59 	bl	8007404 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fffd 	bl	800475e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e035      	b.n	80017d6 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	015b      	lsls	r3, r3, #5
 8001770:	4413      	add	r3, r2
 8001772:	3329      	adds	r3, #41	; 0x29
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4413      	add	r3, r2
 8001780:	3328      	adds	r3, #40	; 0x28
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	b291      	uxth	r1, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	4413      	add	r3, r2
 8001792:	3336      	adds	r3, #54	; 0x36
 8001794:	460a      	mov	r2, r1
 8001796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	4413      	add	r3, r2
 80017a0:	332b      	adds	r3, #43	; 0x2b
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	015b      	lsls	r3, r3, #5
 80017ac:	4413      	add	r3, r2
 80017ae:	3338      	adds	r3, #56	; 0x38
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	015b      	lsls	r3, r3, #5
 80017ba:	4413      	add	r3, r2
 80017bc:	333c      	adds	r3, #60	; 0x3c
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	3302      	adds	r3, #2
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	3301      	adds	r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3c4      	bcc.n	800176a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e031      	b.n	800184a <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	4413      	add	r3, r2
 80017ee:	f203 1329 	addw	r3, r3, #297	; 0x129
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4413      	add	r3, r2
 800180e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	015b      	lsls	r3, r3, #5
 800181c:	4413      	add	r3, r2
 800181e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	015b      	lsls	r3, r3, #5
 800182c:	4413      	add	r3, r2
 800182e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	330a      	adds	r3, #10
 800183c:	015b      	lsls	r3, r3, #5
 800183e:	4413      	add	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	3301      	adds	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3c8      	bcc.n	80017e6 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	466d      	mov	r5, sp
 800185e:	f106 0410 	add.w	r4, r6, #16
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	602b      	str	r3, [r5, #0]
 800186a:	1d33      	adds	r3, r6, #4
 800186c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f002 ff90 	bl	8004794 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d102      	bne.n	8001892 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fe36 	bl	80024fe <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800189c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_PCD_Start+0x16>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e012      	b.n	80018d8 <HAL_PCD_Start+0x3c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f003 ffb4 	bl	800582c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 ff2f 	bl	800472c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 ffb4 	bl	800585a <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018fc:	d102      	bne.n	8001904 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fb34 	bl	8001f6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 ffa6 	bl	800585a <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001918:	d112      	bne.n	8001940 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f005 fdfd 	bl	8007532 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001938:	2100      	movs	r1, #0
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f91e 	bl	8001b7c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f003 ff88 	bl	800585a <USB_ReadInterrupts>
 800194a:	4603      	mov	r3, r0
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001954:	d10b      	bne.n	800196e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001968:	b292      	uxth	r2, r2
 800196a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 ff71 	bl	800585a <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001982:	d10b      	bne.n	800199c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001996:	b292      	uxth	r2, r2
 8001998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 ff5a 	bl	800585a <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b0:	d133      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0204 	bic.w	r2, r2, #4
 80019c4:	b292      	uxth	r2, r2
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0208 	bic.w	r2, r2, #8
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f4:	2100      	movs	r1, #0
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f005 ff8c 	bl	8007914 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f005 fdd1 	bl	80075a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 ff1b 	bl	800585a <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a2e:	d126      	bne.n	8001a7e <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0204 	orr.w	r2, r2, #4
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 fd79 	bl	8007570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fee9 	bl	800585a <USB_ReadInterrupts>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8e:	2b80      	cmp	r3, #128	; 0x80
 8001a90:	d13f      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa4:	b292      	uxth	r2, r2
 8001aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d12b      	bne.n	8001b0c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0204 	orr.w	r2, r2, #4
 8001ac6:	b292      	uxth	r2, r2
 8001ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0208 	orr.w	r2, r2, #8
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b02:	2101      	movs	r1, #1
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f005 ff05 	bl	8007914 <HAL_PCDEx_LPM_Callback>
 8001b0a:	e002      	b.n	8001b12 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f005 fd2f 	bl	8007570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fe9f 	bl	800585a <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b26:	d10e      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f005 fce8 	bl	8007516 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fe85 	bl	800585a <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5a:	d10b      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_SetAddress+0x1a>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e013      	b.n	8001bbe <HAL_PCD_SetAddress+0x42>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fe28 	bl	8005804 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	4608      	mov	r0, r1
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	70fb      	strb	r3, [r7, #3]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	803b      	strh	r3, [r7, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da0b      	bge.n	8001c04 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	3328      	adds	r3, #40	; 0x28
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	705a      	strb	r2, [r3, #1]
 8001c02:	e00b      	b.n	8001c1c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	015b      	lsls	r3, r3, #5
 8001c0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c28:	883a      	ldrh	r2, [r7, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	78ba      	ldrb	r2, [r7, #2]
 8001c32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c46:	78bb      	ldrb	r3, [r7, #2]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d102      	bne.n	8001c52 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_PCD_EP_Open+0x9a>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e00e      	b.n	8001c7e <HAL_PCD_EP_Open+0xb8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fdb4 	bl	80047dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	da0b      	bge.n	8001cb2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	3328      	adds	r3, #40	; 0x28
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	705a      	strb	r2, [r3, #1]
 8001cb0:	e00b      	b.n	8001cca <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	015b      	lsls	r3, r3, #5
 8001cba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_PCD_EP_Close+0x5e>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e00e      	b.n	8001d02 <HAL_PCD_EP_Close+0x7c>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f862 	bl	8004dbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	460b      	mov	r3, r1
 8001d18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f9c1 	bl	80050e8 <USB_EPStartXfer>
 8001d66:	e005      	b.n	8001d74 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 f9ba 	bl	80050e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	330a      	adds	r3, #10
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	4413      	add	r3, r2
 8001d98:	3304      	adds	r3, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	7afb      	ldrb	r3, [r7, #11]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 f973 	bl	80050e8 <USB_EPStartXfer>
 8001e02:	e005      	b.n	8001e10 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 f96c 	bl	80050e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0207 	and.w	r2, r3, #7
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d901      	bls.n	8001e38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e046      	b.n	8001ec6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da0b      	bge.n	8001e58 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	015b      	lsls	r3, r3, #5
 8001e48:	3328      	adds	r3, #40	; 0x28
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	705a      	strb	r2, [r3, #1]
 8001e56:	e009      	b.n	8001e6c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	015b      	lsls	r3, r3, #5
 8001e5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_EP_SetStall+0x72>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e01c      	b.n	8001ec6 <HAL_PCD_EP_SetStall+0xac>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fbdc 	bl	8005658 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f003 fcdf 	bl	800587a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 020f 	and.w	r2, r3, #15
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d901      	bls.n	8001eec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e03a      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da0b      	bge.n	8001f0c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	3328      	adds	r3, #40	; 0x28
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	705a      	strb	r2, [r3, #1]
 8001f0a:	e00b      	b.n	8001f24 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	015b      	lsls	r3, r3, #5
 8001f14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_EP_ClrStall+0x76>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0x94>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fbc2 	bl	80056dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f74:	e274      	b.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001f8a:	7d7b      	ldrb	r3, [r7, #21]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 813c 	bne.w	800220a <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d14f      	bne.n	800203c <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fac:	b29c      	uxth	r4, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3328      	adds	r3, #40	; 0x28
 8001fc2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	441a      	add	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f005 fa73 	bl	80074e8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 8228 	beq.w	8002460 <PCD_EP_ISR_Handler+0x4f4>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f040 8223 	bne.w	8002460 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002026:	b2da      	uxtb	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b292      	uxth	r2, r2
 800202e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800203a:	e211      	b.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002042:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800204c:	8a7b      	ldrh	r3, [r7, #18]
 800204e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002052:	2b00      	cmp	r3, #0
 8002054:	d031      	beq.n	80020ba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205e:	b29b      	uxth	r3, r3
 8002060:	461a      	mov	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4413      	add	r3, r2
 8002070:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002090:	b29b      	uxth	r3, r3
 8002092:	f003 fc3f 	bl	8005914 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	b29a      	uxth	r2, r3
 800209e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29c      	uxth	r4, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020ae:	b292      	uxth	r2, r2
 80020b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f005 f9ee 	bl	8007494 <HAL_PCD_SetupStageCallback>
 80020b8:	e1d2      	b.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f280 81ce 	bge.w	8002460 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29c      	uxth	r4, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020dc:	b292      	uxth	r2, r2
 80020de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1d8>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002128:	b29b      	uxth	r3, r3
 800212a:	f003 fbf3 	bl	8005914 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	441a      	add	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800213c:	2100      	movs	r1, #0
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f005 f9ba 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461c      	mov	r4, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	441c      	add	r4, r3
 8002156:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800215a:	461c      	mov	r4, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <PCD_EP_ISR_Handler+0x216>
 8002164:	8823      	ldrh	r3, [r4, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800216c:	b29b      	uxth	r3, r3
 800216e:	8023      	strh	r3, [r4, #0]
 8002170:	8823      	ldrh	r3, [r4, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800217c:	b29b      	uxth	r3, r3
 800217e:	8023      	strh	r3, [r4, #0]
 8002180:	e02d      	b.n	80021de <PCD_EP_ISR_Handler+0x272>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b3e      	cmp	r3, #62	; 0x3e
 8002188:	d812      	bhi.n	80021b0 <PCD_EP_ISR_Handler+0x244>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <PCD_EP_ISR_Handler+0x238>
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8023      	strh	r3, [r4, #0]
 80021ae:	e016      	b.n	80021de <PCD_EP_ISR_Handler+0x272>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <PCD_EP_ISR_Handler+0x25e>
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	029b      	lsls	r3, r3, #10
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021da:	b29b      	uxth	r3, r3
 80021dc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	b29c      	uxth	r4, r3
 80021f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80021f4:	b29c      	uxth	r4, r3
 80021f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80021fa:	b29c      	uxth	r4, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b9e      	ldr	r3, [pc, #632]	; (800247c <PCD_EP_ISR_Handler+0x510>)
 8002202:	4323      	orrs	r3, r4
 8002204:	b29b      	uxth	r3, r3
 8002206:	8013      	strh	r3, [r2, #0]
 8002208:	e12a      	b.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	7d7b      	ldrb	r3, [r7, #21]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800221a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f280 80cb 	bge.w	80023ba <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	7d7b      	ldrb	r3, [r7, #21]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	b29a      	uxth	r2, r3
 8002234:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002238:	4013      	ands	r3, r2
 800223a:	b29c      	uxth	r4, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	7d7b      	ldrb	r3, [r7, #21]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800224c:	b292      	uxth	r2, r2
 800224e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002250:	7d7b      	ldrb	r3, [r7, #21]
 8002252:	015b      	lsls	r3, r3, #5
 8002254:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	7b1b      	ldrb	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11f      	bne.n	80022a6 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226e:	b29b      	uxth	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4413      	add	r3, r2
 8002280:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800228c:	8bfb      	ldrh	r3, [r7, #30]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d06e      	beq.n	8002370 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6959      	ldr	r1, [r3, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	88da      	ldrh	r2, [r3, #6]
 800229e:	8bfb      	ldrh	r3, [r7, #30]
 80022a0:	f003 fb38 	bl	8005914 <USB_ReadPMA>
 80022a4:	e064      	b.n	8002370 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c0:	b29c      	uxth	r4, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	441a      	add	r2, r3
 80022d0:	4b6b      	ldr	r3, [pc, #428]	; (8002480 <PCD_EP_ISR_Handler+0x514>)
 80022d2:	4323      	orrs	r3, r4
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	4413      	add	r3, r2
 800230c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002316:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002318:	8bfb      	ldrh	r3, [r7, #30]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d028      	beq.n	8002370 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	891a      	ldrh	r2, [r3, #8]
 800232a:	8bfb      	ldrh	r3, [r7, #30]
 800232c:	f003 faf2 	bl	8005914 <USB_ReadPMA>
 8002330:	e01e      	b.n	8002370 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4413      	add	r3, r2
 800234c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002356:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002358:	8bfb      	ldrh	r3, [r7, #30]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6959      	ldr	r1, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	895a      	ldrh	r2, [r3, #10]
 800236a:	8bfb      	ldrh	r3, [r7, #30]
 800236c:	f003 fad2 	bl	8005914 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	8bfb      	ldrh	r3, [r7, #30]
 8002376:	441a      	add	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	441a      	add	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d004      	beq.n	800239a <PCD_EP_ISR_Handler+0x42e>
 8002390:	8bfa      	ldrh	r2, [r7, #30]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d206      	bcs.n	80023a8 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 f889 	bl	80074b8 <HAL_PCD_DataOutStageCallback>
 80023a6:	e008      	b.n	80023ba <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	7819      	ldrb	r1, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff fca8 	bl	8001d0a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d04d      	beq.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023c4:	7d7b      	ldrb	r3, [r7, #21]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	3328      	adds	r3, #40	; 0x28
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	7d7b      	ldrb	r3, [r7, #21]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e8:	b29c      	uxth	r4, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	7d7b      	ldrb	r3, [r7, #21]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80023fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fe:	b29b      	uxth	r3, r3
 8002400:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	441a      	add	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d106      	bne.n	800244e <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f005 f84e 	bl	80074e8 <HAL_PCD_DataInStageCallback>
 800244c:	e008      	b.n	8002460 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fca4 	bl	8001da8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002468:	b29b      	uxth	r3, r3
 800246a:	b21b      	sxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	f6ff ad82 	blt.w	8001f76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3724      	adds	r7, #36	; 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	ffff8080 	.word	0xffff8080
 8002480:	ffff80c0 	.word	0xffff80c0

08002484 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	4613      	mov	r3, r2
 8002494:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	015b      	lsls	r3, r3, #5
 80024aa:	3328      	adds	r3, #40	; 0x28
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e006      	b.n	80024c2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024b4:	897b      	ldrh	r3, [r7, #10]
 80024b6:	015b      	lsls	r3, r3, #5
 80024b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d107      	bne.n	80024d8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	80da      	strh	r2, [r3, #6]
 80024d6:	e00b      	b.n	80024f0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2201      	movs	r2, #1
 80024dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002522:	b29b      	uxth	r3, r3
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002536:	b29b      	uxth	r3, r3
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d141      	bne.n	80025e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d131      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002570:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002576:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800257c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002588:	4a41      	ldr	r2, [pc, #260]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2232      	movs	r2, #50	; 0x32
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a3f      	ldr	r2, [pc, #252]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a6:	e002      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ba:	d102      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f2      	bne.n	80025a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c2:	4b33      	ldr	r3, [pc, #204]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d158      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e057      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025da:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80025e4:	e04d      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d141      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d131      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800260c:	4b20      	ldr	r3, [pc, #128]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002614:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800261a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2232      	movs	r2, #50	; 0x32
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	0c9b      	lsrs	r3, r3, #18
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002632:	e002      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b01      	subs	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002646:	d102      	bne.n	800264e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f2      	bne.n	8002634 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d112      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e011      	b.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002670:	e007      	b.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002680:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40007000 	.word	0x40007000
 8002694:	20000000 	.word	0x20000000
 8002698:	431bde83 	.word	0x431bde83

0800269c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e308      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d075      	beq.n	80027a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4ba0      	ldr	r3, [pc, #640]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d102      	bne.n	80026da <HAL_RCC_OscConfig+0x3e>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_OscConfig+0x44>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4b99      	ldr	r3, [pc, #612]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d157      	bne.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e2e3      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x74>
 8002702:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a90      	ldr	r2, [pc, #576]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x98>
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a8a      	ldr	r2, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xb0>
 8002734:	4b84      	ldr	r3, [pc, #528]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a83      	ldr	r2, [pc, #524]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a80      	ldr	r2, [pc, #512]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe faa6 	bl	8000ca4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe faa2 	bl	8000ca4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2a8      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xc0>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fa92 	bl	8000ca4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fa8e 	bl	8000ca4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e294      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d075      	beq.n	800289e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b65      	ldr	r3, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027bc:	4b62      	ldr	r3, [pc, #392]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b0c      	cmp	r3, #12
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x136>
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_OscConfig+0x13c>
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11f      	bne.n	8002818 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d8:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x154>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e267      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	4952      	ldr	r1, [pc, #328]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002804:	4b51      	ldr	r3, [pc, #324]	; (800294c <HAL_RCC_OscConfig+0x2b0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe f9ff 	bl	8000c0c <HAL_InitTick>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d043      	beq.n	800289c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e253      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b49      	ldr	r3, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fa3a 	bl	8000ca4 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe fa36 	bl	8000ca4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e23c      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002846:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4939      	ldr	r1, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
 8002866:	e01a      	b.n	800289e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a36      	ldr	r2, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fa16 	bl	8000ca4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287c:	f7fe fa12 	bl	8000ca4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e218      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1e0>
 800289a:	e000      	b.n	800289e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800289c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d03c      	beq.n	8002924 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01c      	beq.n	80028ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b25      	ldr	r3, [pc, #148]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe f9ef 	bl	8000ca4 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fe f9eb 	bl	8000ca4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1f1      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0ef      	beq.n	80028ca <HAL_RCC_OscConfig+0x22e>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe f9d2 	bl	8000ca4 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe f9ce 	bl	8000ca4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1d4      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ef      	bne.n	8002904 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80ab 	beq.w	8002a88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_RCC_OscConfig+0x2b4>
 8002942:	2301      	movs	r3, #1
 8002944:	e005      	b.n	8002952 <HAL_RCC_OscConfig+0x2b6>
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000
 800294c:	20000004 	.word	0x20000004
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4baf      	ldr	r3, [pc, #700]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	4aae      	ldr	r2, [pc, #696]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
 8002962:	4bac      	ldr	r3, [pc, #688]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4ba9      	ldr	r3, [pc, #676]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297e:	4ba6      	ldr	r3, [pc, #664]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4aa5      	ldr	r2, [pc, #660]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe f98b 	bl	8000ca4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe f987 	bl	8000ca4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e18d      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	4b9c      	ldr	r3, [pc, #624]	; (8002c18 <HAL_RCC_OscConfig+0x57c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d108      	bne.n	80029ca <HAL_RCC_OscConfig+0x32e>
 80029b8:	4b96      	ldr	r3, [pc, #600]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a95      	ldr	r2, [pc, #596]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c8:	e024      	b.n	8002a14 <HAL_RCC_OscConfig+0x378>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d110      	bne.n	80029f4 <HAL_RCC_OscConfig+0x358>
 80029d2:	4b90      	ldr	r3, [pc, #576]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	4a8e      	ldr	r2, [pc, #568]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029e2:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f2:	e00f      	b.n	8002a14 <HAL_RCC_OscConfig+0x378>
 80029f4:	4b87      	ldr	r3, [pc, #540]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a86      	ldr	r2, [pc, #536]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a04:	4b83      	ldr	r3, [pc, #524]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a82      	ldr	r2, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f942 	bl	8000ca4 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe f93e 	bl	8000ca4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e142      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ed      	beq.n	8002a24 <HAL_RCC_OscConfig+0x388>
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f92b 	bl	8000ca4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe f927 	bl	8000ca4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e12b      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ed      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a76:	7ffb      	ldrb	r3, [r7, #31]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a64      	ldr	r2, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9c:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa2:	4a5c      	ldr	r2, [pc, #368]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe f8fa 	bl	8000ca4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab4:	f7fe f8f6 	bl	8000ca4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0fc      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x418>
 8002ad4:	e01b      	b.n	8002b0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad6:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002adc:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7fe f8dd 	bl	8000ca4 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aee:	f7fe f8d9 	bl	8000ca4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0df      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b00:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ef      	bne.n	8002aee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80d3 	beq.w	8002cbe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b18:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	f000 808d 	beq.w	8002c40 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d15a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe f8b3 	bl	8000ca4 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe f8af 	bl	8000ca4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0b5      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f0      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b60:	4b2c      	ldr	r3, [pc, #176]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_OscConfig+0x580>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6a11      	ldr	r1, [r2, #32]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002b7a:	0212      	lsls	r2, r2, #8
 8002b7c:	4311      	orrs	r1, r2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b82:	0852      	lsrs	r2, r2, #1
 8002b84:	3a01      	subs	r2, #1
 8002b86:	0552      	lsls	r2, r2, #21
 8002b88:	4311      	orrs	r1, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b8e:	0852      	lsrs	r2, r2, #1
 8002b90:	3a01      	subs	r2, #1
 8002b92:	0652      	lsls	r2, r2, #25
 8002b94:	4311      	orrs	r1, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b9a:	06d2      	lsls	r2, r2, #27
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	491d      	ldr	r1, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7fe f872 	bl	8000ca4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe f86e 	bl	8000ca4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e074      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x528>
 8002be2:	e06c      	b.n	8002cbe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <HAL_RCC_OscConfig+0x578>)
 8002c02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f84a 	bl	8000ca4 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c12:	e00e      	b.n	8002c32 <HAL_RCC_OscConfig+0x596>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f840 	bl	8000ca4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e046      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_RCC_OscConfig+0x62c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x584>
 8002c3e:	e03e      	b.n	8002cbe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e039      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_OscConfig+0x62c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d12c      	bne.n	8002cba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d123      	bne.n	8002cba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11b      	bne.n	8002cba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d113      	bne.n	8002cba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d109      	bne.n	8002cba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e11e      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b91      	ldr	r3, [pc, #580]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	498c      	ldr	r1, [pc, #560]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e106      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d073      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d129      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d28:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0f4      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d38:	f000 f964 	bl	8003004 <RCC_GetSysClockFreqFromPLLSource>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4a7c      	ldr	r2, [pc, #496]	; (8002f34 <HAL_RCC_ClockConfig+0x268>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d93f      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d46:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d033      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d12f      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6e:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	e024      	b.n	8002dc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0c6      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0be      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002da4:	f000 f8ce 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4a61      	ldr	r2, [pc, #388]	; (8002f34 <HAL_RCC_ClockConfig+0x268>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d909      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db2:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dba:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc6:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4957      	ldr	r1, [pc, #348]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd8:	f7fd ff64 	bl	8000ca4 <HAL_GetTick>
 8002ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de0:	f7fd ff60 	bl	8000ca4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e095      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 020c 	and.w	r2, r3, #12
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d1eb      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a42      	ldr	r2, [pc, #264]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e38:	4b3d      	ldr	r3, [pc, #244]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4936      	ldr	r1, [pc, #216]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d105      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a32      	ldr	r2, [pc, #200]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d21d      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 020f 	bic.w	r2, r3, #15
 8002e84:	4929      	ldr	r1, [pc, #164]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e8c:	f7fd ff0a 	bl	8000ca4 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	e00a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fd ff06 	bl	8000ca4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e03b      	b.n	8002f22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCC_ClockConfig+0x260>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1ed      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4917      	ldr	r1, [pc, #92]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490f      	ldr	r1, [pc, #60]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef6:	f000 f825 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002efa:	4601      	mov	r1, r0
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_RCC_ClockConfig+0x264>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <HAL_RCC_ClockConfig+0x26c>)
 8002f08:	5cd3      	ldrb	r3, [r2, r3]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x270>)
 8002f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fe76 	bl	8000c0c <HAL_InitTick>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	04c4b400 	.word	0x04c4b400
 8002f38:	08007acc 	.word	0x08007acc
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e047      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f5c:	4b27      	ldr	r3, [pc, #156]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	e03e      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f6e:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d136      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d10c      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f98:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa2:	68d2      	ldr	r2, [r2, #12]
 8002fa4:	0a12      	lsrs	r2, r2, #8
 8002fa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
      break;
 8002fb0:	e00c      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fb2:	4a13      	ldr	r2, [pc, #76]	; (8003000 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fbc:	68d2      	ldr	r2, [r2, #12]
 8002fbe:	0a12      	lsrs	r2, r2, #8
 8002fc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
      break;
 8002fca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0e5b      	lsrs	r3, r3, #25
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e001      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fec:	693b      	ldr	r3, [r7, #16]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
 8003000:	00f42400 	.word	0x00f42400

08003004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d10c      	bne.n	8003042 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	4a14      	ldr	r2, [pc, #80]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003032:	68d2      	ldr	r2, [r2, #12]
 8003034:	0a12      	lsrs	r2, r2, #8
 8003036:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
    break;
 8003040:	e00c      	b.n	800305c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003042:	4a11      	ldr	r2, [pc, #68]	; (8003088 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304c:	68d2      	ldr	r2, [r2, #12]
 800304e:	0a12      	lsrs	r2, r2, #8
 8003050:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]
    break;
 800305a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0e5b      	lsrs	r3, r3, #25
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003076:	687b      	ldr	r3, [r7, #4]
}
 8003078:	4618      	mov	r0, r3
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40021000 	.word	0x40021000
 8003088:	00f42400 	.word	0x00f42400

0800308c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003094:	2300      	movs	r3, #0
 8003096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003098:	2300      	movs	r3, #0
 800309a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 8098 	beq.w	80031da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10d      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	4a3f      	ldr	r2, [pc, #252]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6593      	str	r3, [r2, #88]	; 0x58
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	2301      	movs	r3, #1
 80030d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e2:	f7fd fddf 	bl	8000ca4 <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030e8:	e009      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fd fddb 	bl	8000ca4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	74fb      	strb	r3, [r7, #19]
        break;
 80030fc:	e005      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0ef      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d159      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d01e      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d019      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7fd fd9b 	bl	8000ca4 <HAL_GetTick>
 800316e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003170:	e00b      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd fd97 	bl	8000ca4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d902      	bls.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	74fb      	strb	r3, [r7, #19]
            break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ec      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10b      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031b4:	e008      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	74bb      	strb	r3, [r7, #18]
 80031ba:	e005      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031c8:	7c7b      	ldrb	r3, [r7, #17]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d105      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ce:	4ba6      	ldr	r3, [pc, #664]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4aa5      	ldr	r2, [pc, #660]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031e6:	4ba0      	ldr	r3, [pc, #640]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f023 0203 	bic.w	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	499c      	ldr	r1, [pc, #624]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003208:	4b97      	ldr	r3, [pc, #604]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f023 020c 	bic.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4994      	ldr	r1, [pc, #592]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800322a:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	498b      	ldr	r1, [pc, #556]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800324c:	4b86      	ldr	r3, [pc, #536]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	4983      	ldr	r1, [pc, #524]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800326e:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	497a      	ldr	r1, [pc, #488]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003290:	4b75      	ldr	r3, [pc, #468]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	4972      	ldr	r1, [pc, #456]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032b2:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4969      	ldr	r1, [pc, #420]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032d4:	4b64      	ldr	r3, [pc, #400]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4961      	ldr	r1, [pc, #388]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f6:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	4958      	ldr	r1, [pc, #352]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	4950      	ldr	r1, [pc, #320]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003336:	d105      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a4a      	ldr	r2, [pc, #296]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800333e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003342:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	4942      	ldr	r1, [pc, #264]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d105      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003370:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003388:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4934      	ldr	r1, [pc, #208]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a6:	d105      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d015      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b29      	ldr	r3, [pc, #164]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	4926      	ldr	r1, [pc, #152]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d105      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4918      	ldr	r1, [pc, #96]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003408:	4313      	orrs	r3, r2
 800340a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003416:	d105      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003422:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	490a      	ldr	r1, [pc, #40]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800345c:	7cbb      	ldrb	r3, [r7, #18]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e049      	b.n	8003512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd f9a0 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fc70 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e049      	b.n	80035c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd f8ff 	bl	8000744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fc19 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_TIM_PWM_Start_DMA+0x28>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e03c      	b.n	800366a <HAL_TIM_PWM_Start_DMA+0xa2>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d109      	bne.n	800360a <HAL_TIM_PWM_Start_DMA+0x42>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e02f      	b.n	800366a <HAL_TIM_PWM_Start_DMA+0xa2>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d109      	bne.n	8003624 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e022      	b.n	800366a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d109      	bne.n	800363e <HAL_TIM_PWM_Start_DMA+0x76>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e015      	b.n	800366a <HAL_TIM_PWM_Start_DMA+0xa2>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b10      	cmp	r3, #16
 8003642:	d109      	bne.n	8003658 <HAL_TIM_PWM_Start_DMA+0x90>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e008      	b.n	800366a <HAL_TIM_PWM_Start_DMA+0xa2>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
 8003670:	e178      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_TIM_PWM_Start_DMA+0xc4>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e03c      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x13e>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d109      	bne.n	80036a6 <HAL_TIM_PWM_Start_DMA+0xde>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e02f      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x13e>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d109      	bne.n	80036c0 <HAL_TIM_PWM_Start_DMA+0xf8>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e022      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x13e>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d109      	bne.n	80036da <HAL_TIM_PWM_Start_DMA+0x112>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e015      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x13e>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d109      	bne.n	80036f4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e008      	b.n	8003706 <HAL_TIM_PWM_Start_DMA+0x13e>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d034      	beq.n	8003774 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start_DMA+0x152>
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e124      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start_DMA+0x162>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	e026      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start_DMA+0x172>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	e01e      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start_DMA+0x182>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	e016      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Start_DMA+0x192>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003758:	e00e      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b10      	cmp	r3, #16
 800375e:	d104      	bne.n	800376a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003768:	e006      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003772:	e001      	b.n	8003778 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f5      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	f200 80ae 	bhi.w	80038dc <HAL_TIM_PWM_Start_DMA+0x314>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037bd 	.word	0x080037bd
 800378c:	080038dd 	.word	0x080038dd
 8003790:	080038dd 	.word	0x080038dd
 8003794:	080038dd 	.word	0x080038dd
 8003798:	08003805 	.word	0x08003805
 800379c:	080038dd 	.word	0x080038dd
 80037a0:	080038dd 	.word	0x080038dd
 80037a4:	080038dd 	.word	0x080038dd
 80037a8:	0800384d 	.word	0x0800384d
 80037ac:	080038dd 	.word	0x080038dd
 80037b0:	080038dd 	.word	0x080038dd
 80037b4:	080038dd 	.word	0x080038dd
 80037b8:	08003895 	.word	0x08003895
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	4a69      	ldr	r2, [pc, #420]	; (8003970 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	4a68      	ldr	r2, [pc, #416]	; (8003974 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3334      	adds	r3, #52	; 0x34
 80037e0:	461a      	mov	r2, r3
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	f7fd fc22 	bl	800102c <HAL_DMA_Start_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0b8      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	60da      	str	r2, [r3, #12]
      break;
 8003802:	e06c      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	4a58      	ldr	r2, [pc, #352]	; (800396c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003812:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	4a56      	ldr	r2, [pc, #344]	; (8003974 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800381a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3338      	adds	r3, #56	; 0x38
 8003828:	461a      	mov	r2, r3
 800382a:	887b      	ldrh	r3, [r7, #2]
 800382c:	f7fd fbfe 	bl	800102c <HAL_DMA_Start_IT>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e094      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003848:	60da      	str	r2, [r3, #12]
      break;
 800384a:	e048      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a46      	ldr	r2, [pc, #280]	; (800396c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	4a45      	ldr	r2, [pc, #276]	; (8003970 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800385a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	4a44      	ldr	r2, [pc, #272]	; (8003974 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003862:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	461a      	mov	r2, r3
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	f7fd fbda 	bl	800102c <HAL_DMA_Start_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e070      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003890:	60da      	str	r2, [r3, #12]
      break;
 8003892:	e024      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4a34      	ldr	r2, [pc, #208]	; (800396c <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	4a33      	ldr	r2, [pc, #204]	; (8003970 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	4a32      	ldr	r2, [pc, #200]	; (8003974 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3340      	adds	r3, #64	; 0x40
 80038b8:	461a      	mov	r2, r3
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	f7fd fbb6 	bl	800102c <HAL_DMA_Start_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e04c      	b.n	8003964 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038d8:	60da      	str	r2, [r3, #12]
      break;
 80038da:	e000      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80038dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fdd8 	bl	800449c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d013      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x356>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00e      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x356>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x356>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_TIM_PWM_Start_DMA+0x356>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_TIM_PWM_Start_DMA+0x35a>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_TIM_PWM_Start_DMA+0x35c>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003940:	4013      	ands	r3, r2
 8003942:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d00b      	beq.n	8003962 <HAL_TIM_PWM_Start_DMA+0x39a>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d007      	beq.n	8003962 <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	08003c7f 	.word	0x08003c7f
 8003970:	08003d27 	.word	0x08003d27
 8003974:	08003bed 	.word	0x08003bed
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40013400 	.word	0x40013400
 8003980:	40014000 	.word	0x40014000
 8003984:	40014400 	.word	0x40014400
 8003988:	40014800 	.word	0x40014800
 800398c:	00010007 	.word	0x00010007

08003990 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0fd      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b14      	cmp	r3, #20
 80039b6:	f200 80f0 	bhi.w	8003b9a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003b9b 	.word	0x08003b9b
 80039c8:	08003b9b 	.word	0x08003b9b
 80039cc:	08003b9b 	.word	0x08003b9b
 80039d0:	08003a55 	.word	0x08003a55
 80039d4:	08003b9b 	.word	0x08003b9b
 80039d8:	08003b9b 	.word	0x08003b9b
 80039dc:	08003b9b 	.word	0x08003b9b
 80039e0:	08003a97 	.word	0x08003a97
 80039e4:	08003b9b 	.word	0x08003b9b
 80039e8:	08003b9b 	.word	0x08003b9b
 80039ec:	08003b9b 	.word	0x08003b9b
 80039f0:	08003ad7 	.word	0x08003ad7
 80039f4:	08003b9b 	.word	0x08003b9b
 80039f8:	08003b9b 	.word	0x08003b9b
 80039fc:	08003b9b 	.word	0x08003b9b
 8003a00:	08003b19 	.word	0x08003b19
 8003a04:	08003b9b 	.word	0x08003b9b
 8003a08:	08003b9b 	.word	0x08003b9b
 8003a0c:	08003b9b 	.word	0x08003b9b
 8003a10:	08003b59 	.word	0x08003b59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa48 	bl	8003eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e0a3      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fab8 	bl	8003fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e082      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb21 	bl	80040e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e062      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb89 	bl	80041f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e041      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fbf2 	bl	8004308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b56:	e021      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc36 	bl	80043d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b98:	e000      	b.n	8003b9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003b9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop

08003bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c12:	e02a      	b.n	8003c6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d107      	bne.n	8003c2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2202      	movs	r2, #2
 8003c22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c2c:	e01d      	b.n	8003c6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d107      	bne.n	8003c48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c46:	e010      	b.n	8003c6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d107      	bne.n	8003c62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2208      	movs	r2, #8
 8003c56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c60:	e003      	b.n	8003c6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ffb4 	bl	8003bd8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	771a      	strb	r2, [r3, #28]
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10b      	bne.n	8003cae <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d136      	bne.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cac:	e031      	b.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d10b      	bne.n	8003cd0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d125      	bne.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cce:	e020      	b.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d10b      	bne.n	8003cf2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2204      	movs	r2, #4
 8003cde:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d114      	bne.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf0:	e00f      	b.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d10a      	bne.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2208      	movs	r2, #8
 8003d00:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ff4c 	bl	8003bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	771a      	strb	r2, [r3, #28]
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d103      	bne.n	8003d46 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	771a      	strb	r2, [r3, #28]
 8003d44:	e019      	b.n	8003d7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d103      	bne.n	8003d58 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	771a      	strb	r2, [r3, #28]
 8003d56:	e010      	b.n	8003d7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d103      	bne.n	8003d6a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2204      	movs	r2, #4
 8003d66:	771a      	strb	r2, [r3, #28]
 8003d68:	e007      	b.n	8003d7a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d102      	bne.n	8003d7a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2208      	movs	r2, #8
 8003d78:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7ff ff22 	bl	8003bc4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	771a      	strb	r2, [r3, #28]
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <TIM_Base_SetConfig+0x104>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <TIM_Base_SetConfig+0x108>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <TIM_Base_SetConfig+0x10c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a37      	ldr	r2, [pc, #220]	; (8003ea0 <TIM_Base_SetConfig+0x110>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <TIM_Base_SetConfig+0x104>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <TIM_Base_SetConfig+0x10c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <TIM_Base_SetConfig+0x110>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <TIM_Base_SetConfig+0x114>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <TIM_Base_SetConfig+0x118>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0x8a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a25      	ldr	r2, [pc, #148]	; (8003eac <TIM_Base_SetConfig+0x11c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <TIM_Base_SetConfig+0x104>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_Base_SetConfig+0xe8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <TIM_Base_SetConfig+0x110>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_Base_SetConfig+0xe8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <TIM_Base_SetConfig+0x114>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_Base_SetConfig+0xe8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <TIM_Base_SetConfig+0x118>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_Base_SetConfig+0xe8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <TIM_Base_SetConfig+0x11c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 0302 	bic.w	r3, r3, #2
 8003efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <TIM_OC1_SetConfig+0x10c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_OC1_SetConfig+0x80>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <TIM_OC1_SetConfig+0x110>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_OC1_SetConfig+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <TIM_OC1_SetConfig+0x114>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_OC1_SetConfig+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <TIM_OC1_SetConfig+0x118>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC1_SetConfig+0x80>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <TIM_OC1_SetConfig+0x11c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10c      	bne.n	8003f4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0308 	bic.w	r3, r3, #8
 8003f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 0304 	bic.w	r3, r3, #4
 8003f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <TIM_OC1_SetConfig+0x10c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_OC1_SetConfig+0xc2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <TIM_OC1_SetConfig+0x110>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_OC1_SetConfig+0xc2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <TIM_OC1_SetConfig+0x114>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_OC1_SetConfig+0xc2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <TIM_OC1_SetConfig+0x118>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_OC1_SetConfig+0xc2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <TIM_OC1_SetConfig+0x11c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d111      	bne.n	8003f96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	621a      	str	r2, [r3, #32]
}
 8003fb0:	bf00      	nop
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0210 	bic.w	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0320 	bic.w	r3, r3, #32
 800401e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <TIM_OC2_SetConfig+0x100>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_OC2_SetConfig+0x6c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a27      	ldr	r2, [pc, #156]	; (80040d4 <TIM_OC2_SetConfig+0x104>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d10d      	bne.n	8004058 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <TIM_OC2_SetConfig+0x100>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_OC2_SetConfig+0xb0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <TIM_OC2_SetConfig+0x104>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_OC2_SetConfig+0xb0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <TIM_OC2_SetConfig+0x108>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_OC2_SetConfig+0xb0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <TIM_OC2_SetConfig+0x10c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_OC2_SetConfig+0xb0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <TIM_OC2_SetConfig+0x110>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d113      	bne.n	80040a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800408e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40013400 	.word	0x40013400
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40014400 	.word	0x40014400
 80040e0:	40014800 	.word	0x40014800

080040e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <TIM_OC3_SetConfig+0xfc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <TIM_OC3_SetConfig+0x6a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <TIM_OC3_SetConfig+0x100>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10d      	bne.n	800416a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <TIM_OC3_SetConfig+0xfc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_OC3_SetConfig+0xae>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <TIM_OC3_SetConfig+0x100>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_OC3_SetConfig+0xae>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <TIM_OC3_SetConfig+0x104>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_OC3_SetConfig+0xae>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <TIM_OC3_SetConfig+0x108>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC3_SetConfig+0xae>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <TIM_OC3_SetConfig+0x10c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d113      	bne.n	80041ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40013400 	.word	0x40013400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	031b      	lsls	r3, r3, #12
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a28      	ldr	r2, [pc, #160]	; (80042f4 <TIM_OC4_SetConfig+0x100>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_OC4_SetConfig+0x6c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a27      	ldr	r2, [pc, #156]	; (80042f8 <TIM_OC4_SetConfig+0x104>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10d      	bne.n	800427c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	031b      	lsls	r3, r3, #12
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <TIM_OC4_SetConfig+0x100>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_OC4_SetConfig+0xb0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <TIM_OC4_SetConfig+0x104>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_OC4_SetConfig+0xb0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <TIM_OC4_SetConfig+0x108>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_OC4_SetConfig+0xb0>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <TIM_OC4_SetConfig+0x10c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC4_SetConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a19      	ldr	r2, [pc, #100]	; (8004304 <TIM_OC4_SetConfig+0x110>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d113      	bne.n	80042cc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	019b      	lsls	r3, r3, #6
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40014000 	.word	0x40014000
 8004300:	40014400 	.word	0x40014400
 8004304:	40014800 	.word	0x40014800

08004308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800434c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a17      	ldr	r2, [pc, #92]	; (80043bc <TIM_OC5_SetConfig+0xb4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00f      	beq.n	8004382 <TIM_OC5_SetConfig+0x7a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <TIM_OC5_SetConfig+0xb8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_OC5_SetConfig+0x7a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <TIM_OC5_SetConfig+0xbc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <TIM_OC5_SetConfig+0x7a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <TIM_OC5_SetConfig+0xc0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC5_SetConfig+0x7a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <TIM_OC5_SetConfig+0xc4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d109      	bne.n	8004396 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40013400 	.word	0x40013400
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40014400 	.word	0x40014400
 80043cc:	40014800 	.word	0x40014800

080043d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	051b      	lsls	r3, r3, #20
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a18      	ldr	r2, [pc, #96]	; (8004488 <TIM_OC6_SetConfig+0xb8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00f      	beq.n	800444c <TIM_OC6_SetConfig+0x7c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a17      	ldr	r2, [pc, #92]	; (800448c <TIM_OC6_SetConfig+0xbc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00b      	beq.n	800444c <TIM_OC6_SetConfig+0x7c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <TIM_OC6_SetConfig+0xc0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d007      	beq.n	800444c <TIM_OC6_SetConfig+0x7c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a15      	ldr	r2, [pc, #84]	; (8004494 <TIM_OC6_SetConfig+0xc4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d003      	beq.n	800444c <TIM_OC6_SetConfig+0x7c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <TIM_OC6_SetConfig+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d109      	bne.n	8004460 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800

0800449c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1a      	ldr	r2, [r3, #32]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	fa01 f303 	lsl.w	r3, r1, r3
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e065      	b.n	80045cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2b      	ldr	r2, [pc, #172]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800453a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d013      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a18      	ldr	r2, [pc, #96]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d10c      	bne.n	80045ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40014000 	.word	0x40014000

080045ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004604:	2302      	movs	r3, #2
 8004606:	e087      	b.n	8004718 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d106      	bne.n	80046a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d126      	bne.n	8004706 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	051b      	lsls	r3, r3, #20
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d106      	bne.n	8004706 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40013400 	.word	0x40013400

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004734:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004738:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b29b      	uxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004766:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800476a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	b29b      	uxth	r3, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	4013      	ands	r3, r2
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004794:	b084      	sub	sp, #16
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	f107 0014 	add.w	r0, r7, #20
 80047a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ffb0 	bl	800472c <USB_EnableGlobalInt>

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d8:	b004      	add	sp, #16
 80047da:	4770      	bx	lr

080047dc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047dc:	b490      	push	{r4, r7}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	78db      	ldrb	r3, [r3, #3]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d819      	bhi.n	800483e <USB_ActivateEndpoint+0x62>
 800480a:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <USB_ActivateEndpoint+0x34>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004821 	.word	0x08004821
 8004814:	08004835 	.word	0x08004835
 8004818:	08004845 	.word	0x08004845
 800481c:	0800482b 	.word	0x0800482b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004820:	89bb      	ldrh	r3, [r7, #12]
 8004822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004826:	81bb      	strh	r3, [r7, #12]
      break;
 8004828:	e00d      	b.n	8004846 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800482a:	89bb      	ldrh	r3, [r7, #12]
 800482c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004830:	81bb      	strh	r3, [r7, #12]
      break;
 8004832:	e008      	b.n	8004846 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800483a:	81bb      	strh	r3, [r7, #12]
      break;
 800483c:	e003      	b.n	8004846 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      break;
 8004842:	e000      	b.n	8004846 <USB_ActivateEndpoint+0x6a>
      break;
 8004844:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	89bb      	ldrh	r3, [r7, #12]
 8004852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004862:	b29b      	uxth	r3, r3
 8004864:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	b21b      	sxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	b21a      	sxth	r2, r3
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b21b      	sxth	r3, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	b21b      	sxth	r3, r3
 800488a:	b29c      	uxth	r4, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	4b8a      	ldr	r3, [pc, #552]	; (8004ac0 <USB_ActivateEndpoint+0x2e4>)
 8004898:	4323      	orrs	r3, r4
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	7b1b      	ldrb	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 8112 	bne.w	8004acc <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d067      	beq.n	8004980 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048b0:	687c      	ldr	r4, [r7, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	441c      	add	r4, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4423      	add	r3, r4
 80048c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048c8:	461c      	mov	r4, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	88db      	ldrh	r3, [r3, #6]
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29c      	uxth	r4, r3
 80048e6:	4623      	mov	r3, r4
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d014      	beq.n	800491a <USB_ActivateEndpoint+0x13e>
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	b29c      	uxth	r4, r3
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <USB_ActivateEndpoint+0x2e8>)
 8004914:	4323      	orrs	r3, r4
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d018      	beq.n	8004954 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004938:	b29c      	uxth	r4, r3
 800493a:	f084 0320 	eor.w	r3, r4, #32
 800493e:	b29c      	uxth	r4, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <USB_ActivateEndpoint+0x2e4>)
 800494c:	4323      	orrs	r3, r4
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
 8004952:	e22b      	b.n	8004dac <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800496a:	b29c      	uxth	r4, r3
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	441a      	add	r2, r3
 8004976:	4b52      	ldr	r3, [pc, #328]	; (8004ac0 <USB_ActivateEndpoint+0x2e4>)
 8004978:	4323      	orrs	r3, r4
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]
 800497e:	e215      	b.n	8004dac <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004980:	687c      	ldr	r4, [r7, #4]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004988:	b29b      	uxth	r3, r3
 800498a:	441c      	add	r4, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4423      	add	r3, r4
 8004994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004998:	461c      	mov	r4, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	88db      	ldrh	r3, [r3, #6]
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80049a8:	687c      	ldr	r4, [r7, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	441c      	add	r4, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4423      	add	r3, r4
 80049bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049c0:	461c      	mov	r4, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <USB_ActivateEndpoint+0x20c>
 80049ca:	8823      	ldrh	r3, [r4, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8023      	strh	r3, [r4, #0]
 80049d6:	8823      	ldrh	r3, [r4, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8023      	strh	r3, [r4, #0]
 80049e6:	e02d      	b.n	8004a44 <USB_ActivateEndpoint+0x268>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b3e      	cmp	r3, #62	; 0x3e
 80049ee:	d812      	bhi.n	8004a16 <USB_ActivateEndpoint+0x23a>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <USB_ActivateEndpoint+0x22e>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	029b      	lsls	r3, r3, #10
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8023      	strh	r3, [r4, #0]
 8004a14:	e016      	b.n	8004a44 <USB_ActivateEndpoint+0x268>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	60bb      	str	r3, [r7, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <USB_ActivateEndpoint+0x254>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29c      	uxth	r4, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d014      	beq.n	8004a86 <USB_ActivateEndpoint+0x2aa>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	b29c      	uxth	r4, r3
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <USB_ActivateEndpoint+0x2ec>)
 8004a80:	4323      	orrs	r3, r4
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	b29c      	uxth	r4, r3
 8004a9e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004aa2:	b29c      	uxth	r4, r3
 8004aa4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004aa8:	b29c      	uxth	r4, r3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	441a      	add	r2, r3
 8004ab4:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <USB_ActivateEndpoint+0x2e4>)
 8004ab6:	4323      	orrs	r3, r4
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
 8004abc:	e176      	b.n	8004dac <USB_ActivateEndpoint+0x5d0>
 8004abe:	bf00      	nop
 8004ac0:	ffff8080 	.word	0xffff8080
 8004ac4:	ffff80c0 	.word	0xffff80c0
 8004ac8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	b29c      	uxth	r4, r3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	4b96      	ldr	r3, [pc, #600]	; (8004d48 <USB_ActivateEndpoint+0x56c>)
 8004af0:	4323      	orrs	r3, r4
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004af6:	687c      	ldr	r4, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	441c      	add	r4, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4423      	add	r3, r4
 8004b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0e:	461c      	mov	r4, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	891b      	ldrh	r3, [r3, #8]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8023      	strh	r3, [r4, #0]
 8004b1e:	687c      	ldr	r4, [r7, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	441c      	add	r4, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4423      	add	r3, r4
 8004b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b36:	461c      	mov	r4, r3
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	895b      	ldrh	r3, [r3, #10]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8088 	bne.w	8004c60 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29c      	uxth	r4, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d014      	beq.n	8004b92 <USB_ActivateEndpoint+0x3b6>
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	b29c      	uxth	r4, r3
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <USB_ActivateEndpoint+0x570>)
 8004b8c:	4323      	orrs	r3, r4
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29c      	uxth	r4, r3
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d014      	beq.n	8004bd4 <USB_ActivateEndpoint+0x3f8>
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc0:	b29c      	uxth	r4, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <USB_ActivateEndpoint+0x574>)
 8004bce:	4323      	orrs	r3, r4
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bea:	b29c      	uxth	r4, r3
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <USB_ActivateEndpoint+0x574>)
 8004bf8:	4323      	orrs	r3, r4
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	b29c      	uxth	r4, r3
 8004c16:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c1a:	b29c      	uxth	r4, r3
 8004c1c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c20:	b29c      	uxth	r4, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <USB_ActivateEndpoint+0x578>)
 8004c2e:	4323      	orrs	r3, r4
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4a:	b29c      	uxth	r4, r3
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <USB_ActivateEndpoint+0x578>)
 8004c58:	4323      	orrs	r3, r4
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]
 8004c5e:	e0a5      	b.n	8004dac <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29c      	uxth	r4, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d014      	beq.n	8004ca2 <USB_ActivateEndpoint+0x4c6>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	b29c      	uxth	r4, r3
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <USB_ActivateEndpoint+0x570>)
 8004c9c:	4323      	orrs	r3, r4
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29c      	uxth	r4, r3
 8004cb0:	4623      	mov	r3, r4
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d014      	beq.n	8004ce4 <USB_ActivateEndpoint+0x508>
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	b29c      	uxth	r4, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	441a      	add	r2, r3
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <USB_ActivateEndpoint+0x574>)
 8004cde:	4323      	orrs	r3, r4
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	b29c      	uxth	r4, r3
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <USB_ActivateEndpoint+0x570>)
 8004d08:	4323      	orrs	r3, r4
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	78db      	ldrb	r3, [r3, #3]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d020      	beq.n	8004d58 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2c:	b29c      	uxth	r4, r3
 8004d2e:	f084 0320 	eor.w	r3, r4, #32
 8004d32:	b29c      	uxth	r4, r3
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <USB_ActivateEndpoint+0x578>)
 8004d40:	4323      	orrs	r3, r4
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
 8004d46:	e01c      	b.n	8004d82 <USB_ActivateEndpoint+0x5a6>
 8004d48:	ffff8180 	.word	0xffff8180
 8004d4c:	ffffc080 	.word	0xffffc080
 8004d50:	ffff80c0 	.word	0xffff80c0
 8004d54:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6e:	b29c      	uxth	r4, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <USB_ActivateEndpoint+0x5dc>)
 8004d7c:	4323      	orrs	r3, r4
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <USB_ActivateEndpoint+0x5dc>)
 8004da6:	4323      	orrs	r3, r4
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc90      	pop	{r4, r7}
 8004db6:	4770      	bx	lr
 8004db8:	ffff8080 	.word	0xffff8080

08004dbc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dbc:	b490      	push	{r4, r7}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	7b1b      	ldrb	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d171      	bne.n	8004eb2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	785b      	ldrb	r3, [r3, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d036      	beq.n	8004e44 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29c      	uxth	r4, r3
 8004de4:	4623      	mov	r3, r4
 8004de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d014      	beq.n	8004e18 <USB_DeactivateEndpoint+0x5c>
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	b29c      	uxth	r4, r3
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	4b6b      	ldr	r3, [pc, #428]	; (8004fc0 <USB_DeactivateEndpoint+0x204>)
 8004e12:	4323      	orrs	r3, r4
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	b29c      	uxth	r4, r3
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <USB_DeactivateEndpoint+0x208>)
 8004e3c:	4323      	orrs	r3, r4
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]
 8004e42:	e144      	b.n	80050ce <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29c      	uxth	r4, r3
 8004e52:	4623      	mov	r3, r4
 8004e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d014      	beq.n	8004e86 <USB_DeactivateEndpoint+0xca>
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	b29c      	uxth	r4, r3
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <USB_DeactivateEndpoint+0x20c>)
 8004e80:	4323      	orrs	r3, r4
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	b29c      	uxth	r4, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	441a      	add	r2, r3
 8004ea8:	4b46      	ldr	r3, [pc, #280]	; (8004fc4 <USB_DeactivateEndpoint+0x208>)
 8004eaa:	4323      	orrs	r3, r4
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	8013      	strh	r3, [r2, #0]
 8004eb0:	e10d      	b.n	80050ce <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f040 8088 	bne.w	8004fcc <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29c      	uxth	r4, r3
 8004eca:	4623      	mov	r3, r4
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d014      	beq.n	8004efe <USB_DeactivateEndpoint+0x142>
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	b29c      	uxth	r4, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	4b34      	ldr	r3, [pc, #208]	; (8004fc8 <USB_DeactivateEndpoint+0x20c>)
 8004ef8:	4323      	orrs	r3, r4
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29c      	uxth	r4, r3
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d014      	beq.n	8004f40 <USB_DeactivateEndpoint+0x184>
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	b29c      	uxth	r4, r3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	441a      	add	r2, r3
 8004f38:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <USB_DeactivateEndpoint+0x204>)
 8004f3a:	4323      	orrs	r3, r4
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	b29c      	uxth	r4, r3
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	441a      	add	r2, r3
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <USB_DeactivateEndpoint+0x204>)
 8004f64:	4323      	orrs	r3, r4
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	b29c      	uxth	r4, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <USB_DeactivateEndpoint+0x208>)
 8004f8e:	4323      	orrs	r3, r4
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	441a      	add	r2, r3
 8004fb6:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <USB_DeactivateEndpoint+0x208>)
 8004fb8:	4323      	orrs	r3, r4
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
 8004fbe:	e086      	b.n	80050ce <USB_DeactivateEndpoint+0x312>
 8004fc0:	ffff80c0 	.word	0xffff80c0
 8004fc4:	ffff8080 	.word	0xffff8080
 8004fc8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d014      	beq.n	800500e <USB_DeactivateEndpoint+0x252>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	b29c      	uxth	r4, r3
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	4b35      	ldr	r3, [pc, #212]	; (80050dc <USB_DeactivateEndpoint+0x320>)
 8005008:	4323      	orrs	r3, r4
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29c      	uxth	r4, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d014      	beq.n	8005050 <USB_DeactivateEndpoint+0x294>
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503c:	b29c      	uxth	r4, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <USB_DeactivateEndpoint+0x324>)
 800504a:	4323      	orrs	r3, r4
 800504c:	b29b      	uxth	r3, r3
 800504e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	b29c      	uxth	r4, r3
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	441a      	add	r2, r3
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <USB_DeactivateEndpoint+0x320>)
 8005074:	4323      	orrs	r3, r4
 8005076:	b29b      	uxth	r3, r3
 8005078:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005090:	b29c      	uxth	r4, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <USB_DeactivateEndpoint+0x328>)
 800509e:	4323      	orrs	r3, r4
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	b29c      	uxth	r4, r3
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <USB_DeactivateEndpoint+0x328>)
 80050c8:	4323      	orrs	r3, r4
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc90      	pop	{r4, r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	ffffc080 	.word	0xffffc080
 80050e0:	ffff80c0 	.word	0xffff80c0
 80050e4:	ffff8080 	.word	0xffff8080

080050e8 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b08d      	sub	sp, #52	; 0x34
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	785b      	ldrb	r3, [r3, #1]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	f040 8160 	bne.w	80053bc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699a      	ldr	r2, [r3, #24]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d909      	bls.n	800511c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	619a      	str	r2, [r3, #24]
 800511a:	e005      	b.n	8005128 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2200      	movs	r2, #0
 8005126:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	7b1b      	ldrb	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d119      	bne.n	8005164 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6959      	ldr	r1, [r3, #20]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	88da      	ldrh	r2, [r3, #6]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	b29b      	uxth	r3, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fba8 	bl	8005892 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005142:	687c      	ldr	r4, [r7, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	441c      	add	r4, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4423      	add	r3, r4
 8005156:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800515a:	461c      	mov	r4, r3
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515e:	b29b      	uxth	r3, r3
 8005160:	8023      	strh	r3, [r4, #0]
 8005162:	e10f      	b.n	8005384 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d065      	beq.n	8005246 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800517a:	687c      	ldr	r4, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d148      	bne.n	8005216 <USB_EPStartXfer+0x12e>
 8005184:	687c      	ldr	r4, [r7, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	441c      	add	r4, r3
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4423      	add	r3, r4
 8005198:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800519c:	461c      	mov	r4, r3
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10e      	bne.n	80051c2 <USB_EPStartXfer+0xda>
 80051a4:	8823      	ldrh	r3, [r4, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	8023      	strh	r3, [r4, #0]
 80051b0:	8823      	ldrh	r3, [r4, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8023      	strh	r3, [r4, #0]
 80051c0:	e03d      	b.n	800523e <USB_EPStartXfer+0x156>
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b3e      	cmp	r3, #62	; 0x3e
 80051c6:	d810      	bhi.n	80051ea <USB_EPStartXfer+0x102>
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <USB_EPStartXfer+0xf6>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	029b      	lsls	r3, r3, #10
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8023      	strh	r3, [r4, #0]
 80051e8:	e029      	b.n	800523e <USB_EPStartXfer+0x156>
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <USB_EPStartXfer+0x118>
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	3b01      	subs	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	b29b      	uxth	r3, r3
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29b      	uxth	r3, r3
 8005212:	8023      	strh	r3, [r4, #0]
 8005214:	e013      	b.n	800523e <USB_EPStartXfer+0x156>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10f      	bne.n	800523e <USB_EPStartXfer+0x156>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	441c      	add	r4, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4423      	add	r3, r4
 8005230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	895b      	ldrh	r3, [r3, #10]
 8005242:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005244:	e063      	b.n	800530e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d148      	bne.n	80052e0 <USB_EPStartXfer+0x1f8>
 800524e:	687c      	ldr	r4, [r7, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	441c      	add	r4, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4423      	add	r3, r4
 8005262:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005266:	461c      	mov	r4, r3
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10e      	bne.n	800528c <USB_EPStartXfer+0x1a4>
 800526e:	8823      	ldrh	r3, [r4, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005276:	b29b      	uxth	r3, r3
 8005278:	8023      	strh	r3, [r4, #0]
 800527a:	8823      	ldrh	r3, [r4, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005286:	b29b      	uxth	r3, r3
 8005288:	8023      	strh	r3, [r4, #0]
 800528a:	e03d      	b.n	8005308 <USB_EPStartXfer+0x220>
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	2b3e      	cmp	r3, #62	; 0x3e
 8005290:	d810      	bhi.n	80052b4 <USB_EPStartXfer+0x1cc>
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	623b      	str	r3, [r7, #32]
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <USB_EPStartXfer+0x1c0>
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	3301      	adds	r3, #1
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8023      	strh	r3, [r4, #0]
 80052b2:	e029      	b.n	8005308 <USB_EPStartXfer+0x220>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <USB_EPStartXfer+0x1e2>
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8023      	strh	r3, [r4, #0]
 80052de:	e013      	b.n	8005308 <USB_EPStartXfer+0x220>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10f      	bne.n	8005308 <USB_EPStartXfer+0x220>
 80052e8:	687c      	ldr	r4, [r7, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	441c      	add	r4, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4423      	add	r3, r4
 80052fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005300:	461c      	mov	r4, r3
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	b29b      	uxth	r3, r3
 8005306:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	891b      	ldrh	r3, [r3, #8]
 800530c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6959      	ldr	r1, [r3, #20]
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	b29b      	uxth	r3, r3
 8005316:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 faba 	bl	8005892 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d115      	bne.n	8005352 <USB_EPStartXfer+0x26a>
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	b29c      	uxth	r4, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <USB_EPStartXfer+0x4cc>)
 800534a:	4323      	orrs	r3, r4
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
 8005350:	e018      	b.n	8005384 <USB_EPStartXfer+0x29c>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	785b      	ldrb	r3, [r3, #1]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d114      	bne.n	8005384 <USB_EPStartXfer+0x29c>
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	b29c      	uxth	r4, r3
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	4b8e      	ldr	r3, [pc, #568]	; (80055b8 <USB_EPStartXfer+0x4d0>)
 800537e:	4323      	orrs	r3, r4
 8005380:	b29b      	uxth	r3, r3
 8005382:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539a:	b29c      	uxth	r4, r3
 800539c:	f084 0310 	eor.w	r3, r4, #16
 80053a0:	b29c      	uxth	r4, r3
 80053a2:	f084 0320 	eor.w	r3, r4, #32
 80053a6:	b29c      	uxth	r4, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	4b82      	ldr	r3, [pc, #520]	; (80055bc <USB_EPStartXfer+0x4d4>)
 80053b4:	4323      	orrs	r3, r4
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8013      	strh	r3, [r2, #0]
 80053ba:	e146      	b.n	800564a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d909      	bls.n	80053dc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	1ad2      	subs	r2, r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	619a      	str	r2, [r3, #24]
 80053da:	e005      	b.n	80053e8 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b1b      	ldrb	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d148      	bne.n	8005482 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053f0:	687c      	ldr	r4, [r7, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	441c      	add	r4, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4423      	add	r3, r4
 8005404:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005408:	461c      	mov	r4, r3
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10e      	bne.n	800542e <USB_EPStartXfer+0x346>
 8005410:	8823      	ldrh	r3, [r4, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005418:	b29b      	uxth	r3, r3
 800541a:	8023      	strh	r3, [r4, #0]
 800541c:	8823      	ldrh	r3, [r4, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29b      	uxth	r3, r3
 800542a:	8023      	strh	r3, [r4, #0]
 800542c:	e0f2      	b.n	8005614 <USB_EPStartXfer+0x52c>
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	2b3e      	cmp	r3, #62	; 0x3e
 8005432:	d810      	bhi.n	8005456 <USB_EPStartXfer+0x36e>
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <USB_EPStartXfer+0x362>
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	b29b      	uxth	r3, r3
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	b29b      	uxth	r3, r3
 8005452:	8023      	strh	r3, [r4, #0]
 8005454:	e0de      	b.n	8005614 <USB_EPStartXfer+0x52c>
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <USB_EPStartXfer+0x384>
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3b01      	subs	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	b29b      	uxth	r3, r3
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	b29b      	uxth	r3, r3
 8005474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547c:	b29b      	uxth	r3, r3
 800547e:	8023      	strh	r3, [r4, #0]
 8005480:	e0c8      	b.n	8005614 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d148      	bne.n	800551c <USB_EPStartXfer+0x434>
 800548a:	687c      	ldr	r4, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	441c      	add	r4, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4423      	add	r3, r4
 800549e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054a2:	461c      	mov	r4, r3
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10e      	bne.n	80054c8 <USB_EPStartXfer+0x3e0>
 80054aa:	8823      	ldrh	r3, [r4, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8023      	strh	r3, [r4, #0]
 80054b6:	8823      	ldrh	r3, [r4, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8023      	strh	r3, [r4, #0]
 80054c6:	e03d      	b.n	8005544 <USB_EPStartXfer+0x45c>
 80054c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d810      	bhi.n	80054f0 <USB_EPStartXfer+0x408>
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <USB_EPStartXfer+0x3fc>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	3301      	adds	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8023      	strh	r3, [r4, #0]
 80054ee:	e029      	b.n	8005544 <USB_EPStartXfer+0x45c>
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <USB_EPStartXfer+0x41e>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	3b01      	subs	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	b29b      	uxth	r3, r3
 800550a:	029b      	lsls	r3, r3, #10
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005516:	b29b      	uxth	r3, r3
 8005518:	8023      	strh	r3, [r4, #0]
 800551a:	e013      	b.n	8005544 <USB_EPStartXfer+0x45c>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10f      	bne.n	8005544 <USB_EPStartXfer+0x45c>
 8005524:	687c      	ldr	r4, [r7, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552c:	b29b      	uxth	r3, r3
 800552e:	441c      	add	r4, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4423      	add	r3, r4
 8005538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800553c:	461c      	mov	r4, r3
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	b29b      	uxth	r3, r3
 8005542:	8023      	strh	r3, [r4, #0]
 8005544:	687c      	ldr	r4, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d14e      	bne.n	80055ec <USB_EPStartXfer+0x504>
 800554e:	687c      	ldr	r4, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	441c      	add	r4, r3
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4423      	add	r3, r4
 8005562:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005566:	461c      	mov	r4, r3
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10e      	bne.n	800558c <USB_EPStartXfer+0x4a4>
 800556e:	8823      	ldrh	r3, [r4, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005576:	b29b      	uxth	r3, r3
 8005578:	8023      	strh	r3, [r4, #0]
 800557a:	8823      	ldrh	r3, [r4, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29b      	uxth	r3, r3
 8005588:	8023      	strh	r3, [r4, #0]
 800558a:	e043      	b.n	8005614 <USB_EPStartXfer+0x52c>
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	2b3e      	cmp	r3, #62	; 0x3e
 8005590:	d816      	bhi.n	80055c0 <USB_EPStartXfer+0x4d8>
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <USB_EPStartXfer+0x4c0>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3301      	adds	r3, #1
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8023      	strh	r3, [r4, #0]
 80055b2:	e02f      	b.n	8005614 <USB_EPStartXfer+0x52c>
 80055b4:	ffff80c0 	.word	0xffff80c0
 80055b8:	ffffc080 	.word	0xffffc080
 80055bc:	ffff8080 	.word	0xffff8080
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <USB_EPStartXfer+0x4ee>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8023      	strh	r3, [r4, #0]
 80055ea:	e013      	b.n	8005614 <USB_EPStartXfer+0x52c>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d10f      	bne.n	8005614 <USB_EPStartXfer+0x52c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	441c      	add	r4, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4423      	add	r3, r4
 8005606:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	b29a      	uxth	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	b29c      	uxth	r4, r3
 800562c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005630:	b29c      	uxth	r4, r3
 8005632:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005636:	b29c      	uxth	r4, r3
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	4b04      	ldr	r3, [pc, #16]	; (8005654 <USB_EPStartXfer+0x56c>)
 8005644:	4323      	orrs	r3, r4
 8005646:	b29b      	uxth	r3, r3
 8005648:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3734      	adds	r7, #52	; 0x34
 8005650:	46bd      	mov	sp, r7
 8005652:	bd90      	pop	{r4, r7, pc}
 8005654:	ffff8080 	.word	0xffff8080

08005658 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005658:	b490      	push	{r4, r7}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	785b      	ldrb	r3, [r3, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d018      	beq.n	800569c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	b29c      	uxth	r4, r3
 8005682:	f084 0310 	eor.w	r3, r4, #16
 8005686:	b29c      	uxth	r4, r3
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <USB_EPSetStall+0x80>)
 8005694:	4323      	orrs	r3, r4
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
 800569a:	e017      	b.n	80056cc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	b29c      	uxth	r4, r3
 80056b4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80056b8:	b29c      	uxth	r4, r3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	441a      	add	r2, r3
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <USB_EPSetStall+0x80>)
 80056c6:	4323      	orrs	r3, r4
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc90      	pop	{r4, r7}
 80056d6:	4770      	bx	lr
 80056d8:	ffff8080 	.word	0xffff8080

080056dc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056dc:	b490      	push	{r4, r7}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	7b1b      	ldrb	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d17d      	bne.n	80057ea <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d03d      	beq.n	8005772 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29c      	uxth	r4, r3
 8005704:	4623      	mov	r3, r4
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d014      	beq.n	8005738 <USB_EPClearStall+0x5c>
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	b29c      	uxth	r4, r3
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <USB_EPClearStall+0x11c>)
 8005732:	4323      	orrs	r3, r4
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d054      	beq.n	80057ea <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	b29c      	uxth	r4, r3
 8005758:	f084 0320 	eor.w	r3, r4, #32
 800575c:	b29c      	uxth	r4, r3
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <USB_EPClearStall+0x120>)
 800576a:	4323      	orrs	r3, r4
 800576c:	b29b      	uxth	r3, r3
 800576e:	8013      	strh	r3, [r2, #0]
 8005770:	e03b      	b.n	80057ea <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29c      	uxth	r4, r3
 8005780:	4623      	mov	r3, r4
 8005782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <USB_EPClearStall+0xd8>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	b29c      	uxth	r4, r3
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <USB_EPClearStall+0x124>)
 80057ae:	4323      	orrs	r3, r4
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ca:	b29c      	uxth	r4, r3
 80057cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80057d0:	b29c      	uxth	r4, r3
 80057d2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80057d6:	b29c      	uxth	r4, r3
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <USB_EPClearStall+0x120>)
 80057e4:	4323      	orrs	r3, r4
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc90      	pop	{r4, r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	ffff80c0 	.word	0xffff80c0
 80057fc:	ffff8080 	.word	0xffff8080
 8005800:	ffffc080 	.word	0xffffc080

08005804 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005868:	b29b      	uxth	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800586c:	68fb      	ldr	r3, [r7, #12]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005892:	b480      	push	{r7}
 8005894:	b08d      	sub	sp, #52	; 0x34
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	4611      	mov	r1, r2
 800589e:	461a      	mov	r2, r3
 80058a0:	460b      	mov	r3, r1
 80058a2:	80fb      	strh	r3, [r7, #6]
 80058a4:	4613      	mov	r3, r2
 80058a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058a8:	88bb      	ldrh	r3, [r7, #4]
 80058aa:	3301      	adds	r3, #1
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c8:	e01b      	b.n	8005902 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	3302      	adds	r3, #2
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	3301      	adds	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	3b01      	subs	r3, #1
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e0      	bne.n	80058ca <USB_WritePMA+0x38>
  }
}
 8005908:	bf00      	nop
 800590a:	3734      	adds	r7, #52	; 0x34
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4611      	mov	r1, r2
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	80fb      	strh	r3, [r7, #6]
 8005926:	4613      	mov	r3, r2
 8005928:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800592a:	88bb      	ldrh	r3, [r7, #4]
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	b29b      	uxth	r3, r3
 8005930:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	e018      	b.n	800597e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	3302      	adds	r3, #2
 8005958:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3301      	adds	r3, #1
 8005966:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b2da      	uxtb	r2, r3
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3b01      	subs	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e3      	bne.n	800594c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005984:	88bb      	ldrh	r3, [r7, #4]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	b2da      	uxtb	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	701a      	strb	r2, [r3, #0]
  }
}
 80059a0:	bf00      	nop
 80059a2:	372c      	adds	r7, #44	; 0x2c
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7c1b      	ldrb	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d115      	bne.n	80059f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c8:	2202      	movs	r2, #2
 80059ca:	2181      	movs	r1, #129	; 0x81
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fe80 	bl	80076d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059dc:	2202      	movs	r2, #2
 80059de:	2101      	movs	r1, #1
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fe76 	bl	80076d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059ee:	e012      	b.n	8005a16 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	2202      	movs	r2, #2
 80059f4:	2181      	movs	r1, #129	; 0x81
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fe6b 	bl	80076d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a02:	2340      	movs	r3, #64	; 0x40
 8005a04:	2202      	movs	r2, #2
 8005a06:	2101      	movs	r1, #1
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fe62 	bl	80076d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a16:	2308      	movs	r3, #8
 8005a18:	2203      	movs	r2, #3
 8005a1a:	2182      	movs	r1, #130	; 0x82
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fe58 	bl	80076d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a2c:	f001 ffa8 	bl	8007980 <USBD_static_malloc>
 8005a30:	4602      	mov	r2, r0
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	e026      	b.n	8005a96 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7c1b      	ldrb	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 ff12 	bl	80078a8 <USBD_LL_PrepareReceive>
 8005a84:	e007      	b.n	8005a96 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a8c:	2340      	movs	r3, #64	; 0x40
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 ff09 	bl	80078a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ab0:	2181      	movs	r1, #129	; 0x81
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fe33 	bl	800771e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005abe:	2101      	movs	r1, #1
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fe2c 	bl	800771e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ace:	2182      	movs	r1, #130	; 0x82
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fe24 	bl	800771e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00e      	beq.n	8005b04 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 ff50 	bl	800799c <USBD_static_free>
    pdev->pClassData = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b24:	2300      	movs	r3, #0
 8005b26:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d039      	beq.n	8005bac <USBD_CDC_Setup+0x9e>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d17c      	bne.n	8005c36 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	88db      	ldrh	r3, [r3, #6]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d029      	beq.n	8005b98 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da11      	bge.n	8005b72 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	88d2      	ldrh	r2, [r2, #6]
 8005b60:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b62:	6939      	ldr	r1, [r7, #16]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	88db      	ldrh	r3, [r3, #6]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 f9fa 	bl	8006f64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b70:	e068      	b.n	8005c44 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	785a      	ldrb	r2, [r3, #1]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	88db      	ldrh	r3, [r3, #6]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b88:	6939      	ldr	r1, [r7, #16]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	88db      	ldrh	r3, [r3, #6]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fa15 	bl	8006fc0 <USBD_CtlPrepareRx>
      break;
 8005b96:	e055      	b.n	8005c44 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	7850      	ldrb	r0, [r2, #1]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	4798      	blx	r3
      break;
 8005baa:	e04b      	b.n	8005c44 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b0a      	cmp	r3, #10
 8005bb2:	d017      	beq.n	8005be4 <USBD_CDC_Setup+0xd6>
 8005bb4:	2b0b      	cmp	r3, #11
 8005bb6:	d029      	beq.n	8005c0c <USBD_CDC_Setup+0xfe>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d133      	bne.n	8005c24 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d107      	bne.n	8005bd6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 f9c8 	bl	8006f64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bd4:	e02e      	b.n	8005c34 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f958 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005bde:	2302      	movs	r3, #2
 8005be0:	75fb      	strb	r3, [r7, #23]
          break;
 8005be2:	e027      	b.n	8005c34 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d107      	bne.n	8005bfe <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bee:	f107 030f 	add.w	r3, r7, #15
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f9b4 	bl	8006f64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bfc:	e01a      	b.n	8005c34 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f944 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c06:	2302      	movs	r3, #2
 8005c08:	75fb      	strb	r3, [r7, #23]
          break;
 8005c0a:	e013      	b.n	8005c34 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d00d      	beq.n	8005c32 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 f938 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c22:	e006      	b.n	8005c32 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 f931 	bl	8006e8e <USBD_CtlError>
          ret = USBD_FAIL;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c30:	e000      	b.n	8005c34 <USBD_CDC_Setup+0x126>
          break;
 8005c32:	bf00      	nop
      }
      break;
 8005c34:	e006      	b.n	8005c44 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 f928 	bl	8006e8e <USBD_CtlError>
      ret = USBD_FAIL;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	75fb      	strb	r3, [r7, #23]
      break;
 8005c42:	bf00      	nop
  }

  return ret;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c60:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c68:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d037      	beq.n	8005ce4 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	331c      	adds	r3, #28
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d026      	beq.n	8005cd8 <USBD_CDC_DataIn+0x8a>
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	331c      	adds	r3, #28
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	0152      	lsls	r2, r2, #5
 8005ca2:	440a      	add	r2, r1
 8005ca4:	3238      	adds	r2, #56	; 0x38
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cac:	fb02 f201 	mul.w	r2, r2, r1
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	331c      	adds	r3, #28
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cca:	78f9      	ldrb	r1, [r7, #3]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f001 fdc6 	bl	8007862 <USBD_LL_Transmit>
 8005cd6:	e003      	b.n	8005ce0 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fdf1 	bl	80078ee <USBD_LL_GetRxDataSize>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d32:	4611      	mov	r1, r2
 8005d34:	4798      	blx	r3

    return USBD_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <USBD_CDC_EP0_RxReady+0x46>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	d010      	beq.n	8005d8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2243      	movs	r2, #67	; 0x43
 8005da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005da2:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	20000094 	.word	0x20000094

08005db4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2243      	movs	r2, #67	; 0x43
 8005dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005dc2:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	20000050 	.word	0x20000050

08005dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2243      	movs	r2, #67	; 0x43
 8005de0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	200000d8 	.word	0x200000d8

08005df4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	220a      	movs	r2, #10
 8005e00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	2000000c 	.word	0x2000000c

08005e14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005e1e:	2302      	movs	r3, #2
 8005e20:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d017      	beq.n	8005ee8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	7c1b      	ldrb	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eca:	2101      	movs	r1, #1
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 fceb 	bl	80078a8 <USBD_LL_PrepareReceive>
 8005ed2:	e007      	b.n	8005ee4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eda:	2340      	movs	r3, #64	; 0x40
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fce2 	bl	80078a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e000      	b.n	8005eea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ee8:	2302      	movs	r3, #2
  }
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f06:	2302      	movs	r3, #2
 8005f08:	e01a      	b.n	8005f40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	79fa      	ldrb	r2, [r7, #7]
 8005f36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f001 fb4f 	bl	80075dc <USBD_LL_Init>

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d006      	beq.n	8005f6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e001      	b.n	8005f6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 fb89 	bl	800769c <USBD_LL_Start>

  return USBD_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00c      	beq.n	8005fde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	78fa      	ldrb	r2, [r7, #3]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	4611      	mov	r1, r2
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fef7 	bl	8006e14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006034:	461a      	mov	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2b01      	cmp	r3, #1
 8006048:	d00c      	beq.n	8006064 <USBD_LL_SetupStage+0x56>
 800604a:	2b01      	cmp	r3, #1
 800604c:	d302      	bcc.n	8006054 <USBD_LL_SetupStage+0x46>
 800604e:	2b02      	cmp	r3, #2
 8006050:	d010      	beq.n	8006074 <USBD_LL_SetupStage+0x66>
 8006052:	e017      	b.n	8006084 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f9cd 	bl	80063fc <USBD_StdDevReq>
      break;
 8006062:	e01a      	b.n	800609a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa2f 	bl	80064d0 <USBD_StdItfReq>
      break;
 8006072:	e012      	b.n	800609a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa6d 	bl	800655c <USBD_StdEPReq>
      break;
 8006082:	e00a      	b.n	800609a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800608a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fb62 	bl	800775c <USBD_LL_StallEP>
      break;
 8006098:	bf00      	nop
  }

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	460b      	mov	r3, r1
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d14b      	bne.n	8006150 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d134      	bne.n	8006134 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d919      	bls.n	800610a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d203      	bcs.n	80060f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	e002      	b.n	80060fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 ff7a 	bl	8006ffc <USBD_CtlContinueRx>
 8006108:	e038      	b.n	800617c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800611c:	2b03      	cmp	r3, #3
 800611e:	d105      	bne.n	800612c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 ff77 	bl	8007020 <USBD_CtlSendStatus>
 8006132:	e023      	b.n	800617c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800613a:	2b05      	cmp	r3, #5
 800613c:	d11e      	bne.n	800617c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006146:	2100      	movs	r1, #0
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 fb07 	bl	800775c <USBD_LL_StallEP>
 800614e:	e015      	b.n	800617c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006162:	2b03      	cmp	r3, #3
 8006164:	d108      	bne.n	8006178 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	7afa      	ldrb	r2, [r7, #11]
 8006170:	4611      	mov	r1, r2
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	4798      	blx	r3
 8006176:	e001      	b.n	800617c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006178:	2302      	movs	r3, #2
 800617a:	e000      	b.n	800617e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	460b      	mov	r3, r1
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d17f      	bne.n	800629a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3314      	adds	r3, #20
 800619e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d15c      	bne.n	8006264 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d915      	bls.n	80061e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	1ad2      	subs	r2, r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fee4 	bl	8006f9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d4:	2300      	movs	r3, #0
 80061d6:	2200      	movs	r2, #0
 80061d8:	2100      	movs	r1, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fb64 	bl	80078a8 <USBD_LL_PrepareReceive>
 80061e0:	e04e      	b.n	8006280 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	6912      	ldr	r2, [r2, #16]
 80061ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80061ee:	fb02 f201 	mul.w	r2, r2, r1
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11c      	bne.n	8006232 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006200:	429a      	cmp	r2, r3
 8006202:	d316      	bcc.n	8006232 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d20f      	bcs.n	8006232 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fec0 	bl	8006f9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006224:	2300      	movs	r3, #0
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 fb3c 	bl	80078a8 <USBD_LL_PrepareReceive>
 8006230:	e026      	b.n	8006280 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006244:	2b03      	cmp	r3, #3
 8006246:	d105      	bne.n	8006254 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f001 fa80 	bl	800775c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fef2 	bl	8007046 <USBD_CtlReceiveStatus>
 8006262:	e00d      	b.n	8006280 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800626a:	2b04      	cmp	r3, #4
 800626c:	d004      	beq.n	8006278 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f001 fa6e 	bl	800775c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006286:	2b01      	cmp	r3, #1
 8006288:	d11d      	bne.n	80062c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fe82 	bl	8005f94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006298:	e015      	b.n	80062c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00d      	beq.n	80062c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d108      	bne.n	80062c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	7afa      	ldrb	r2, [r7, #11]
 80062ba:	4611      	mov	r1, r2
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	4798      	blx	r3
 80062c0:	e001      	b.n	80062c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062c2:	2302      	movs	r3, #2
 80062c4:	e000      	b.n	80062c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	2200      	movs	r2, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 f9f7 	bl	80076d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2240      	movs	r2, #64	; 0x40
 80062f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	2200      	movs	r2, #0
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 f9e9 	bl	80076d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2240      	movs	r2, #64	; 0x40
 800630a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6852      	ldr	r2, [r2, #4]
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	4611      	mov	r1, r2
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
  }

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d105      	bne.n	80063ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d10b      	bne.n	80063f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006412:	2b20      	cmp	r3, #32
 8006414:	d004      	beq.n	8006420 <USBD_StdDevReq+0x24>
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d002      	beq.n	8006420 <USBD_StdDevReq+0x24>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <USBD_StdDevReq+0x34>
 800641e:	e04c      	b.n	80064ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
      break;
 800642e:	e049      	b.n	80064c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b09      	cmp	r3, #9
 8006436:	d83a      	bhi.n	80064ae <USBD_StdDevReq+0xb2>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <USBD_StdDevReq+0x44>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006491 	.word	0x08006491
 8006444:	080064a5 	.word	0x080064a5
 8006448:	080064af 	.word	0x080064af
 800644c:	0800649b 	.word	0x0800649b
 8006450:	080064af 	.word	0x080064af
 8006454:	08006473 	.word	0x08006473
 8006458:	08006469 	.word	0x08006469
 800645c:	080064af 	.word	0x080064af
 8006460:	08006487 	.word	0x08006487
 8006464:	0800647d 	.word	0x0800647d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9d4 	bl	8006818 <USBD_GetDescriptor>
          break;
 8006470:	e022      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb61 	bl	8006b3c <USBD_SetAddress>
          break;
 800647a:	e01d      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fb9e 	bl	8006bc0 <USBD_SetConfig>
          break;
 8006484:	e018      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fc27 	bl	8006cdc <USBD_GetConfig>
          break;
 800648e:	e013      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fc56 	bl	8006d44 <USBD_GetStatus>
          break;
 8006498:	e00e      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fc84 	bl	8006daa <USBD_SetFeature>
          break;
 80064a2:	e009      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fc93 	bl	8006dd2 <USBD_ClrFeature>
          break;
 80064ac:	e004      	b.n	80064b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fcec 	bl	8006e8e <USBD_CtlError>
          break;
 80064b6:	bf00      	nop
      }
      break;
 80064b8:	e004      	b.n	80064c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fce6 	bl	8006e8e <USBD_CtlError>
      break;
 80064c2:	bf00      	nop
  }

  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop

080064d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d003      	beq.n	80064f2 <USBD_StdItfReq+0x22>
 80064ea:	2b40      	cmp	r3, #64	; 0x40
 80064ec:	d001      	beq.n	80064f2 <USBD_StdItfReq+0x22>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d12a      	bne.n	8006548 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f8:	3b01      	subs	r3, #1
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d81d      	bhi.n	800653a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	889b      	ldrh	r3, [r3, #4]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d813      	bhi.n	8006530 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
 8006516:	4603      	mov	r3, r0
 8006518:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	88db      	ldrh	r3, [r3, #6]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d110      	bne.n	8006544 <USBD_StdItfReq+0x74>
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10d      	bne.n	8006544 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fd79 	bl	8007020 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800652e:	e009      	b.n	8006544 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fcab 	bl	8006e8e <USBD_CtlError>
          break;
 8006538:	e004      	b.n	8006544 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fca6 	bl	8006e8e <USBD_CtlError>
          break;
 8006542:	e000      	b.n	8006546 <USBD_StdItfReq+0x76>
          break;
 8006544:	bf00      	nop
      }
      break;
 8006546:	e004      	b.n	8006552 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fc9f 	bl	8006e8e <USBD_CtlError>
      break;
 8006550:	bf00      	nop
  }

  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	889b      	ldrh	r3, [r3, #4]
 800656e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006578:	2b20      	cmp	r3, #32
 800657a:	d004      	beq.n	8006586 <USBD_StdEPReq+0x2a>
 800657c:	2b40      	cmp	r3, #64	; 0x40
 800657e:	d002      	beq.n	8006586 <USBD_StdEPReq+0x2a>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <USBD_StdEPReq+0x3a>
 8006584:	e13d      	b.n	8006802 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
      break;
 8006594:	e13a      	b.n	800680c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d10a      	bne.n	80065b8 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	e12a      	b.n	800680e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d03e      	beq.n	800663e <USBD_StdEPReq+0xe2>
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d002      	beq.n	80065ca <USBD_StdEPReq+0x6e>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d070      	beq.n	80066aa <USBD_StdEPReq+0x14e>
 80065c8:	e115      	b.n	80067f6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d002      	beq.n	80065da <USBD_StdEPReq+0x7e>
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d015      	beq.n	8006604 <USBD_StdEPReq+0xa8>
 80065d8:	e02b      	b.n	8006632 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <USBD_StdEPReq+0x9e>
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d009      	beq.n	80065fa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 f8b6 	bl	800775c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f8b2 	bl	800775c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065f8:	e020      	b.n	800663c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fc46 	bl	8006e8e <USBD_CtlError>
              break;
 8006602:	e01b      	b.n	800663c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	885b      	ldrh	r3, [r3, #2]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10e      	bne.n	800662a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <USBD_StdEPReq+0xce>
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d008      	beq.n	800662a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	88db      	ldrh	r3, [r3, #6]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f899 	bl	800775c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fcf8 	bl	8007020 <USBD_CtlSendStatus>

              break;
 8006630:	e004      	b.n	800663c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fc2a 	bl	8006e8e <USBD_CtlError>
              break;
 800663a:	bf00      	nop
          }
          break;
 800663c:	e0e0      	b.n	8006800 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	2b02      	cmp	r3, #2
 8006646:	d002      	beq.n	800664e <USBD_StdEPReq+0xf2>
 8006648:	2b03      	cmp	r3, #3
 800664a:	d015      	beq.n	8006678 <USBD_StdEPReq+0x11c>
 800664c:	e026      	b.n	800669c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00c      	beq.n	800666e <USBD_StdEPReq+0x112>
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d009      	beq.n	800666e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 f87c 	bl	800775c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006664:	2180      	movs	r1, #128	; 0x80
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f878 	bl	800775c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800666c:	e01c      	b.n	80066a8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fc0c 	bl	8006e8e <USBD_CtlError>
              break;
 8006676:	e017      	b.n	80066a8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	885b      	ldrh	r3, [r3, #2]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d112      	bne.n	80066a6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d004      	beq.n	8006694 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 f883 	bl	800779a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fcc3 	bl	8007020 <USBD_CtlSendStatus>
              }
              break;
 800669a:	e004      	b.n	80066a6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fbf5 	bl	8006e8e <USBD_CtlError>
              break;
 80066a4:	e000      	b.n	80066a8 <USBD_StdEPReq+0x14c>
              break;
 80066a6:	bf00      	nop
          }
          break;
 80066a8:	e0aa      	b.n	8006800 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d002      	beq.n	80066ba <USBD_StdEPReq+0x15e>
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d032      	beq.n	800671e <USBD_StdEPReq+0x1c2>
 80066b8:	e097      	b.n	80067ea <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <USBD_StdEPReq+0x174>
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d004      	beq.n	80066d0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fbe0 	bl	8006e8e <USBD_CtlError>
                break;
 80066ce:	e091      	b.n	80067f4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0b      	bge.n	80066f0 <USBD_StdEPReq+0x194>
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	3310      	adds	r3, #16
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	3304      	adds	r3, #4
 80066ee:	e00b      	b.n	8006708 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4413      	add	r3, r2
 8006706:	3304      	adds	r3, #4
 8006708:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2202      	movs	r2, #2
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc24 	bl	8006f64 <USBD_CtlSendData>
              break;
 800671c:	e06a      	b.n	80067f4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800671e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006722:	2b00      	cmp	r3, #0
 8006724:	da11      	bge.n	800674a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	f003 020f 	and.w	r2, r3, #15
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3318      	adds	r3, #24
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d117      	bne.n	8006770 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fba3 	bl	8006e8e <USBD_CtlError>
                  break;
 8006748:	e054      	b.n	80067f4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb90 	bl	8006e8e <USBD_CtlError>
                  break;
 800676e:	e041      	b.n	80067f4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	da0b      	bge.n	8006790 <USBD_StdEPReq+0x234>
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3310      	adds	r3, #16
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	3304      	adds	r3, #4
 800678e:	e00b      	b.n	80067a8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006790:	7bbb      	ldrb	r3, [r7, #14]
 8006792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	3304      	adds	r3, #4
 80067a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <USBD_StdEPReq+0x25a>
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b80      	cmp	r3, #128	; 0x80
 80067b4:	d103      	bne.n	80067be <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e00e      	b.n	80067dc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 f808 	bl	80077d8 <USBD_LL_IsStallEP>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e002      	b.n	80067dc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2202      	movs	r2, #2
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fbbe 	bl	8006f64 <USBD_CtlSendData>
              break;
 80067e8:	e004      	b.n	80067f4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb4e 	bl	8006e8e <USBD_CtlError>
              break;
 80067f2:	bf00      	nop
          }
          break;
 80067f4:	e004      	b.n	8006800 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fb48 	bl	8006e8e <USBD_CtlError>
          break;
 80067fe:	bf00      	nop
      }
      break;
 8006800:	e004      	b.n	800680c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fb42 	bl	8006e8e <USBD_CtlError>
      break;
 800680a:	bf00      	nop
  }

  return ret;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	885b      	ldrh	r3, [r3, #2]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	2b0e      	cmp	r3, #14
 800683a:	f200 8152 	bhi.w	8006ae2 <USBD_GetDescriptor+0x2ca>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <USBD_GetDescriptor+0x2c>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	080068b5 	.word	0x080068b5
 8006848:	080068cd 	.word	0x080068cd
 800684c:	0800690d 	.word	0x0800690d
 8006850:	08006ae3 	.word	0x08006ae3
 8006854:	08006ae3 	.word	0x08006ae3
 8006858:	08006a83 	.word	0x08006a83
 800685c:	08006aaf 	.word	0x08006aaf
 8006860:	08006ae3 	.word	0x08006ae3
 8006864:	08006ae3 	.word	0x08006ae3
 8006868:	08006ae3 	.word	0x08006ae3
 800686c:	08006ae3 	.word	0x08006ae3
 8006870:	08006ae3 	.word	0x08006ae3
 8006874:	08006ae3 	.word	0x08006ae3
 8006878:	08006ae3 	.word	0x08006ae3
 800687c:	08006881 	.word	0x08006881
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7c12      	ldrb	r2, [r2, #16]
 8006898:	f107 0108 	add.w	r1, r7, #8
 800689c:	4610      	mov	r0, r2
 800689e:	4798      	blx	r3
 80068a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a2:	e126      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 faf1 	bl	8006e8e <USBD_CtlError>
        err++;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	3301      	adds	r3, #1
 80068b0:	72fb      	strb	r3, [r7, #11]
      break;
 80068b2:	e11e      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
      break;
 80068ca:	e112      	b.n	8006af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	7c1b      	ldrb	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f107 0208 	add.w	r2, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ee:	e100      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f107 0208 	add.w	r2, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3301      	adds	r3, #1
 8006906:	2202      	movs	r2, #2
 8006908:	701a      	strb	r2, [r3, #0]
      break;
 800690a:	e0f2      	b.n	8006af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	885b      	ldrh	r3, [r3, #2]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b05      	cmp	r3, #5
 8006914:	f200 80ac 	bhi.w	8006a70 <USBD_GetDescriptor+0x258>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBD_GetDescriptor+0x108>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006939 	.word	0x08006939
 8006924:	0800696d 	.word	0x0800696d
 8006928:	080069a1 	.word	0x080069a1
 800692c:	080069d5 	.word	0x080069d5
 8006930:	08006a09 	.word	0x08006a09
 8006934:	08006a3d 	.word	0x08006a3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e091      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa95 	bl	8006e8e <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e089      	b.n	8006a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e077      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa7b 	bl	8006e8e <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e06f      	b.n	8006a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e05d      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa61 	bl	8006e8e <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e055      	b.n	8006a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e043      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa47 	bl	8006e8e <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e03b      	b.n	8006a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e029      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa2d 	bl	8006e8e <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e021      	b.n	8006a80 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5e:	e00f      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa13 	bl	8006e8e <USBD_CtlError>
            err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6e:	e007      	b.n	8006a80 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa0b 	bl	8006e8e <USBD_CtlError>
          err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a7e:	e038      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
 8006a80:	e037      	b.n	8006af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7c1b      	ldrb	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f107 0208 	add.w	r2, r7, #8
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
 8006a9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9c:	e029      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9f4 	bl	8006e8e <USBD_CtlError>
        err++;
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8006aac:	e021      	b.n	8006af2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7c1b      	ldrb	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f107 0208 	add.w	r2, r7, #8
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4798      	blx	r3
 8006ac6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	2207      	movs	r2, #7
 8006ace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad0:	e00f      	b.n	8006af2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9da 	bl	8006e8e <USBD_CtlError>
        err++;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	3301      	adds	r3, #1
 8006ade:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae0:	e007      	b.n	8006af2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9d2 	bl	8006e8e <USBD_CtlError>
      err++;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	3301      	adds	r3, #1
 8006aee:	72fb      	strb	r3, [r7, #11]
      break;
 8006af0:	bf00      	nop
  }

  if (err != 0U)
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11c      	bne.n	8006b32 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <USBD_GetDescriptor+0x30a>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88da      	ldrh	r2, [r3, #6]
 8006b0a:	893b      	ldrh	r3, [r7, #8]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bf28      	it	cs
 8006b10:	4613      	movcs	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b16:	893b      	ldrh	r3, [r7, #8]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa21 	bl	8006f64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa78 	bl	8007020 <USBD_CtlSendStatus>
 8006b30:	e000      	b.n	8006b34 <USBD_GetDescriptor+0x31c>
    return;
 8006b32:	bf00      	nop
    }
  }
}
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	889b      	ldrh	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d130      	bne.n	8006bb0 <USBD_SetAddress+0x74>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88db      	ldrh	r3, [r3, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d12c      	bne.n	8006bb0 <USBD_SetAddress+0x74>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5c:	d828      	bhi.n	8006bb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d104      	bne.n	8006b7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f989 	bl	8006e8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7c:	e01c      	b.n	8006bb8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7bfa      	ldrb	r2, [r7, #15]
 8006b82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fe4a 	bl	8007824 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa45 	bl	8007020 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	e008      	b.n	8006bb8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	e003      	b.n	8006bb8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f96b 	bl	8006e8e <USBD_CtlError>
  }
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd4:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d904      	bls.n	8006be6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f955 	bl	8006e8e <USBD_CtlError>
 8006be4:	e075      	b.n	8006cd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d002      	beq.n	8006bf6 <USBD_SetConfig+0x36>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d023      	beq.n	8006c3c <USBD_SetConfig+0x7c>
 8006bf4:	e062      	b.n	8006cbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c10:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f9c7 	bl	8005faa <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d104      	bne.n	8006c2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f932 	bl	8006e8e <USBD_CtlError>
            return;
 8006c2a:	e052      	b.n	8006cd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9f7 	bl	8007020 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c32:	e04e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9f3 	bl	8007020 <USBD_CtlSendStatus>
        break;
 8006c3a:	e04a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f9c3 	bl	8005fe8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9dc 	bl	8007020 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c68:	e033      	b.n	8006cd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d01d      	beq.n	8006cb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f9b1 	bl	8005fe8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f987 	bl	8005faa <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d104      	bne.n	8006cac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8f2 	bl	8006e8e <USBD_CtlError>
            return;
 8006caa:	e012      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9b7 	bl	8007020 <USBD_CtlSendStatus>
        break;
 8006cb2:	e00e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9b3 	bl	8007020 <USBD_CtlSendStatus>
        break;
 8006cba:	e00a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8e5 	bl	8006e8e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff f98c 	bl	8005fe8 <USBD_ClrClassConfig>
        break;
 8006cd0:	bf00      	nop
    }
  }
}
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200007d2 	.word	0x200007d2

08006cdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d004      	beq.n	8006cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8cc 	bl	8006e8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cf6:	e021      	b.n	8006d3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	db17      	blt.n	8006d32 <USBD_GetConfig+0x56>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	dd02      	ble.n	8006d0c <USBD_GetConfig+0x30>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d00b      	beq.n	8006d22 <USBD_GetConfig+0x46>
 8006d0a:	e012      	b.n	8006d32 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3308      	adds	r3, #8
 8006d16:	2201      	movs	r2, #1
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f922 	bl	8006f64 <USBD_CtlSendData>
        break;
 8006d20:	e00c      	b.n	8006d3c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2201      	movs	r2, #1
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f91a 	bl	8006f64 <USBD_CtlSendData>
        break;
 8006d30:	e004      	b.n	8006d3c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8aa 	bl	8006e8e <USBD_CtlError>
        break;
 8006d3a:	bf00      	nop
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	3b01      	subs	r3, #1
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d81e      	bhi.n	8006d98 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d004      	beq.n	8006d6c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f892 	bl	8006e8e <USBD_CtlError>
        break;
 8006d6a:	e01a      	b.n	8006da2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f043 0202 	orr.w	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8e7 	bl	8006f64 <USBD_CtlSendData>
      break;
 8006d96:	e004      	b.n	8006da2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f877 	bl	8006e8e <USBD_CtlError>
      break;
 8006da0:	bf00      	nop
  }
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d106      	bne.n	8006dca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f92b 	bl	8007020 <USBD_CtlSendStatus>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d80b      	bhi.n	8006e00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10c      	bne.n	8006e0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f911 	bl	8007020 <USBD_CtlSendStatus>
      }
      break;
 8006dfe:	e004      	b.n	8006e0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f843 	bl	8006e8e <USBD_CtlError>
      break;
 8006e08:	e000      	b.n	8006e0c <USBD_ClrFeature+0x3a>
      break;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785a      	ldrb	r2, [r3, #1]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	3302      	adds	r3, #2
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3303      	adds	r3, #3
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	3305      	adds	r3, #5
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3306      	adds	r3, #6
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3307      	adds	r3, #7
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	80da      	strh	r2, [r3, #6]

}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e98:	2180      	movs	r1, #128	; 0x80
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc5e 	bl	800775c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc5a 	bl	800775c <USBD_LL_StallEP>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d032      	beq.n	8006f2c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f834 	bl	8006f34 <USBD_GetLen>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	75fa      	strb	r2, [r7, #23]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	7812      	ldrb	r2, [r2, #0]
 8006eea:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	75fa      	strb	r2, [r7, #23]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	2203      	movs	r2, #3
 8006efa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006efc:	e012      	b.n	8006f24 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	60fa      	str	r2, [r7, #12]
 8006f04:	7dfa      	ldrb	r2, [r7, #23]
 8006f06:	1c51      	adds	r1, r2, #1
 8006f08:	75f9      	strb	r1, [r7, #23]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	440a      	add	r2, r1
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	75fa      	strb	r2, [r7, #23]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e8      	bne.n	8006efe <USBD_GetString+0x4e>
    }
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f40:	e005      	b.n	8006f4e <USBD_GetLen+0x1a>
  {
    len++;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	3301      	adds	r3, #1
 8006f46:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f5      	bne.n	8006f42 <USBD_GetLen+0xe>
  }

  return len;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f7a:	88fa      	ldrh	r2, [r7, #6]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fc68 	bl	8007862 <USBD_LL_Transmit>

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fc56 	bl	8007862 <USBD_LL_Transmit>

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	2100      	movs	r1, #0
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fc5b 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	2100      	movs	r1, #0
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fc49 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2204      	movs	r2, #4
 800702c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007030:	2300      	movs	r3, #0
 8007032:	2200      	movs	r2, #0
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fc13 	bl	8007862 <USBD_LL_Transmit>

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2205      	movs	r2, #5
 8007052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007056:	2300      	movs	r3, #0
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc23 	bl	80078a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007070:	2200      	movs	r2, #0
 8007072:	4912      	ldr	r1, [pc, #72]	; (80070bc <MX_USB_Device_Init+0x50>)
 8007074:	4812      	ldr	r0, [pc, #72]	; (80070c0 <MX_USB_Device_Init+0x54>)
 8007076:	f7fe ff3c 	bl	8005ef2 <USBD_Init>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007080:	f7f9 fb25 	bl	80006ce <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007084:	490f      	ldr	r1, [pc, #60]	; (80070c4 <MX_USB_Device_Init+0x58>)
 8007086:	480e      	ldr	r0, [pc, #56]	; (80070c0 <MX_USB_Device_Init+0x54>)
 8007088:	f7fe ff5e 	bl	8005f48 <USBD_RegisterClass>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007092:	f7f9 fb1c 	bl	80006ce <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007096:	490c      	ldr	r1, [pc, #48]	; (80070c8 <MX_USB_Device_Init+0x5c>)
 8007098:	4809      	ldr	r0, [pc, #36]	; (80070c0 <MX_USB_Device_Init+0x54>)
 800709a:	f7fe febb 	bl	8005e14 <USBD_CDC_RegisterInterface>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80070a4:	f7f9 fb13 	bl	80006ce <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <MX_USB_Device_Init+0x54>)
 80070aa:	f7fe ff67 	bl	8005f7c <USBD_Start>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80070b4:	f7f9 fb0b 	bl	80006ce <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80070b8:	bf00      	nop
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	2000012c 	.word	0x2000012c
 80070c0:	20000b54 	.word	0x20000b54
 80070c4:	20000018 	.word	0x20000018
 80070c8:	2000011c 	.word	0x2000011c

080070cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070d0:	2200      	movs	r2, #0
 80070d2:	4905      	ldr	r1, [pc, #20]	; (80070e8 <CDC_Init_FS+0x1c>)
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <CDC_Init_FS+0x20>)
 80070d6:	f7fe feb4 	bl	8005e42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070da:	4905      	ldr	r1, [pc, #20]	; (80070f0 <CDC_Init_FS+0x24>)
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <CDC_Init_FS+0x20>)
 80070de:	f7fe feca 	bl	8005e76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20001200 	.word	0x20001200
 80070ec:	20000b54 	.word	0x20000b54
 80070f0:	20000e18 	.word	0x20000e18

080070f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
 8007110:	4613      	mov	r3, r2
 8007112:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b23      	cmp	r3, #35	; 0x23
 8007118:	d84a      	bhi.n	80071b0 <CDC_Control_FS+0xac>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <CDC_Control_FS+0x1c>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	080071b1 	.word	0x080071b1
 8007124:	080071b1 	.word	0x080071b1
 8007128:	080071b1 	.word	0x080071b1
 800712c:	080071b1 	.word	0x080071b1
 8007130:	080071b1 	.word	0x080071b1
 8007134:	080071b1 	.word	0x080071b1
 8007138:	080071b1 	.word	0x080071b1
 800713c:	080071b1 	.word	0x080071b1
 8007140:	080071b1 	.word	0x080071b1
 8007144:	080071b1 	.word	0x080071b1
 8007148:	080071b1 	.word	0x080071b1
 800714c:	080071b1 	.word	0x080071b1
 8007150:	080071b1 	.word	0x080071b1
 8007154:	080071b1 	.word	0x080071b1
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071b1 	.word	0x080071b1
 8007160:	080071b1 	.word	0x080071b1
 8007164:	080071b1 	.word	0x080071b1
 8007168:	080071b1 	.word	0x080071b1
 800716c:	080071b1 	.word	0x080071b1
 8007170:	080071b1 	.word	0x080071b1
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071b1 	.word	0x080071b1
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071b1 	.word	0x080071b1
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071b1 	.word	0x080071b1
 8007198:	080071b1 	.word	0x080071b1
 800719c:	080071b1 	.word	0x080071b1
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071b1 	.word	0x080071b1
 80071a8:	080071b1 	.word	0x080071b1
 80071ac:	080071b1 	.word	0x080071b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071b0:	bf00      	nop
  }

  return (USBD_OK);
 80071b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4805      	ldr	r0, [pc, #20]	; (80071e4 <CDC_Receive_FS+0x24>)
 80071ce:	f7fe fe52 	bl	8005e76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071d2:	4804      	ldr	r0, [pc, #16]	; (80071e4 <CDC_Receive_FS+0x24>)
 80071d4:	f7fe fe63 	bl	8005e9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80071d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20000b54 	.word	0x20000b54

080071e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2212      	movs	r2, #18
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	; (8007208 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	2000014c 	.word	0x2000014c

0800720c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2204      	movs	r2, #4
 800721c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800721e:	4b03      	ldr	r3, [pc, #12]	; (800722c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007220:	4618      	mov	r0, r3
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	20000160 	.word	0x20000160

08007230 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	6039      	str	r1, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	4907      	ldr	r1, [pc, #28]	; (8007264 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007246:	4808      	ldr	r0, [pc, #32]	; (8007268 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007248:	f7ff fe32 	bl	8006eb0 <USBD_GetString>
 800724c:	e004      	b.n	8007258 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	4904      	ldr	r1, [pc, #16]	; (8007264 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007252:	4805      	ldr	r0, [pc, #20]	; (8007268 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007254:	f7ff fe2c 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007258:	4b02      	ldr	r3, [pc, #8]	; (8007264 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	200015e8 	.word	0x200015e8
 8007268:	08007a84 	.word	0x08007a84

0800726c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	6039      	str	r1, [r7, #0]
 8007276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4904      	ldr	r1, [pc, #16]	; (800728c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800727c:	4804      	ldr	r0, [pc, #16]	; (8007290 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800727e:	f7ff fe17 	bl	8006eb0 <USBD_GetString>
  return USBD_StrDesc;
 8007282:	4b02      	ldr	r3, [pc, #8]	; (800728c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	200015e8 	.word	0x200015e8
 8007290:	08007a9c 	.word	0x08007a9c

08007294 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	6039      	str	r1, [r7, #0]
 800729e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	221a      	movs	r2, #26
 80072a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072a6:	f000 f843 	bl	8007330 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80072aa:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000164 	.word	0x20000164

080072b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	4907      	ldr	r1, [pc, #28]	; (80072ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80072ce:	4808      	ldr	r0, [pc, #32]	; (80072f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80072d0:	f7ff fdee 	bl	8006eb0 <USBD_GetString>
 80072d4:	e004      	b.n	80072e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 80072da:	4805      	ldr	r0, [pc, #20]	; (80072f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80072dc:	f7ff fde8 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072e0:	4b02      	ldr	r3, [pc, #8]	; (80072ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200015e8 	.word	0x200015e8
 80072f0:	08007ab0 	.word	0x08007ab0

080072f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	6039      	str	r1, [r7, #0]
 80072fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	4907      	ldr	r1, [pc, #28]	; (8007328 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800730a:	4808      	ldr	r0, [pc, #32]	; (800732c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800730c:	f7ff fdd0 	bl	8006eb0 <USBD_GetString>
 8007310:	e004      	b.n	800731c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	4904      	ldr	r1, [pc, #16]	; (8007328 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007316:	4805      	ldr	r0, [pc, #20]	; (800732c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007318:	f7ff fdca 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200015e8 	.word	0x200015e8
 800732c:	08007abc 	.word	0x08007abc

08007330 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <Get_SerialNum+0x44>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <Get_SerialNum+0x48>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <Get_SerialNum+0x4c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007356:	2208      	movs	r2, #8
 8007358:	4909      	ldr	r1, [pc, #36]	; (8007380 <Get_SerialNum+0x50>)
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f814 	bl	8007388 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007360:	2204      	movs	r2, #4
 8007362:	4908      	ldr	r1, [pc, #32]	; (8007384 <Get_SerialNum+0x54>)
 8007364:	68b8      	ldr	r0, [r7, #8]
 8007366:	f000 f80f 	bl	8007388 <IntToUnicode>
  }
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	1fff7590 	.word	0x1fff7590
 8007378:	1fff7594 	.word	0x1fff7594
 800737c:	1fff7598 	.word	0x1fff7598
 8007380:	20000166 	.word	0x20000166
 8007384:	20000176 	.word	0x20000176

08007388 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
 800739e:	e027      	b.n	80073f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0f1b      	lsrs	r3, r3, #28
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d80b      	bhi.n	80073c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4619      	mov	r1, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	440b      	add	r3, r1
 80073b8:	3230      	adds	r2, #48	; 0x30
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	e00a      	b.n	80073d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0f1b      	lsrs	r3, r3, #28
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4619      	mov	r1, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	440b      	add	r3, r1
 80073d0:	3237      	adds	r2, #55	; 0x37
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	3301      	adds	r3, #1
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4413      	add	r3, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	3301      	adds	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
 80073f0:	7dfa      	ldrb	r2, [r7, #23]
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d3d3      	bcc.n	80073a0 <IntToUnicode+0x18>
  }
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800740c:	f107 0314 	add.w	r3, r7, #20
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	605a      	str	r2, [r3, #4]
 8007416:	609a      	str	r2, [r3, #8]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1a      	ldr	r2, [pc, #104]	; (800748c <HAL_PCD_MspInit+0x88>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d12d      	bne.n	8007482 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007426:	4b1a      	ldr	r3, [pc, #104]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 8007428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742a:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007432:	4b17      	ldr	r3, [pc, #92]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 8007434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800743e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007444:	2303      	movs	r3, #3
 8007446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800744c:	f107 0314 	add.w	r3, r7, #20
 8007450:	4619      	mov	r1, r3
 8007452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007456:	f7f9 ffb3 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800745a:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	4a0c      	ldr	r2, [pc, #48]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 8007460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007464:	6593      	str	r3, [r2, #88]	; 0x58
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_PCD_MspInit+0x8c>)
 8007468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007472:	2200      	movs	r2, #0
 8007474:	2100      	movs	r1, #0
 8007476:	2014      	movs	r0, #20
 8007478:	f7f9 fcfb 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800747c:	2014      	movs	r0, #20
 800747e:	f7f9 fd12 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007482:	bf00      	nop
 8007484:	3728      	adds	r7, #40	; 0x28
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	40005c00 	.word	0x40005c00
 8007490:	40021000 	.word	0x40021000

08007494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe fdaf 	bl	800600e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	015b      	lsls	r3, r3, #5
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	4619      	mov	r1, r3
 80074dc:	f7fe fde2 	bl	80060a4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	015b      	lsls	r3, r3, #5
 8007500:	4413      	add	r3, r2
 8007502:	333c      	adds	r3, #60	; 0x3c
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe fe3c 	bl	8006186 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe ff4f 	bl	80063c8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d001      	beq.n	800754a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007546:	f7f9 f8c2 	bl	80006ce <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007550:	7bfa      	ldrb	r2, [r7, #15]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fefc 	bl	8006352 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe feb5 	bl	80062d0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007566:	bf00      	nop
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fef7 	bl	8006372 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800758c:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <HAL_PCD_SuspendCallback+0x30>)
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	4a03      	ldr	r2, [pc, #12]	; (80075a0 <HAL_PCD_SuspendCallback+0x30>)
 8007592:	f043 0306 	orr.w	r3, r3, #6
 8007596:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	e000ed00 	.word	0xe000ed00

080075a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d007      	beq.n	80075c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <HAL_PCD_ResumeCallback+0x34>)
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	4a07      	ldr	r2, [pc, #28]	; (80075d8 <HAL_PCD_ResumeCallback+0x34>)
 80075ba:	f023 0306 	bic.w	r3, r3, #6
 80075be:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80075c0:	f000 f9f6 	bl	80079b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fee6 	bl	800639c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	e000ed00 	.word	0xe000ed00

080075dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80075e4:	4a2b      	ldr	r2, [pc, #172]	; (8007694 <USBD_LL_Init+0xb8>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a29      	ldr	r2, [pc, #164]	; (8007694 <USBD_LL_Init+0xb8>)
 80075f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80075f4:	4b27      	ldr	r3, [pc, #156]	; (8007694 <USBD_LL_Init+0xb8>)
 80075f6:	4a28      	ldr	r2, [pc, #160]	; (8007698 <USBD_LL_Init+0xbc>)
 80075f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80075fa:	4b26      	ldr	r3, [pc, #152]	; (8007694 <USBD_LL_Init+0xb8>)
 80075fc:	2208      	movs	r2, #8
 80075fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007600:	4b24      	ldr	r3, [pc, #144]	; (8007694 <USBD_LL_Init+0xb8>)
 8007602:	2202      	movs	r2, #2
 8007604:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007606:	4b23      	ldr	r3, [pc, #140]	; (8007694 <USBD_LL_Init+0xb8>)
 8007608:	2202      	movs	r2, #2
 800760a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800760c:	4b21      	ldr	r3, [pc, #132]	; (8007694 <USBD_LL_Init+0xb8>)
 800760e:	2200      	movs	r2, #0
 8007610:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007612:	4b20      	ldr	r3, [pc, #128]	; (8007694 <USBD_LL_Init+0xb8>)
 8007614:	2200      	movs	r2, #0
 8007616:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <USBD_LL_Init+0xb8>)
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800761e:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <USBD_LL_Init+0xb8>)
 8007620:	2200      	movs	r2, #0
 8007622:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007624:	481b      	ldr	r0, [pc, #108]	; (8007694 <USBD_LL_Init+0xb8>)
 8007626:	f7fa f87e 	bl	8001726 <HAL_PCD_Init>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007630:	f7f9 f84d 	bl	80006ce <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800763a:	2318      	movs	r3, #24
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	f7fa ff20 	bl	8002484 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800764a:	2358      	movs	r3, #88	; 0x58
 800764c:	2200      	movs	r2, #0
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	f7fa ff18 	bl	8002484 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800765a:	23c0      	movs	r3, #192	; 0xc0
 800765c:	2200      	movs	r2, #0
 800765e:	2181      	movs	r1, #129	; 0x81
 8007660:	f7fa ff10 	bl	8002484 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800766a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800766e:	2200      	movs	r2, #0
 8007670:	2101      	movs	r1, #1
 8007672:	f7fa ff07 	bl	8002484 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800767c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007680:	2200      	movs	r2, #0
 8007682:	2182      	movs	r1, #130	; 0x82
 8007684:	f7fa fefe 	bl	8002484 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200017e8 	.word	0x200017e8
 8007698:	40005c00 	.word	0x40005c00

0800769c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fa f8f2 	bl	800189c <HAL_PCD_Start>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 f97c 	bl	80079bc <USBD_Get_USB_Status>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	4608      	mov	r0, r1
 80076dc:	4611      	mov	r1, r2
 80076de:	461a      	mov	r2, r3
 80076e0:	4603      	mov	r3, r0
 80076e2:	70fb      	strb	r3, [r7, #3]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70bb      	strb	r3, [r7, #2]
 80076e8:	4613      	mov	r3, r2
 80076ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076fa:	78bb      	ldrb	r3, [r7, #2]
 80076fc:	883a      	ldrh	r2, [r7, #0]
 80076fe:	78f9      	ldrb	r1, [r7, #3]
 8007700:	f7fa fa61 	bl	8001bc6 <HAL_PCD_EP_Open>
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	4618      	mov	r0, r3
 800770c:	f000 f956 	bl	80079bc <USBD_Get_USB_Status>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007714:	7bbb      	ldrb	r3, [r7, #14]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7fa faa2 	bl	8001c86 <HAL_PCD_EP_Close>
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 f937 	bl	80079bc <USBD_Get_USB_Status>
 800774e:	4603      	mov	r3, r0
 8007750:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007752:	7bbb      	ldrb	r3, [r7, #14]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fa fb4d 	bl	8001e1a <HAL_PCD_EP_SetStall>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f918 	bl	80079bc <USBD_Get_USB_Status>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007790:	7bbb      	ldrb	r3, [r7, #14]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	4611      	mov	r1, r2
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fa fb88 	bl	8001ece <HAL_PCD_EP_ClrStall>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f8f9 	bl	80079bc <USBD_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80077ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da08      	bge.n	8007806 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	015b      	lsls	r3, r3, #5
 80077fe:	4413      	add	r3, r2
 8007800:	332a      	adds	r3, #42	; 0x2a
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	e008      	b.n	8007818 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	015b      	lsls	r3, r3, #5
 8007810:	4413      	add	r3, r2
 8007812:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007816:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fa f99a 	bl	8001b7c <HAL_PCD_SetAddress>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f8b4 	bl	80079bc <USBD_Get_USB_Status>
 8007854:	4603      	mov	r3, r0
 8007856:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007858:	7bbb      	ldrb	r3, [r7, #14]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	461a      	mov	r2, r3
 800786e:	460b      	mov	r3, r1
 8007870:	72fb      	strb	r3, [r7, #11]
 8007872:	4613      	mov	r3, r2
 8007874:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007884:	893b      	ldrh	r3, [r7, #8]
 8007886:	7af9      	ldrb	r1, [r7, #11]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f7fa fa8d 	bl	8001da8 <HAL_PCD_EP_Transmit>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f891 	bl	80079bc <USBD_Get_USB_Status>
 800789a:	4603      	mov	r3, r0
 800789c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800789e:	7dbb      	ldrb	r3, [r7, #22]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	461a      	mov	r2, r3
 80078b4:	460b      	mov	r3, r1
 80078b6:	72fb      	strb	r3, [r7, #11]
 80078b8:	4613      	mov	r3, r2
 80078ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80078ca:	893b      	ldrh	r3, [r7, #8]
 80078cc:	7af9      	ldrb	r1, [r7, #11]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f7fa fa1b 	bl	8001d0a <HAL_PCD_EP_Receive>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f86e 	bl	80079bc <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7fa fa3a 	bl	8001d7e <HAL_PCD_EP_GetRxCount>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_PCDEx_LPM_Callback+0x18>
 8007926:	2b01      	cmp	r3, #1
 8007928:	d013      	beq.n	8007952 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800792a:	e023      	b.n	8007974 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007934:	f000 f83c 	bl	80079b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007938:	4b10      	ldr	r3, [pc, #64]	; (800797c <HAL_PCDEx_LPM_Callback+0x68>)
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	4a0f      	ldr	r2, [pc, #60]	; (800797c <HAL_PCDEx_LPM_Callback+0x68>)
 800793e:	f023 0306 	bic.w	r3, r3, #6
 8007942:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fd26 	bl	800639c <USBD_LL_Resume>
    break;
 8007950:	e010      	b.n	8007974 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fd0a 	bl	8006372 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <HAL_PCDEx_LPM_Callback+0x68>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	4a04      	ldr	r2, [pc, #16]	; (800797c <HAL_PCDEx_LPM_Callback+0x68>)
 800796c:	f043 0306 	orr.w	r3, r3, #6
 8007970:	6113      	str	r3, [r2, #16]
    break;   
 8007972:	bf00      	nop
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	e000ed00 	.word	0xe000ed00

08007980 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <USBD_static_malloc+0x18>)
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	200007d4 	.word	0x200007d4

0800799c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80079b4:	f7f8 fcac 	bl	8000310 <SystemClock_Config>
}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079ca:	79fb      	ldrb	r3, [r7, #7]
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	d817      	bhi.n	8007a00 <USBD_Get_USB_Status+0x44>
 80079d0:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_Get_USB_Status+0x1c>)
 80079d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d6:	bf00      	nop
 80079d8:	080079e9 	.word	0x080079e9
 80079dc:	080079ef 	.word	0x080079ef
 80079e0:	080079f5 	.word	0x080079f5
 80079e4:	080079fb 	.word	0x080079fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
    break;
 80079ec:	e00b      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079ee:	2302      	movs	r3, #2
 80079f0:	73fb      	strb	r3, [r7, #15]
    break;
 80079f2:	e008      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
    break;
 80079f8:	e005      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079fa:	2302      	movs	r3, #2
 80079fc:	73fb      	strb	r3, [r7, #15]
    break;
 80079fe:	e002      	b.n	8007a06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a00:	2302      	movs	r3, #2
 8007a02:	73fb      	strb	r3, [r7, #15]
    break;
 8007a04:	bf00      	nop
  }
  return usb_status;
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0d      	ldr	r6, [pc, #52]	; (8007a4c <__libc_init_array+0x38>)
 8007a18:	4c0d      	ldr	r4, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1a:	1ba4      	subs	r4, r4, r6
 8007a1c:	10a4      	asrs	r4, r4, #2
 8007a1e:	2500      	movs	r5, #0
 8007a20:	42a5      	cmp	r5, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	4e0b      	ldr	r6, [pc, #44]	; (8007a54 <__libc_init_array+0x40>)
 8007a26:	4c0c      	ldr	r4, [pc, #48]	; (8007a58 <__libc_init_array+0x44>)
 8007a28:	f000 f820 	bl	8007a6c <_init>
 8007a2c:	1ba4      	subs	r4, r4, r6
 8007a2e:	10a4      	asrs	r4, r4, #2
 8007a30:	2500      	movs	r5, #0
 8007a32:	42a5      	cmp	r5, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a3c:	4798      	blx	r3
 8007a3e:	3501      	adds	r5, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a46:	4798      	blx	r3
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	08007adc 	.word	0x08007adc
 8007a50:	08007adc 	.word	0x08007adc
 8007a54:	08007adc 	.word	0x08007adc
 8007a58:	08007ae0 	.word	0x08007ae0

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
