
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ce4  08009ce4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ce8  08009ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033f0  20000184  08009e70  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003574  08009e70  00023574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c00  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049af  00000000  00000000  00044db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b18  00000000  00000000  00049768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  0004b280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006b49  00000000  00000000  0004cb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b26  00000000  00000000  000536d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdd5  00000000  00000000  0006b1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013afd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007070  00000000  00000000  0013b050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000184 	.word	0x20000184
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009c00 	.word	0x08009c00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000188 	.word	0x20000188
 800021c:	08009c00 	.word	0x08009c00

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f001 f9b8 	bl	800159a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f853 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa13 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f9c3 	bl	80005bc <MX_DMA_Init>
  MX_TIM2_Init();
 8000236:	f000 f8f1 	bl	800041c <MX_TIM2_Init>
  MX_USB_Device_Init();
 800023a:	f008 ffe1 	bl	8009200 <MX_USB_Device_Init>
  MX_SPI1_Init();
 800023e:	f000 f8af 	bl	80003a0 <MX_SPI1_Init>
  MX_TIM17_Init();
 8000242:	f000 f943 	bl	80004cc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 8000246:	f000 ff2d 	bl	80010a4 <ws2812Init>
  ws2812Begin(B_LED_CNT, R_LED_CNT);
 800024a:	2180      	movs	r1, #128	; 0x80
 800024c:	2014      	movs	r0, #20
 800024e:	f000 ff3f 	bl	80010d0 <ws2812Begin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Break_Task */
  osThreadDef(Break_Task, StartDefaultTask, osPriorityNormal, 0, 128);
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <main+0x9c>)
 8000254:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000258:	461d      	mov	r5, r3
 800025a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025e:	682b      	ldr	r3, [r5, #0]
 8000260:	6023      	str	r3, [r4, #0]
  Break_TaskHandle = osThreadCreate(osThread(Break_Task), NULL);
 8000262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f007 fe7c 	bl	8007f66 <osThreadCreate>
 800026e:	4602      	mov	r2, r0
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <main+0xa0>)
 8000272:	601a      	str	r2, [r3, #0]

  /* definition and creation of RainBow_Task */
  osThreadDef(RainBow_Task, StartTask02, osPriorityLow, 0, 128);
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xa4>)
 8000276:	f107 0418 	add.w	r4, r7, #24
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	682b      	ldr	r3, [r5, #0]
 8000282:	6023      	str	r3, [r4, #0]
  RainBow_TaskHandle = osThreadCreate(osThread(RainBow_Task), NULL);
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f007 fe6b 	bl	8007f66 <osThreadCreate>
 8000290:	4602      	mov	r2, r0
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0xa8>)
 8000294:	601a      	str	r2, [r3, #0]

  /* definition and creation of AS504X_Task */
  osThreadDef(AS504X_Task, StartTask03, osPriorityLow, 0, 128);
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0xac>)
 8000298:	1d3c      	adds	r4, r7, #4
 800029a:	461d      	mov	r5, r3
 800029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a0:	682b      	ldr	r3, [r5, #0]
 80002a2:	6023      	str	r3, [r4, #0]
  AS504X_TaskHandle = osThreadCreate(osThread(AS504X_Task), NULL);
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2100      	movs	r1, #0
 80002a8:	4618      	mov	r0, r3
 80002aa:	f007 fe5c 	bl	8007f66 <osThreadCreate>
 80002ae:	4602      	mov	r2, r0
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <main+0xb0>)
 80002b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002b4:	f007 fe50 	bl	8007f58 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x98>
 80002ba:	bf00      	nop
 80002bc:	08009c24 	.word	0x08009c24
 80002c0:	20002430 	.word	0x20002430
 80002c4:	08009c48 	.word	0x08009c48
 80002c8:	200024ec 	.word	0x200024ec
 80002cc:	08009c68 	.word	0x08009c68
 80002d0:	200023e0 	.word	0x200023e0

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a4      	sub	sp, #144	; 0x90
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002de:	2238      	movs	r2, #56	; 0x38
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f009 fc84 	bl	8009bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f009 fc76 	bl	8009bf0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000304:	2000      	movs	r0, #0
 8000306:	f002 fd81 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800030a:	2321      	movs	r3, #33	; 0x21
 800030c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	2302      	movs	r3, #2
 800031a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	2303      	movs	r3, #3
 800031e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000320:	2304      	movs	r3, #4
 8000322:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000324:	2355      	movs	r3, #85	; 0x55
 8000326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032a:	2302      	movs	r3, #2
 800032c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000330:	2302      	movs	r3, #2
 8000332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000340:	4618      	mov	r0, r3
 8000342:	f002 fe07 	bl	8002f54 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800034c:	f000 fbf6 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000368:	2108      	movs	r1, #8
 800036a:	4618      	mov	r0, r3
 800036c:	f003 f90a 	bl	8003584 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000376:	f000 fbe1 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800037e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000380:	2300      	movs	r3, #0
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fb30 	bl	80039ec <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000392:	f000 fbd3 	bl	8000b3c <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3790      	adds	r7, #144	; 0x90
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <MX_SPI1_Init+0x74>)
 80003a6:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <MX_SPI1_Init+0x78>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ba:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80003be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <MX_SPI1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c6:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80003d4:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_SPI1_Init+0x74>)
 80003d6:	2218      	movs	r2, #24
 80003d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_SPI1_Init+0x74>)
 80003ee:	2207      	movs	r2, #7
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_SPI1_Init+0x74>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003fe:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_SPI1_Init+0x74>)
 8000400:	f003 fce4 	bl	8003dcc <HAL_SPI_Init>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040a:	f000 fb97 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	2000243c 	.word	0x2000243c
 8000418:	40013000 	.word	0x40013000

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000422:	f107 031c 	add.w	r3, r7, #28
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042e:	463b      	mov	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000448:	4b1f      	ldr	r3, [pc, #124]	; (80004c8 <MX_TIM2_Init+0xac>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000456:	22d4      	movs	r2, #212	; 0xd4
 8000458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_TIM2_Init+0xac>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000462:	2200      	movs	r2, #0
 8000464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000466:	4818      	ldr	r0, [pc, #96]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000468:	f003 fdd0 	bl	800400c <HAL_TIM_PWM_Init>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000472:	f000 fb63 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	4619      	mov	r1, r3
 8000484:	4810      	ldr	r0, [pc, #64]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000486:	f004 ff47 	bl	8005318 <HAL_TIMEx_MasterConfigSynchronization>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000490:	f000 fb54 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000494:	2360      	movs	r3, #96	; 0x60
 8000496:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	4619      	mov	r1, r3
 80004aa:	4807      	ldr	r0, [pc, #28]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004ac:	f004 f96a 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80004b6:	f000 fb41 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ba:	4803      	ldr	r0, [pc, #12]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004bc:	f000 fcd6 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	200024a0 	.word	0x200024a0

080004cc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b094      	sub	sp, #80	; 0x50
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2234      	movs	r2, #52	; 0x34
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f009 fb7f 	bl	8009bf0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80004f4:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <MX_TIM17_Init+0xec>)
 80004f6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fe:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000506:	22d4      	movs	r2, #212	; 0xd4
 8000508:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800051c:	4825      	ldr	r0, [pc, #148]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800051e:	f003 fce7 	bl	8003ef0 <HAL_TIM_Base_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000528:	f000 fb08 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800052c:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_TIM17_Init+0xe8>)
 800052e:	f003 fd6d 	bl	800400c <HAL_TIM_PWM_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 fb00 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053c:	2360      	movs	r3, #96	; 0x60
 800053e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000544:	2300      	movs	r3, #0
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000548:	2300      	movs	r3, #0
 800054a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000554:	2300      	movs	r3, #0
 8000556:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000562:	f004 f90f 	bl	8004784 <HAL_TIM_PWM_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800056c:	f000 fae6 	bl	8000b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000588:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800058e:	2300      	movs	r3, #0
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <MX_TIM17_Init+0xe8>)
 8000598:	f004 ff40 	bl	800541c <HAL_TIMEx_ConfigBreakDeadTime>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80005a2:	f000 facb 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <MX_TIM17_Init+0xe8>)
 80005a8:	f000 fc60 	bl	8000e6c <HAL_TIM_MspPostInit>

}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200023e4 	.word	0x200023e4
 80005b8:	40014800 	.word	0x40014800

080005bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_DMA_Init+0x98>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <MX_DMA_Init+0x98>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6493      	str	r3, [r2, #72]	; 0x48
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_DMA_Init+0x98>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_DMA_Init+0x98>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005de:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <MX_DMA_Init+0x98>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6493      	str	r3, [r2, #72]	; 0x48
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_DMA_Init+0x98>)
 80005e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_DMA_Init+0x98>)
 80005f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DMA_Init+0x98>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6493      	str	r3, [r2, #72]	; 0x48
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_DMA_Init+0x98>)
 8000600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2105      	movs	r1, #5
 800060e:	200b      	movs	r0, #11
 8000610:	f001 f8b2 	bl	8001778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000614:	200b      	movs	r0, #11
 8000616:	f001 f8c9 	bl	80017ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	200c      	movs	r0, #12
 8000620:	f001 f8aa 	bl	8001778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000624:	200c      	movs	r0, #12
 8000626:	f001 f8c1 	bl	80017ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2105      	movs	r1, #5
 800062e:	2038      	movs	r0, #56	; 0x38
 8000630:	f001 f8a2 	bl	8001778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000634:	2038      	movs	r0, #56	; 0x38
 8000636:	f001 f8b9 	bl	80017ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 5, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2105      	movs	r1, #5
 800063e:	2039      	movs	r0, #57	; 0x39
 8000640:	f001 f89a 	bl	8001778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000644:	2039      	movs	r0, #57	; 0x39
 8000646:	f001 f8b1 	bl	80017ac <HAL_NVIC_EnableIRQ>

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_GPIO_Init+0xd4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a2e      	ldr	r2, [pc, #184]	; (800072c <MX_GPIO_Init+0xd4>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_GPIO_Init+0xd4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_GPIO_Init+0xd4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <MX_GPIO_Init+0xd4>)
 800068c:	f043 0320 	orr.w	r3, r3, #32
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_GPIO_Init+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0320 	and.w	r3, r3, #32
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b23      	ldr	r3, [pc, #140]	; (800072c <MX_GPIO_Init+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a22      	ldr	r2, [pc, #136]	; (800072c <MX_GPIO_Init+0xd4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_GPIO_Init+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_GPIO_Init+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <MX_GPIO_Init+0xd4>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_GPIO_Init+0xd4>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	4816      	ldr	r0, [pc, #88]	; (8000730 <MX_GPIO_Init+0xd8>)
 80006d6:	f001 fc6b 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_GPIO_Init+0xdc>)
 80006e2:	f001 fc65 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_GPIO_Init+0xd8>)
 8000700:	f001 fad4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_GPIO_Init+0xdc>)
 800071e:	f001 fac5 	bl	8001cac <HAL_GPIO_Init>

}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	48000800 	.word	0x48000800
 8000734:	48000400 	.word	0x48000400

08000738 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800073c:	f000 ff58 	bl	80015f0 <HAL_GetTick>
 8000740:	4603      	mov	r3, r0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 8000752:	683a      	ldr	r2, [r7, #0]
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <rotateLeft+0x50>)
 8000756:	fba3 1302 	umull	r1, r3, r3, r2
 800075a:	0919      	lsrs	r1, r3, #4
 800075c:	460b      	mov	r3, r1
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	440b      	add	r3, r1
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 8000768:	e009      	b.n	800077e <rotateLeft+0x36>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	151b      	asrs	r3, r3, #20
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	4313      	orrs	r3, r2
 800077c:	607b      	str	r3, [r7, #4]
    while(rotation--)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	603a      	str	r2, [r7, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1f0      	bne.n	800076a <rotateLeft+0x22>
    }

    return num;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	cccccccd 	.word	0xcccccccd

0800079c <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <rotateRight+0x58>)
 80007aa:	fba3 1302 	umull	r1, r3, r3, r2
 80007ae:	0919      	lsrs	r1, r3, #4
 80007b0:	460b      	mov	r3, r1
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80007bc:	e00d      	b.n	80007da <rotateRight+0x3e>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007ce:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	051b      	lsls	r3, r3, #20
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	1e5a      	subs	r2, r3, #1
 80007de:	603a      	str	r2, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1ec      	bne.n	80007be <rotateRight+0x22>
    }

    return num;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	cccccccd 	.word	0xcccccccd

080007f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t pre_time = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t led_time = 200;
 8000804:	23c8      	movs	r3, #200	; 0xc8
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t firstled = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
	uint32_t halfled = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
	uint32_t led_index = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t led_mask= 0b1110000111;
 8000814:	f240 3387 	movw	r3, #903	; 0x387
 8000818:	60bb      	str	r3, [r7, #8]


	bool led_flg=false;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t led_count = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  for(;;)
  {

		if(millis()-pre_time >= led_time)
 8000822:	f7ff ff89 	bl	8000738 <millis>
 8000826:	4602      	mov	r2, r0
 8000828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800082e:	429a      	cmp	r2, r3
 8000830:	f200 80ae 	bhi.w	8000990 <StartDefaultTask+0x198>
		{
			pre_time = millis();
 8000834:	f7ff ff80 	bl	8000738 <millis>
 8000838:	6378      	str	r0, [r7, #52]	; 0x34
			if(g_break_flg == false) {
 800083a:	4b57      	ldr	r3, [pc, #348]	; (8000998 <StartDefaultTask+0x1a0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d16e      	bne.n	8000920 <StartDefaultTask+0x128>
					led_time = 200;
				}
				else {
					led_time = 50;
				}*/
				led_time = g_speed/10;
 8000842:	4b56      	ldr	r3, [pc, #344]	; (800099c <StartDefaultTask+0x1a4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a56      	ldr	r2, [pc, #344]	; (80009a0 <StartDefaultTask+0x1a8>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	08db      	lsrs	r3, r3, #3
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
				if(led_time < 50)
 8000850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000852:	2b31      	cmp	r3, #49	; 0x31
 8000854:	d801      	bhi.n	800085a <StartDefaultTask+0x62>
					led_time = 50;
 8000856:	2332      	movs	r3, #50	; 0x32
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
				led_count = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
				firstled = rotateLeft(led_mask, led_index%B_LED_CNT);
 800085e:	68b8      	ldr	r0, [r7, #8]
 8000860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000862:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <StartDefaultTask+0x1a8>)
 8000864:	fba3 2301 	umull	r2, r3, r3, r1
 8000868:	091a      	lsrs	r2, r3, #4
 800086a:	4613      	mov	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	1aca      	subs	r2, r1, r3
 8000874:	4611      	mov	r1, r2
 8000876:	f7ff ff67 	bl	8000748 <rotateLeft>
 800087a:	4603      	mov	r3, r0
 800087c:	613b      	str	r3, [r7, #16]
				halfled = rotateRight(led_mask, led_index%B_LED_CNT);
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000882:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <StartDefaultTask+0x1a8>)
 8000884:	fba3 2301 	umull	r2, r3, r3, r1
 8000888:	091a      	lsrs	r2, r3, #4
 800088a:	4613      	mov	r3, r2
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4413      	add	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	1aca      	subs	r2, r1, r3
 8000894:	4611      	mov	r1, r2
 8000896:	f7ff ff81 	bl	800079c <rotateRight>
 800089a:	4603      	mov	r3, r0
 800089c:	60fb      	str	r3, [r7, #12]

				led_index++;
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	3301      	adds	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(uint32_t j=0; j<12; j++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
 80008a8:	e017      	b.n	80008da <StartDefaultTask+0xe2>
					if( firstled >> j & 0x01){
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <StartDefaultTask+0xd0>
							ws2812SetColor(j, 255, 255, 255);
 80008ba:	23ff      	movs	r3, #255	; 0xff
 80008bc:	22ff      	movs	r2, #255	; 0xff
 80008be:	21ff      	movs	r1, #255	; 0xff
 80008c0:	6a38      	ldr	r0, [r7, #32]
 80008c2:	f000 fc3d 	bl	8001140 <ws2812SetColor>
 80008c6:	e005      	b.n	80008d4 <StartDefaultTask+0xdc>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 80008c8:	2300      	movs	r3, #0
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	6a38      	ldr	r0, [r7, #32]
 80008d0:	f000 fc36 	bl	8001140 <ws2812SetColor>
				for(uint32_t j=0; j<12; j++) {
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	3301      	adds	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2b0b      	cmp	r3, #11
 80008de:	d9e4      	bls.n	80008aa <StartDefaultTask+0xb2>
					}
				}
				for(uint32_t j=20; j>11; j--) {
 80008e0:	2314      	movs	r3, #20
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	e018      	b.n	8000918 <StartDefaultTask+0x120>
					if( halfled >> (j-11) & 0x01){
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b0b      	subs	r3, #11
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <StartDefaultTask+0x10e>
							ws2812SetColor(j, 255, 255, 255);
 80008f8:	23ff      	movs	r3, #255	; 0xff
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	21ff      	movs	r1, #255	; 0xff
 80008fe:	69f8      	ldr	r0, [r7, #28]
 8000900:	f000 fc1e 	bl	8001140 <ws2812SetColor>
 8000904:	e005      	b.n	8000912 <StartDefaultTask+0x11a>
					}else {
						ws2812SetColor(j, 0, 0, 0);
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	69f8      	ldr	r0, [r7, #28]
 800090e:	f000 fc17 	bl	8001140 <ws2812SetColor>
				for(uint32_t j=20; j>11; j--) {
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b01      	subs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	2b0b      	cmp	r3, #11
 800091c:	d8e3      	bhi.n	80008e6 <StartDefaultTask+0xee>
 800091e:	e037      	b.n	8000990 <StartDefaultTask+0x198>
					}
				}
			}
			else{ // break
				led_count++;
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	3301      	adds	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
				if(led_count > 30) {
 8000926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000928:	2b1e      	cmp	r3, #30
 800092a:	d903      	bls.n	8000934 <StartDefaultTask+0x13c>
					led_time = 500;
 800092c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
 8000932:	e001      	b.n	8000938 <StartDefaultTask+0x140>
				}else {
					led_time = 50;
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if(led_count > 40) {
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	2b28      	cmp	r3, #40	; 0x28
 800093c:	d902      	bls.n	8000944 <StartDefaultTask+0x14c>
						//led_count = 0;
						g_break_flg =false;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <StartDefaultTask+0x1a0>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
				}

				if(led_flg) {
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	2b00      	cmp	r3, #0
 8000948:	d011      	beq.n	800096e <StartDefaultTask+0x176>
					for(int i = 0; i < B_LED_CNT; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	e00a      	b.n	8000966 <StartDefaultTask+0x16e>
						ws2812SetColor(i, 255, 0, 0);
 8000950:	69b8      	ldr	r0, [r7, #24]
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	21ff      	movs	r1, #255	; 0xff
 8000958:	f000 fbf2 	bl	8001140 <ws2812SetColor>
						led_flg = false;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	3301      	adds	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	2b13      	cmp	r3, #19
 800096a:	ddf1      	ble.n	8000950 <StartDefaultTask+0x158>
 800096c:	e010      	b.n	8000990 <StartDefaultTask+0x198>
					}
				}else {
					for(int i = 0; i < B_LED_CNT; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e00a      	b.n	800098a <StartDefaultTask+0x192>
						ws2812SetColor(i, 0, 0, 0);
 8000974:	6978      	ldr	r0, [r7, #20]
 8000976:	2300      	movs	r3, #0
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	f000 fbe0 	bl	8001140 <ws2812SetColor>
						led_flg = true;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
					for(int i = 0; i < B_LED_CNT; i++) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b13      	cmp	r3, #19
 800098e:	ddf1      	ble.n	8000974 <StartDefaultTask+0x17c>
					}
				}
			}
		}
    osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f007 fb0f 	bl	8007fb4 <osDelay>
		if(millis()-pre_time >= led_time)
 8000996:	e744      	b.n	8000822 <StartDefaultTask+0x2a>
 8000998:	200001a0 	.word	0x200001a0
 800099c:	200001a4 	.word	0x200001a4
 80009a0:	cccccccd 	.word	0xcccccccd

080009a4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

  uint32_t rainbow_pre_time=0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t rainbow_led_time=10;
 80009b0:	230a      	movs	r3, #10
 80009b2:	623b      	str	r3, [r7, #32]
	bool led_flg=false;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
	uint32_t led_count = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 80009bc:	2300      	movs	r3, #0
 80009be:	833b      	strh	r3, [r7, #24]
 80009c0:	e06e      	b.n	8000aa0 <StartTask02+0xfc>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 80009c2:	f7ff feb9 	bl	8000738 <millis>
 80009c6:	4602      	mov	r2, r0
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	6a3a      	ldr	r2, [r7, #32]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d866      	bhi.n	8000aa0 <StartTask02+0xfc>
			{
				rainbow_pre_time = millis();
 80009d2:	f7ff feb1 	bl	8000738 <millis>
 80009d6:	6278      	str	r0, [r7, #36]	; 0x24
				j++;
 80009d8:	8b3b      	ldrh	r3, [r7, #24]
 80009da:	3301      	adds	r3, #1
 80009dc:	833b      	strh	r3, [r7, #24]
				led_count = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
				rainbow_led_time = 10;
 80009e2:	230a      	movs	r3, #10
 80009e4:	623b      	str	r3, [r7, #32]
				if(g_break_flg == false) {
 80009e6:	4b32      	ldr	r3, [pc, #200]	; (8000ab0 <StartTask02+0x10c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d11f      	bne.n	8000a2e <StartTask02+0x8a>
					led_count = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
					for(i=0; i< R_LED_CNT; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	837b      	strh	r3, [r7, #26]
 80009f6:	e016      	b.n	8000a26 <StartTask02+0x82>
						setPixelColor(i, Wheel(((i * 256 / R_LED_CNT) + j) & 255));
 80009f8:	8b7b      	ldrh	r3, [r7, #26]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da00      	bge.n	8000a02 <StartTask02+0x5e>
 8000a00:	337f      	adds	r3, #127	; 0x7f
 8000a02:	11db      	asrs	r3, r3, #7
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	8b3b      	ldrh	r3, [r7, #24]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fd36 	bl	8001480 <Wheel>
 8000a14:	4602      	mov	r2, r0
 8000a16:	8b7b      	ldrh	r3, [r7, #26]
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fcac 	bl	8001378 <setPixelColor>
					for(i=0; i< R_LED_CNT; i++) {
 8000a20:	8b7b      	ldrh	r3, [r7, #26]
 8000a22:	3301      	adds	r3, #1
 8000a24:	837b      	strh	r3, [r7, #26]
 8000a26:	8b7b      	ldrh	r3, [r7, #26]
 8000a28:	2b7f      	cmp	r3, #127	; 0x7f
 8000a2a:	d9e5      	bls.n	80009f8 <StartTask02+0x54>
 8000a2c:	e038      	b.n	8000aa0 <StartTask02+0xfc>
					}
				}
				else{ // break
					led_count++;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
					if(led_count > 30) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b1e      	cmp	r3, #30
 8000a38:	d903      	bls.n	8000a42 <StartTask02+0x9e>
						rainbow_led_time = 500;
 8000a3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	e001      	b.n	8000a46 <StartTask02+0xa2>
					}else {
						rainbow_led_time = 50;
 8000a42:	2332      	movs	r3, #50	; 0x32
 8000a44:	623b      	str	r3, [r7, #32]
					}
					if(led_count > 40) {
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b28      	cmp	r3, #40	; 0x28
 8000a4a:	d902      	bls.n	8000a52 <StartTask02+0xae>
							//led_count = 0;
							g_break_flg =false;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <StartTask02+0x10c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
					}

					if(led_flg) {
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d012      	beq.n	8000a7e <StartTask02+0xda>
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	e00b      	b.n	8000a76 <StartTask02+0xd2>
							setPixelColor(i, 0xff0000);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fc86 	bl	8001378 <setPixelColor>
							led_flg = false;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b13      	cmp	r3, #19
 8000a7a:	ddf0      	ble.n	8000a5e <StartTask02+0xba>
 8000a7c:	e010      	b.n	8000aa0 <StartTask02+0xfc>
						}
					}else {
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	e00a      	b.n	8000a9a <StartTask02+0xf6>
							setPixelColor(i, 0);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fc74 	bl	8001378 <setPixelColor>
							led_flg = true;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
						for(int i = 0; i < B_LED_CNT; i++) {
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	3301      	adds	r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	2b13      	cmp	r3, #19
 8000a9e:	ddf1      	ble.n	8000a84 <StartTask02+0xe0>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000aa0:	8b3b      	ldrh	r3, [r7, #24]
 8000aa2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000aa6:	d38c      	bcc.n	80009c2 <StartTask02+0x1e>
						}
					}
				}
			}
		}
		osDelay(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f007 fa83 	bl	8007fb4 <osDelay>
  {
 8000aae:	e785      	b.n	80009bc <StartTask02+0x18>
 8000ab0:	200001a0 	.word	0x200001a0

08000ab4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  uint32_t Task03_pre_time = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  uint32_t Task03_led_time = 100;
 8000ac0:	2364      	movs	r3, #100	; 0x64
 8000ac2:	613b      	str	r3, [r7, #16]
  uint32_t speed = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000ac8:	f7ff fe36 	bl	8000738 <millis>
 8000acc:	4602      	mov	r2, r0
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d816      	bhi.n	8000b06 <StartTask03+0x52>
		{
			Task03_pre_time = millis();
 8000ad8:	f7ff fe2e 	bl	8000738 <millis>
 8000adc:	6178      	str	r0, [r7, #20]
			g_speed += 10;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <StartTask03+0x5c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	330a      	adds	r3, #10
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <StartTask03+0x5c>)
 8000ae6:	6013      	str	r3, [r2, #0]
			if(g_speed>1000) {
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <StartTask03+0x5c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af0:	d902      	bls.n	8000af8 <StartTask03+0x44>
				g_speed = 0;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <StartTask03+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
			}
			if(g_break_flg == false) {
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <StartTask03+0x60>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <StartTask03+0x52>
				//g_break_flg = true;
			}
			else {
				g_break_flg = false;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <StartTask03+0x60>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
			}
		}
    osDelay(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 fa54 	bl	8007fb4 <osDelay>
		if (millis()-Task03_pre_time >= Task03_led_time)
 8000b0c:	e7dc      	b.n	8000ac8 <StartTask03+0x14>
 8000b0e:	bf00      	nop
 8000b10:	200001a4 	.word	0x200001a4
 8000b14:	200001a0 	.word	0x200001a0

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f000 fd4f 	bl	80015cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5a:	6093      	str	r3, [r2, #8]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40007000 	.word	0x40007000

08000b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_MspInit+0x50>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_MspInit+0x50>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x50>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x50>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_MspInit+0x50>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6593      	str	r3, [r2, #88]	; 0x58
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x50>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 fde5 	bl	8001778 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000bae:	f7ff ffcd 	bl	8000b4c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <HAL_SPI_MspInit+0x164>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 809b 	bne.w	8000d1a <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be4:	4b50      	ldr	r3, [pc, #320]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be8:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bee:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c00:	4a49      	ldr	r2, [pc, #292]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c08:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c20:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <HAL_SPI_MspInit+0x168>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c2c:	2360      	movs	r3, #96	; 0x60
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f001 f82f 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4830      	ldr	r0, [pc, #192]	; (8000d2c <HAL_SPI_MspInit+0x16c>)
 8000c6a:	f001 f81f 	bl	8001cac <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel1;
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <HAL_SPI_MspInit+0x174>)
 8000c72:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c76:	220a      	movs	r2, #10
 8000c78:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c92:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ca8:	4821      	ldr	r0, [pc, #132]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000caa:	f000 fd8d 	bl	80017c8 <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000cb4:	f7ff ff42 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a1d      	ldr	r2, [pc, #116]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000cbc:	659a      	str	r2, [r3, #88]	; 0x58
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_SPI_MspInit+0x170>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel2;
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cc6:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_SPI_MspInit+0x17c>)
 8000cc8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000ccc:	220b      	movs	r2, #11
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000d00:	f000 fd62 	bl	80017c8 <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000d0a:	f7ff ff17 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000d12:	655a      	str	r2, [r3, #84]	; 0x54
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_SPI_MspInit+0x178>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400
 8000d30:	200024f0 	.word	0x200024f0
 8000d34:	40020408 	.word	0x40020408
 8000d38:	200025b4 	.word	0x200025b4
 8000d3c:	4002041c 	.word	0x4002041c

08000d40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d135      	bne.n	8000dbe <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_TIM_PWM_MspInit+0x88>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_TIM_PWM_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_TIM_PWM_MspInit+0x88>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_TIM_PWM_MspInit+0x90>)
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d72:	2238      	movs	r2, #56	; 0x38
 8000d74:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d78:	2210      	movs	r2, #16
 8000d7a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d98:	2220      	movs	r2, #32
 8000d9a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000da4:	f000 fd10 	bl	80017c8 <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000dae:	f7ff fec5 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_TIM_PWM_MspInit+0x8c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	20002380 	.word	0x20002380
 8000dd0:	40020008 	.word	0x40020008

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <HAL_TIM_Base_MspInit+0x88>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d135      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_TIM_Base_MspInit+0x8c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_TIM_Base_MspInit+0x8c>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6613      	str	r3, [r2, #96]	; 0x60
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_TIM_Base_MspInit+0x8c>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_TIM_Base_MspInit+0x94>)
 8000e02:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e06:	2254      	movs	r2, #84	; 0x54
 8000e08:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e38:	f000 fcc6 	bl	80017c8 <HAL_DMA_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000e42:	f7ff fe7b 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_TIM_Base_MspInit+0x90>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40014800 	.word	0x40014800
 8000e60:	40021000 	.word	0x40021000
 8000e64:	20002554 	.word	0x20002554
 8000e68:	4002001c 	.word	0x4002001c

08000e6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e8c:	d11d      	bne.n	8000eca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f000 fef2 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000ec8:	e021      	b.n	8000f0e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <HAL_TIM_MspPostInit+0xb0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d11c      	bne.n	8000f0e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_TIM_MspPostInit+0xac>)
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f000 fecf 	bl	8001cac <HAL_GPIO_Init>
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40014800 	.word	0x40014800

08000f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2019      	movs	r0, #25
 8000f36:	f000 fc1f 	bl	8001778 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000f3a:	2019      	movs	r0, #25
 8000f3c:	f000 fc36 	bl	80017ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fccc 	bl	8003900 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f68:	f002 fcb4 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8000f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_InitTick+0xa0>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_InitTick+0xa8>)
 8000f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f9e:	f002 ffa7 	bl	8003ef0 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d104      	bne.n	8000fb2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000faa:	f002 fff9 	bl	8003fa0 <HAL_TIM_Base_Start_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	20002618 	.word	0x20002618
 8000fc8:	40012c00 	.word	0x40012c00

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <DMA1_Channel1_IRQHandler+0x10>)
 8001006:	f000 fd02 	bl	8001a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20002380 	.word	0x20002380

08001014 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <DMA1_Channel2_IRQHandler+0x10>)
 800101a:	f000 fcf8 	bl	8001a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20002554 	.word	0x20002554

08001028 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <USB_LP_IRQHandler+0x10>)
 800102e:	f001 f8b4 	bl	800219a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20003300 	.word	0x20003300

0800103c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001042:	f003 fa1f 	bl	8004484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20002618 	.word	0x20002618

08001050 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA2_Channel1_IRQHandler+0x10>)
 8001056:	f000 fcda 	bl	8001a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200024f0 	.word	0x200024f0

08001064 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <DMA2_Channel2_IRQHandler+0x10>)
 800106a:	f000 fcd0 	bl	8001a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200025b4 	.word	0x200025b4

08001078 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <SystemInit+0x28>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <SystemInit+0x28>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SystemInit+0x28>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 80010a8:	f240 6232 	movw	r2, #1586	; 0x632
 80010ac:	2100      	movs	r1, #0
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <ws2812Init+0x24>)
 80010b0:	f008 fd9e 	bl	8009bf0 <memset>
  memset(led_buf_rainbow, 0, sizeof(led_buf));
 80010b4:	f240 6232 	movw	r2, #1586	; 0x632
 80010b8:	2100      	movs	r1, #0
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <ws2812Init+0x28>)
 80010bc:	f008 fd98 	bl	8009bf0 <memset>

  return true;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001a8 	.word	0x200001a8
 80010cc:	200007dc 	.word	0x200007dc

080010d0 <ws2812Begin>:

void ws2812Begin(uint32_t break_led_cnt, uint32_t ranbow_led_cnt)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  ws2812.break_led_cnt = break_led_cnt;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <ws2812Begin+0x5c>)
 80010e0:	801a      	strh	r2, [r3, #0]
  ws2812.ranbow_led_cnt = ranbow_led_cnt;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <ws2812Begin+0x5c>)
 80010e8:	805a      	strh	r2, [r3, #2]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.break_led_cnt) * 1);
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <ws2812Begin+0x5c>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	0052      	lsls	r2, r2, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3332      	adds	r3, #50	; 0x32
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <ws2812Begin+0x60>)
 80010fe:	2100      	movs	r1, #0
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <ws2812Begin+0x64>)
 8001102:	f002 ffdb 	bl	80040bc <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.ranbow_led_cnt) * 1);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <ws2812Begin+0x5c>)
 8001108:	885b      	ldrh	r3, [r3, #2]
 800110a:	461a      	mov	r2, r3
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	b29b      	uxth	r3, r3
 8001114:	3332      	adds	r3, #50	; 0x32
 8001116:	b29b      	uxth	r3, r3
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <ws2812Begin+0x68>)
 800111a:	2100      	movs	r1, #0
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <ws2812Begin+0x6c>)
 800111e:	f002 ffcd 	bl	80040bc <HAL_TIM_PWM_Start_DMA>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20002664 	.word	0x20002664
 8001130:	200001a8 	.word	0x200001a8
 8001134:	200024a0 	.word	0x200024a0
 8001138:	200007dc 	.word	0x200007dc
 800113c:	200023e4 	.word	0x200023e4

08001140 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8001140:	b480      	push	{r7}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4608      	mov	r0, r1
 800114a:	4611      	mov	r1, r2
 800114c:	461a      	mov	r2, r3
 800114e:	4603      	mov	r3, r0
 8001150:	70fb      	strb	r3, [r7, #3]
 8001152:	460b      	mov	r3, r1
 8001154:	70bb      	strb	r3, [r7, #2]
 8001156:	4613      	mov	r3, r2
 8001158:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	e03e      	b.n	80011de <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8001160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da06      	bge.n	8001176 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001168:	f107 0218 	add.w	r2, r7, #24
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	4413      	add	r3, r2
 8001170:	2287      	movs	r2, #135	; 0x87
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e005      	b.n	8001182 <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001176:	f107 0218 	add.w	r2, r7, #24
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	4413      	add	r3, r2
 800117e:	2243      	movs	r2, #67	; 0x43
 8001180:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8001188:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800118c:	2b00      	cmp	r3, #0
 800118e:	da06      	bge.n	800119e <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8001190:	f107 0210 	add.w	r2, r7, #16
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	4413      	add	r3, r2
 8001198:	2287      	movs	r2, #135	; 0x87
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e005      	b.n	80011aa <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 800119e:	f107 0210 	add.w	r2, r7, #16
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	4413      	add	r3, r2
 80011a6:	2243      	movs	r2, #67	; 0x43
 80011a8:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 80011aa:	78bb      	ldrb	r3, [r7, #2]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 80011b0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da06      	bge.n	80011c6 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	4413      	add	r3, r2
 80011c0:	2287      	movs	r2, #135	; 0x87
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e005      	b.n	80011d2 <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 80011c6:	f107 0208 	add.w	r2, r7, #8
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	4413      	add	r3, r2
 80011ce:	2243      	movs	r2, #67	; 0x43
 80011d0:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3301      	adds	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	ddbd      	ble.n	8001160 <ws2812SetColor+0x20>
  }

  offset = 50;
 80011e4:	2332      	movs	r3, #50	; 0x32
 80011e6:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	461a      	mov	r2, r3
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a17      	ldr	r2, [pc, #92]	; (8001258 <ws2812SetColor+0x118>)
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	cb03      	ldmia	r3!, {r0, r1}
 8001204:	6010      	str	r0, [r2, #0]
 8001206:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	461a      	mov	r2, r3
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	4413      	add	r3, r2
 8001218:	3308      	adds	r3, #8
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <ws2812SetColor+0x118>)
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	cb03      	ldmia	r3!, {r0, r1}
 8001226:	6010      	str	r0, [r2, #0]
 8001228:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	461a      	mov	r2, r3
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	4413      	add	r3, r2
 800123a:	3310      	adds	r3, #16
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <ws2812SetColor+0x118>)
 800123e:	4413      	add	r3, r2
 8001240:	461a      	mov	r2, r3
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	cb03      	ldmia	r3!, {r0, r1}
 8001248:	6010      	str	r0, [r2, #0]
 800124a:	6051      	str	r1, [r2, #4]
}
 800124c:	bf00      	nop
 800124e:	372c      	adds	r7, #44	; 0x2c
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	200001a8 	.word	0x200001a8

0800125c <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	; 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	461a      	mov	r2, r3
 800126a:	4603      	mov	r3, r0
 800126c:	70fb      	strb	r3, [r7, #3]
 800126e:	460b      	mov	r3, r1
 8001270:	70bb      	strb	r3, [r7, #2]
 8001272:	4613      	mov	r3, r2
 8001274:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
 800127a:	e03e      	b.n	80012fa <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 800127c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da06      	bge.n	8001292 <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8001284:	f107 0218 	add.w	r2, r7, #24
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	4413      	add	r3, r2
 800128c:	2287      	movs	r2, #135	; 0x87
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e005      	b.n	800129e <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8001292:	f107 0218 	add.w	r2, r7, #24
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	4413      	add	r3, r2
 800129a:	2243      	movs	r2, #67	; 0x43
 800129c:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 80012a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da06      	bge.n	80012ba <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 80012ac:	f107 0210 	add.w	r2, r7, #16
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	4413      	add	r3, r2
 80012b4:	2287      	movs	r2, #135	; 0x87
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e005      	b.n	80012c6 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 80012ba:	f107 0210 	add.w	r2, r7, #16
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	4413      	add	r3, r2
 80012c2:	2243      	movs	r2, #67	; 0x43
 80012c4:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 80012cc:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da06      	bge.n	80012e2 <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 80012d4:	f107 0208 	add.w	r2, r7, #8
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	4413      	add	r3, r2
 80012dc:	2287      	movs	r2, #135	; 0x87
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	e005      	b.n	80012ee <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 80012e2:	f107 0208 	add.w	r2, r7, #8
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	4413      	add	r3, r2
 80012ea:	2243      	movs	r2, #67	; 0x43
 80012ec:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	ddbd      	ble.n	800127c <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8001300:	2332      	movs	r3, #50	; 0x32
 8001302:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	461a      	mov	r2, r3
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	4413      	add	r3, r2
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <ws2812SetRanbowColor+0x118>)
 8001316:	4413      	add	r3, r2
 8001318:	461a      	mov	r2, r3
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	cb03      	ldmia	r3!, {r0, r1}
 8001320:	6010      	str	r0, [r2, #0]
 8001322:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	461a      	mov	r2, r3
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	4413      	add	r3, r2
 8001334:	3308      	adds	r3, #8
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <ws2812SetRanbowColor+0x118>)
 8001338:	4413      	add	r3, r2
 800133a:	461a      	mov	r2, r3
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	cb03      	ldmia	r3!, {r0, r1}
 8001342:	6010      	str	r0, [r2, #0]
 8001344:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	461a      	mov	r2, r3
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	4413      	add	r3, r2
 8001356:	3310      	adds	r3, #16
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <ws2812SetRanbowColor+0x118>)
 800135a:	4413      	add	r3, r2
 800135c:	461a      	mov	r2, r3
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	cb03      	ldmia	r3!, {r0, r1}
 8001364:	6010      	str	r0, [r2, #0]
 8001366:	6051      	str	r1, [r2, #4]
}
 8001368:	bf00      	nop
 800136a:	372c      	adds	r7, #44	; 0x2c
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	200007dc 	.word	0x200007dc

08001378 <setPixelColor>:
    }
    brightness = newBrightness;
  }
}

void setPixelColor(uint16_t n, uint32_t c) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.ranbow_led_cnt) {
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <setPixelColor+0xec>)
 8001386:	885b      	ldrh	r3, [r3, #2]
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	429a      	cmp	r2, r3
 800138c:	d266      	bcs.n	800145c <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 800139e:	4b32      	ldr	r3, [pc, #200]	; (8001468 <setPixelColor+0xf0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d014      	beq.n	80013d0 <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <setPixelColor+0xf0>)
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	121b      	asrs	r3, r3, #8
 80013b2:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 80013b4:	7abb      	ldrb	r3, [r7, #10]
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <setPixelColor+0xf0>)
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	121b      	asrs	r3, r3, #8
 80013c0:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 80013c2:	7a7b      	ldrb	r3, [r7, #9]
 80013c4:	4a28      	ldr	r2, [pc, #160]	; (8001468 <setPixelColor+0xf0>)
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	121b      	asrs	r3, r3, #8
 80013ce:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 80013d0:	4b26      	ldr	r3, [pc, #152]	; (800146c <setPixelColor+0xf4>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <setPixelColor+0xf8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d108      	bne.n	80013ee <setPixelColor+0x76>
      p = &pixels[n * 3];
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <setPixelColor+0xfc>)
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	88fa      	ldrh	r2, [r7, #6]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e01b      	b.n	8001426 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <setPixelColor+0xfc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	0092      	lsls	r2, r2, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	0e1b      	lsrs	r3, r3, #24
 80013fe:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <setPixelColor+0xf0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <setPixelColor+0xa0>
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <setPixelColor+0xf0>)
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	121b      	asrs	r3, r3, #8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e000      	b.n	800141a <setPixelColor+0xa2>
 8001418:	7a3b      	ldrb	r3, [r7, #8]
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <setPixelColor+0xf4>)
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	4611      	mov	r1, r2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	440a      	add	r2, r1
 8001424:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <setPixelColor+0xf8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	7afa      	ldrb	r2, [r7, #11]
 8001432:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <setPixelColor+0x100>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4413      	add	r3, r2
 800143e:	7aba      	ldrb	r2, [r7, #10]
 8001440:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <setPixelColor+0x104>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	7a7a      	ldrb	r2, [r7, #9]
 800144e:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 8001450:	88f8      	ldrh	r0, [r7, #6]
 8001452:	7a7b      	ldrb	r3, [r7, #9]
 8001454:	7aba      	ldrb	r2, [r7, #10]
 8001456:	7af9      	ldrb	r1, [r7, #11]
 8001458:	f7ff ff00 	bl	800125c <ws2812SetRanbowColor>
  }

}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20002664 	.word	0x20002664
 8001468:	20002550 	.word	0x20002550
 800146c:	20002434 	.word	0x20002434
 8001470:	20002614 	.word	0x20002614
 8001474:	2000237c 	.word	0x2000237c
 8001478:	20002438 	.word	0x20002438
 800147c:	20002551 	.word	0x20002551

08001480 <Wheel>:

uint32_t Wheel(uint8_t WheelPos) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	43db      	mvns	r3, r3
 800148e:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b54      	cmp	r3, #84	; 0x54
 8001494:	d811      	bhi.n	80014ba <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	461a      	mov	r2, r3
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b2d8      	uxtb	r0, r3
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	461a      	mov	r2, r3
 80014a8:	0052      	lsls	r2, r2, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	f000 f832 	bl	800151a <Color>
 80014b6:	4603      	mov	r3, r0
 80014b8:	e02b      	b.n	8001512 <Wheel+0x92>
  }
  if(WheelPos < 170) {
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2ba9      	cmp	r3, #169	; 0xa9
 80014be:	d814      	bhi.n	80014ea <Wheel+0x6a>
  		WheelPos -= 85;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	3b55      	subs	r3, #85	; 0x55
 80014c4:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	461a      	mov	r2, r3
 80014ca:	0052      	lsls	r2, r2, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	b2d9      	uxtb	r1, r3
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	461a      	mov	r2, r3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b01      	subs	r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 f81a 	bl	800151a <Color>
 80014e6:	4603      	mov	r3, r0
 80014e8:	e013      	b.n	8001512 <Wheel+0x92>
  }
  WheelPos -= 170;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3356      	adds	r3, #86	; 0x56
 80014ee:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	461a      	mov	r2, r3
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	b2d8      	uxtb	r0, r3
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	461a      	mov	r2, r3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	f000 f805 	bl	800151a <Color>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	460b      	mov	r3, r1
 8001526:	71bb      	strb	r3, [r7, #6]
 8001528:	4613      	mov	r3, r2
 800152a:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	431a      	orrs	r2, r3
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	4313      	orrs	r3, r2
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800154a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490e      	ldr	r1, [pc, #56]	; (8001588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0b      	ldr	r4, [pc, #44]	; (8001594 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001572:	f7ff fd81 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001576:	f008 fb17 	bl	8009ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157a:	f7fe fe51 	bl	8000220 <main>

0800157e <LoopForever>:

LoopForever:
    b LoopForever
 800157e:	e7fe      	b.n	800157e <LoopForever>
  ldr   r0, =_estack
 8001580:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001588:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800158c:	08009cec 	.word	0x08009cec
  ldr r2, =_sbss
 8001590:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001594:	20003574 	.word	0x20003574

08001598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_2_IRQHandler>

0800159a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f8dc 	bl	8001762 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fcb8 	bl	8000f20 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	e001      	b.n	80015c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015bc:	f7ff fad6 	bl	8000b6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c0:	79fb      	ldrb	r3, [r7, #7]

}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x20>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_IncTick+0x1c>)
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20002668 	.word	0x20002668
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20002668 	.word	0x20002668

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff4c 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001786:	f7ff ff63 	bl	8001650 <__NVIC_GetPriorityGrouping>
 800178a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	6978      	ldr	r0, [r7, #20]
 8001792:	f7ff ffb3 	bl	80016fc <NVIC_EncodePriority>
 8001796:	4602      	mov	r2, r0
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff82 	bl	80016a8 <__NVIC_SetPriority>
}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff56 	bl	800166c <__NVIC_EnableIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e08d      	b.n	80018f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_DMA_Init+0x138>)
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d80f      	bhi.n	8001806 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b45      	ldr	r3, [pc, #276]	; (8001904 <HAL_DMA_Init+0x13c>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_DMA_Init+0x140>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	009a      	lsls	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a42      	ldr	r2, [pc, #264]	; (800190c <HAL_DMA_Init+0x144>)
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
 8001804:	e00e      	b.n	8001824 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_DMA_Init+0x148>)
 800180e:	4413      	add	r3, r2
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_DMA_Init+0x140>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	009a      	lsls	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_DMA_Init+0x14c>)
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f9b6 	bl	8001be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001884:	d102      	bne.n	800188c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <HAL_DMA_Init+0x104>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d80c      	bhi.n	80018cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f9d6 	bl	8001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e008      	b.n	80018de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020407 	.word	0x40020407
 8001904:	bffdfff8 	.word	0xbffdfff8
 8001908:	cccccccd 	.word	0xcccccccd
 800190c:	40020000 	.word	0x40020000
 8001910:	bffdfbf8 	.word	0xbffdfbf8
 8001914:	40020400 	.word	0x40020400

08001918 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_DMA_Start_IT+0x20>
 8001934:	2302      	movs	r3, #2
 8001936:	e066      	b.n	8001a06 <HAL_DMA_Start_IT+0xee>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d155      	bne.n	80019f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f8fb 	bl	8001b6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	2b00      	cmp	r3, #0
 800197c:	d008      	beq.n	8001990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 020e 	orr.w	r2, r2, #14
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e00f      	b.n	80019b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0204 	bic.w	r2, r2, #4
 800199e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 020a 	orr.w	r2, r2, #10
 80019ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0201 	orr.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e005      	b.n	8001a04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a00:	2302      	movs	r3, #2
 8001a02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2204      	movs	r2, #4
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d026      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x7a>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d021      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d107      	bne.n	8001a62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0204 	bic.w	r2, r2, #4
 8001a60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	f003 021f 	and.w	r2, r3, #31
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2104      	movs	r1, #4
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d071      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a86:	e06c      	b.n	8001b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2202      	movs	r2, #2
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02e      	beq.n	8001afa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d029      	beq.n	8001afa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10b      	bne.n	8001acc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 020a 	bic.w	r2, r2, #10
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2102      	movs	r1, #2
 8001ada:	fa01 f202 	lsl.w	r2, r1, r2
 8001ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d038      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001af8:	e033      	b.n	8001b62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	2208      	movs	r2, #8
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d025      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
}
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d108      	bne.n	8001bcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bca:	e007      	b.n	8001bdc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d802      	bhi.n	8001c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	e001      	b.n	8001c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c04:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	3b08      	subs	r3, #8
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	009a      	lsls	r2, r3, #2
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40020407 	.word	0x40020407
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020820 	.word	0x40020820
 8001c5c:	cccccccd 	.word	0xcccccccd
 8001c60:	40020880 	.word	0x40020880

08001c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2201      	movs	r2, #1
 8001c92:	409a      	lsls	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	1000823f 	.word	0x1000823f
 8001ca8:	40020940 	.word	0x40020940

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cba:	e15a      	b.n	8001f72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 814c 	beq.w	8001f6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d00b      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d007      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce8:	2b11      	cmp	r3, #17
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	f003 0201 	and.w	r2, r3, #1
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0xea>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d123      	bne.n	8001dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	08da      	lsrs	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3208      	adds	r2, #8
 8001dd8:	6939      	ldr	r1, [r7, #16]
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0203 	and.w	r2, r3, #3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a6 	beq.w	8001f6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e2c:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e62:	d01f      	beq.n	8001ea4 <HAL_GPIO_Init+0x1f8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d019      	beq.n	8001ea0 <HAL_GPIO_Init+0x1f4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1f0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_GPIO_Init+0x2f8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e4>
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	e00a      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e90:	2306      	movs	r3, #6
 8001e92:	e008      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e006      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb6:	4937      	ldr	r1, [pc, #220]	; (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001eee:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f12:	4a26      	ldr	r2, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f66:	4a11      	ldr	r2, [pc, #68]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f47f ae9d 	bne.w	8001cbc <HAL_GPIO_Init+0x10>
  }
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010000 	.word	0x40010000
 8001f98:	48000400 	.word	0x48000400
 8001f9c:	48000800 	.word	0x48000800
 8001fa0:	48000c00 	.word	0x48000c00
 8001fa4:	48001000 	.word	0x48001000
 8001fa8:	48001400 	.word	0x48001400
 8001fac:	40010400 	.word	0x40010400

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af06      	add	r7, sp, #24
 8001fe6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0ad      	b.n	800214e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f007 fac6 	bl	8009598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fafe 	bl	800561a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e035      	b.n	8002090 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	015b      	lsls	r3, r3, #5
 800202a:	4413      	add	r3, r2
 800202c:	3329      	adds	r3, #41	; 0x29
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	015b      	lsls	r3, r3, #5
 8002038:	4413      	add	r3, r2
 800203a:	3328      	adds	r3, #40	; 0x28
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	b291      	uxth	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	015b      	lsls	r3, r3, #5
 800204a:	4413      	add	r3, r2
 800204c:	3336      	adds	r3, #54	; 0x36
 800204e:	460a      	mov	r2, r1
 8002050:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	015b      	lsls	r3, r3, #5
 8002058:	4413      	add	r3, r2
 800205a:	332b      	adds	r3, #43	; 0x2b
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	015b      	lsls	r3, r3, #5
 8002066:	4413      	add	r3, r2
 8002068:	3338      	adds	r3, #56	; 0x38
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	4413      	add	r3, r2
 8002076:	333c      	adds	r3, #60	; 0x3c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	3302      	adds	r3, #2
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	4413      	add	r3, r2
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	3301      	adds	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d3c4      	bcc.n	8002024 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e031      	b.n	8002104 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	015b      	lsls	r3, r3, #5
 80020a6:	4413      	add	r3, r2
 80020a8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	015b      	lsls	r3, r3, #5
 80020c6:	4413      	add	r3, r2
 80020c8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	015b      	lsls	r3, r3, #5
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	330a      	adds	r3, #10
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	4413      	add	r3, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	3301      	adds	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	7bfa      	ldrb	r2, [r7, #15]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3c8      	bcc.n	80020a0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	687e      	ldr	r6, [r7, #4]
 8002116:	466d      	mov	r5, sp
 8002118:	f106 0410 	add.w	r4, r6, #16
 800211c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	1d33      	adds	r3, r6, #4
 8002126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f003 fa91 	bl	8005650 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fe35 	bl	8002db6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002156 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_Start+0x16>
 8002168:	2302      	movs	r3, #2
 800216a:	e012      	b.n	8002192 <HAL_PCD_Start+0x3c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f004 fab5 	bl	80066e8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fa30 	bl	80055e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fab5 	bl	8006716 <USB_ReadInterrupts>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b6:	d102      	bne.n	80021be <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fb33 	bl	8002824 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f004 faa7 	bl	8006716 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d2:	d112      	bne.n	80021fa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e6:	b292      	uxth	r2, r2
 80021e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f007 fa6a 	bl	80096c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80021f2:	2100      	movs	r1, #0
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f91e 	bl	8002436 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fa89 	bl	8006716 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800220e:	d10b      	bne.n	8002228 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002222:	b292      	uxth	r2, r2
 8002224:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f004 fa72 	bl	8006716 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223c:	d10b      	bne.n	8002256 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002250:	b292      	uxth	r2, r2
 8002252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fa5b 	bl	8006716 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226a:	d133      	bne.n	80022d4 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0204 	bic.w	r2, r2, #4
 800227e:	b292      	uxth	r2, r2
 8002280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0208 	bic.w	r2, r2, #8
 8002296:	b292      	uxth	r2, r2
 8002298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022ae:	2100      	movs	r1, #0
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f007 fbf9 	bl	8009aa8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f007 fa3e 	bl	8009738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022ce:	b292      	uxth	r2, r2
 80022d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 fa1c 	bl	8006716 <USB_ReadInterrupts>
 80022de:	4603      	mov	r3, r0
 80022e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e8:	d126      	bne.n	8002338 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0208 	orr.w	r2, r2, #8
 80022fc:	b292      	uxth	r2, r2
 80022fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002314:	b292      	uxth	r2, r2
 8002316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0204 	orr.w	r2, r2, #4
 800232c:	b292      	uxth	r2, r2
 800232e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f007 f9e6 	bl	8009704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f004 f9ea 	bl	8006716 <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d13f      	bne.n	80023cc <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235e:	b292      	uxth	r2, r2
 8002360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12b      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002376:	b29a      	uxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0204 	orr.w	r2, r2, #4
 8002380:	b292      	uxth	r2, r2
 8002382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0208 	orr.w	r2, r2, #8
 8002398:	b292      	uxth	r2, r2
 800239a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023bc:	2101      	movs	r1, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f007 fb72 	bl	8009aa8 <HAL_PCDEx_LPM_Callback>
 80023c4:	e002      	b.n	80023cc <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f007 f99c 	bl	8009704 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f004 f9a0 	bl	8006716 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d10e      	bne.n	8002400 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f4:	b292      	uxth	r2, r2
 80023f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f007 f955 	bl	80096aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 f986 	bl	8006716 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d10b      	bne.n	800242e <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241e:	b29a      	uxth	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002428:	b292      	uxth	r2, r2
 800242a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_SetAddress+0x1a>
 800244c:	2302      	movs	r3, #2
 800244e:	e013      	b.n	8002478 <HAL_PCD_SetAddress+0x42>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f004 f929 	bl	80066c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	70fb      	strb	r3, [r7, #3]
 8002492:	460b      	mov	r3, r1
 8002494:	803b      	strh	r3, [r7, #0]
 8002496:	4613      	mov	r3, r2
 8002498:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da0b      	bge.n	80024be <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	3328      	adds	r3, #40	; 0x28
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
 80024bc:	e00b      	b.n	80024d6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	015b      	lsls	r3, r3, #5
 80024c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024e2:	883a      	ldrh	r2, [r7, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	78ba      	ldrb	r2, [r7, #2]
 80024ec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002500:	78bb      	ldrb	r3, [r7, #2]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d102      	bne.n	800250c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_PCD_EP_Open+0x9a>
 8002516:	2302      	movs	r3, #2
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_Open+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f8b5 	bl	8005698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002536:	7afb      	ldrb	r3, [r7, #11]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da0b      	bge.n	800256c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	015b      	lsls	r3, r3, #5
 800255c:	3328      	adds	r3, #40	; 0x28
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	705a      	strb	r2, [r3, #1]
 800256a:	e00b      	b.n	8002584 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_PCD_EP_Close+0x5e>
 800259a:	2302      	movs	r3, #2
 800259c:	e00e      	b.n	80025bc <HAL_PCD_EP_Close+0x7c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fb63 	bl	8005c78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	460b      	mov	r3, r1
 80025d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2200      	movs	r2, #0
 80025fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	b2da      	uxtb	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	2b00      	cmp	r3, #0
 8002612:	d106      	bne.n	8002622 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fcc2 	bl	8005fa4 <USB_EPStartXfer>
 8002620:	e005      	b.n	800262e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f003 fcbb 	bl	8005fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	330a      	adds	r3, #10
 800264e:	015b      	lsls	r3, r3, #5
 8002650:	4413      	add	r3, r2
 8002652:	3304      	adds	r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	460b      	mov	r3, r1
 8002670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	015b      	lsls	r3, r3, #5
 800267a:	3328      	adds	r3, #40	; 0x28
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026a6:	7afb      	ldrb	r3, [r7, #11]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fc74 	bl	8005fa4 <USB_EPStartXfer>
 80026bc:	e005      	b.n	80026ca <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6979      	ldr	r1, [r7, #20]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fc6d 	bl	8005fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 0207 	and.w	r2, r3, #7
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d901      	bls.n	80026f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e046      	b.n	8002780 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da0b      	bge.n	8002712 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	015b      	lsls	r3, r3, #5
 8002702:	3328      	adds	r3, #40	; 0x28
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	705a      	strb	r2, [r3, #1]
 8002710:	e009      	b.n	8002726 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	b2da      	uxtb	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_PCD_EP_SetStall+0x72>
 8002742:	2302      	movs	r3, #2
 8002744:	e01c      	b.n	8002780 <HAL_PCD_EP_SetStall+0xac>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fedd 	bl	8006514 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	2b00      	cmp	r3, #0
 8002762:	d108      	bne.n	8002776 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f003 ffe0 	bl	8006736 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d901      	bls.n	80027a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e03a      	b.n	800281c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da0b      	bge.n	80027c6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	3328      	adds	r3, #40	; 0x28
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00b      	b.n	80027de <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_PCD_EP_ClrStall+0x76>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e00e      	b.n	800281c <HAL_PCD_EP_ClrStall+0x94>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 fec3 	bl	8006598 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b089      	sub	sp, #36	; 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800282c:	e274      	b.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002836:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002842:	7d7b      	ldrb	r3, [r7, #21]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f040 813c 	bne.w	8002ac2 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	f003 0310 	and.w	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d14f      	bne.n	80028f4 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	b29b      	uxth	r3, r3
 800285c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002864:	b29c      	uxth	r4, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800286e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002872:	b29b      	uxth	r3, r3
 8002874:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3328      	adds	r3, #40	; 0x28
 800287a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	4413      	add	r3, r2
 8002896:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	441a      	add	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028b2:	2100      	movs	r1, #0
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f006 fee1 	bl	800967c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8228 	beq.w	8002d18 <PCD_EP_ISR_Handler+0x4f4>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8223 	bne.w	8002d18 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b292      	uxth	r2, r2
 80028e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028f2:	e211      	b.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028fa:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002904:	8a7b      	ldrh	r3, [r7, #18]
 8002906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800290a:	2b00      	cmp	r3, #0
 800290c:	d031      	beq.n	8002972 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002916:	b29b      	uxth	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4413      	add	r3, r2
 8002928:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002948:	b29b      	uxth	r3, r3
 800294a:	f003 ff41 	bl	80067d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29a      	uxth	r2, r3
 8002956:	f640 738f 	movw	r3, #3983	; 0xf8f
 800295a:	4013      	ands	r3, r2
 800295c:	b29c      	uxth	r4, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002966:	b292      	uxth	r2, r2
 8002968:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f006 fe5c 	bl	8009628 <HAL_PCD_SetupStageCallback>
 8002970:	e1d2      	b.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002972:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f280 81ce 	bge.w	8002d18 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29a      	uxth	r2, r3
 8002984:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002988:	4013      	ands	r3, r2
 800298a:	b29c      	uxth	r4, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002994:	b292      	uxth	r2, r2
 8002996:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d019      	beq.n	80029fc <PCD_EP_ISR_Handler+0x1d8>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6959      	ldr	r1, [r3, #20]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f003 fef5 	bl	80067d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	441a      	add	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029f4:	2100      	movs	r1, #0
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f006 fe28 	bl	800964c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461c      	mov	r4, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	441c      	add	r4, r3
 8002a0e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002a12:	461c      	mov	r4, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10e      	bne.n	8002a3a <PCD_EP_ISR_Handler+0x216>
 8002a1c:	8823      	ldrh	r3, [r4, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	8023      	strh	r3, [r4, #0]
 8002a28:	8823      	ldrh	r3, [r4, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8023      	strh	r3, [r4, #0]
 8002a38:	e02d      	b.n	8002a96 <PCD_EP_ISR_Handler+0x272>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002a40:	d812      	bhi.n	8002a68 <PCD_EP_ISR_Handler+0x244>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <PCD_EP_ISR_Handler+0x238>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	8023      	strh	r3, [r4, #0]
 8002a66:	e016      	b.n	8002a96 <PCD_EP_ISR_Handler+0x272>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x25e>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	029b      	lsls	r3, r3, #10
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	b29c      	uxth	r4, r3
 8002aa8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002aac:	b29c      	uxth	r4, r3
 8002aae:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ab2:	b29c      	uxth	r4, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b9e      	ldr	r3, [pc, #632]	; (8002d34 <PCD_EP_ISR_Handler+0x510>)
 8002aba:	4323      	orrs	r3, r4
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	8013      	strh	r3, [r2, #0]
 8002ac0:	e12a      	b.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	7d7b      	ldrb	r3, [r7, #21]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f280 80cb 	bge.w	8002c72 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	7d7b      	ldrb	r3, [r7, #21]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29c      	uxth	r4, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	7d7b      	ldrb	r3, [r7, #21]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b04:	b292      	uxth	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b08:	7d7b      	ldrb	r3, [r7, #21]
 8002b0a:	015b      	lsls	r3, r3, #5
 8002b0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	7b1b      	ldrb	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11f      	bne.n	8002b5e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b42:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002b44:	8bfb      	ldrh	r3, [r7, #30]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06e      	beq.n	8002c28 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88da      	ldrh	r2, [r3, #6]
 8002b56:	8bfb      	ldrh	r3, [r7, #30]
 8002b58:	f003 fe3a 	bl	80067d0 <USB_ReadPMA>
 8002b5c:	e064      	b.n	8002c28 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b78:	b29c      	uxth	r4, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <PCD_EP_ISR_Handler+0x514>)
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01f      	beq.n	8002bea <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bce:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002bd0:	8bfb      	ldrh	r3, [r7, #30]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d028      	beq.n	8002c28 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6959      	ldr	r1, [r3, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	891a      	ldrh	r2, [r3, #8]
 8002be2:	8bfb      	ldrh	r3, [r7, #30]
 8002be4:	f003 fdf4 	bl	80067d0 <USB_ReadPMA>
 8002be8:	e01e      	b.n	8002c28 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002c10:	8bfb      	ldrh	r3, [r7, #30]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6959      	ldr	r1, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	895a      	ldrh	r2, [r3, #10]
 8002c22:	8bfb      	ldrh	r3, [r7, #30]
 8002c24:	f003 fdd4 	bl	80067d0 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	8bfb      	ldrh	r3, [r7, #30]
 8002c2e:	441a      	add	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	8bfb      	ldrh	r3, [r7, #30]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <PCD_EP_ISR_Handler+0x42e>
 8002c48:	8bfa      	ldrh	r2, [r7, #30]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d206      	bcs.n	8002c60 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f006 fcf7 	bl	800964c <HAL_PCD_DataOutStageCallback>
 8002c5e:	e008      	b.n	8002c72 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	7819      	ldrb	r1, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fca9 	bl	80025c4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c72:	8a7b      	ldrh	r3, [r7, #18]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d04d      	beq.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c7c:	7d7b      	ldrb	r3, [r7, #21]
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	3328      	adds	r3, #40	; 0x28
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	7d7b      	ldrb	r3, [r7, #21]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	b29c      	uxth	r4, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	7d7b      	ldrb	r3, [r7, #21]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f006 fcbc 	bl	800967c <HAL_PCD_DataInStageCallback>
 8002d04:	e008      	b.n	8002d18 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	7819      	ldrb	r1, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fca5 	bl	8002662 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b21b      	sxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f6ff ad82 	blt.w	800282e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3724      	adds	r7, #36	; 0x24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	ffff8080 	.word	0xffff8080
 8002d38:	ffff80c0 	.word	0xffff80c0

08002d3c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	817b      	strh	r3, [r7, #10]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d4e:	897b      	ldrh	r3, [r7, #10]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	015b      	lsls	r3, r3, #5
 8002d62:	3328      	adds	r3, #40	; 0x28
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	e006      	b.n	8002d7a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2200      	movs	r2, #0
 8002d84:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	80da      	strh	r2, [r3, #6]
 8002d8e:	e00b      	b.n	8002da8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2201      	movs	r2, #1
 8002d94:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	0c1b      	lsrs	r3, r3, #16
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2e:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e40:	4a41      	ldr	r2, [pc, #260]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e48:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	; 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a3f      	ldr	r2, [pc, #252]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d158      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e057      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e9c:	e04d      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea4:	d141      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb2:	d131      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eba:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2232      	movs	r2, #50	; 0x32
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eea:	e002      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002efe:	d102      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d112      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e011      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f28:	e007      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e308      	b.n	8003578 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d075      	beq.n	800305e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f72:	4ba3      	ldr	r3, [pc, #652]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f7c:	4ba0      	ldr	r3, [pc, #640]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3e>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_OscConfig+0x44>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d10b      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	4b99      	ldr	r3, [pc, #612]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d05b      	beq.n	800305c <HAL_RCC_OscConfig+0x108>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d157      	bne.n	800305c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e2e3      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x74>
 8002fba:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a90      	ldr	r2, [pc, #576]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e01d      	b.n	8003004 <HAL_RCC_OscConfig+0xb0>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCC_OscConfig+0x98>
 8002fd2:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a8a      	ldr	r2, [pc, #552]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a87      	ldr	r2, [pc, #540]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e00b      	b.n	8003004 <HAL_RCC_OscConfig+0xb0>
 8002fec:	4b84      	ldr	r3, [pc, #528]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a83      	ldr	r2, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4b81      	ldr	r3, [pc, #516]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a80      	ldr	r2, [pc, #512]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe faf0 	bl	80015f0 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003014:	f7fe faec 	bl	80015f0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b64      	cmp	r3, #100	; 0x64
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e2a8      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0xc0>
 8003032:	e014      	b.n	800305e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe fadc 	bl	80015f0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303c:	f7fe fad8 	bl	80015f0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e294      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0xe8>
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d075      	beq.n	8003156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306a:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003074:	4b62      	ldr	r3, [pc, #392]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d102      	bne.n	800308a <HAL_RCC_OscConfig+0x136>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d002      	beq.n	8003090 <HAL_RCC_OscConfig+0x13c>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b04      	cmp	r3, #4
 800308e:	d11f      	bne.n	80030d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x154>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e267      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b55      	ldr	r3, [pc, #340]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	4952      	ldr	r1, [pc, #328]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030bc:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_OscConfig+0x2b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd ff2d 	bl	8000f20 <HAL_InitTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d043      	beq.n	8003154 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e253      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d023      	beq.n	8003120 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b49      	ldr	r3, [pc, #292]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fa84 	bl	80015f0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe fa80 	bl	80015f0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e23c      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030fe:	4b40      	ldr	r3, [pc, #256]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	4939      	ldr	r1, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
 800311e:	e01a      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003120:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a36      	ldr	r2, [pc, #216]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fa60 	bl	80015f0 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003134:	f7fe fa5c 	bl	80015f0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e218      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x1e0>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d03c      	beq.n	80031dc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe fa39 	bl	80015f0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003182:	f7fe fa35 	bl	80015f0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1f1      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 8003196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ef      	beq.n	8003182 <HAL_RCC_OscConfig+0x22e>
 80031a2:	e01b      	b.n	80031dc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe fa1c 	bl	80015f0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031bc:	f7fe fa18 	bl	80015f0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1d4      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ef      	bne.n	80031bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80ab 	beq.w	8003340 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x2b4>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e005      	b.n	800320a <HAL_RCC_OscConfig+0x2b6>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	20000004 	.word	0x20000004
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4baf      	ldr	r3, [pc, #700]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	4aae      	ldr	r2, [pc, #696]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003218:	6593      	str	r3, [r2, #88]	; 0x58
 800321a:	4bac      	ldr	r3, [pc, #688]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003226:	2301      	movs	r3, #1
 8003228:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322a:	4ba9      	ldr	r3, [pc, #676]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d118      	bne.n	8003268 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003236:	4ba6      	ldr	r3, [pc, #664]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4aa5      	ldr	r2, [pc, #660]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003242:	f7fe f9d5 	bl	80015f0 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324a:	f7fe f9d1 	bl	80015f0 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e18d      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325c:	4b9c      	ldr	r3, [pc, #624]	; (80034d0 <HAL_RCC_OscConfig+0x57c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d108      	bne.n	8003282 <HAL_RCC_OscConfig+0x32e>
 8003270:	4b96      	ldr	r3, [pc, #600]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a95      	ldr	r2, [pc, #596]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003280:	e024      	b.n	80032cc <HAL_RCC_OscConfig+0x378>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d110      	bne.n	80032ac <HAL_RCC_OscConfig+0x358>
 800328a:	4b90      	ldr	r3, [pc, #576]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	4a8e      	ldr	r2, [pc, #568]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003292:	f043 0304 	orr.w	r3, r3, #4
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800329a:	4b8c      	ldr	r3, [pc, #560]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	4a8a      	ldr	r2, [pc, #552]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032aa:	e00f      	b.n	80032cc <HAL_RCC_OscConfig+0x378>
 80032ac:	4b87      	ldr	r3, [pc, #540]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a86      	ldr	r2, [pc, #536]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032bc:	4b83      	ldr	r3, [pc, #524]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a82      	ldr	r2, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe f98c 	bl	80015f0 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe f988 	bl	80015f0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e142      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b76      	ldr	r3, [pc, #472]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ed      	beq.n	80032dc <HAL_RCC_OscConfig+0x388>
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe f975 	bl	80015f0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe f971 	bl	80015f0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e12b      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ed      	bne.n	800330a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a64      	ldr	r2, [pc, #400]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01c      	beq.n	800338e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003354:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003356:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800335a:	4a5c      	ldr	r2, [pc, #368]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe f944 	bl	80015f0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800336c:	f7fe f940 	bl	80015f0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0fc      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCC_OscConfig+0x418>
 800338c:	e01b      	b.n	80033c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003394:	4a4d      	ldr	r2, [pc, #308]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f927 	bl	80015f0 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a6:	f7fe f923 	bl	80015f0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0df      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033b8:	4b44      	ldr	r3, [pc, #272]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ef      	bne.n	80033a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80d3 	beq.w	8003576 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033d0:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	f000 808d 	beq.w	80034f8 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d15a      	bne.n	800349c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a38      	ldr	r2, [pc, #224]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80033ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe f8fd 	bl	80015f0 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe f8f9 	bl	80015f0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e0b5      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003418:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_OscConfig+0x580>)
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6a11      	ldr	r1, [r2, #32]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003428:	3a01      	subs	r2, #1
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003432:	0212      	lsls	r2, r2, #8
 8003434:	4311      	orrs	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800343a:	0852      	lsrs	r2, r2, #1
 800343c:	3a01      	subs	r2, #1
 800343e:	0552      	lsls	r2, r2, #21
 8003440:	4311      	orrs	r1, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003446:	0852      	lsrs	r2, r2, #1
 8003448:	3a01      	subs	r2, #1
 800344a:	0652      	lsls	r2, r2, #25
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003452:	06d2      	lsls	r2, r2, #27
 8003454:	430a      	orrs	r2, r1
 8003456:	491d      	ldr	r1, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003458:	4313      	orrs	r3, r2
 800345a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003468:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fe f8bc 	bl	80015f0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f8b8 	bl	80015f0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e074      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x528>
 800349a:	e06c      	b.n	8003576 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80034a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034a8:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a07      	ldr	r2, [pc, #28]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCC_OscConfig+0x578>)
 80034ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f894 	bl	80015f0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ca:	e00e      	b.n	80034ea <HAL_RCC_OscConfig+0x596>
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40007000 	.word	0x40007000
 80034d4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe f88a 	bl	80015f0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e046      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x62c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x584>
 80034f6:	e03e      	b.n	8003576 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e039      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_OscConfig+0x62c>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0203 	and.w	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	429a      	cmp	r2, r3
 8003516:	d12c      	bne.n	8003572 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	3b01      	subs	r3, #1
 8003524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d123      	bne.n	8003572 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11b      	bne.n	8003572 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d113      	bne.n	8003572 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	085b      	lsrs	r3, r3, #1
 8003556:	3b01      	subs	r3, #1
 8003558:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d109      	bne.n	8003572 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3720      	adds	r7, #32
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e11e      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b91      	ldr	r3, [pc, #580]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b8e      	ldr	r3, [pc, #568]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	498c      	ldr	r1, [pc, #560]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b8a      	ldr	r3, [pc, #552]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e106      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d073      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d129      	bne.n	8003634 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e0:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0f4      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035f0:	f000 f9b8 	bl	8003964 <RCC_GetSysClockFreqFromPLLSource>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4a7c      	ldr	r2, [pc, #496]	; (80037ec <HAL_RCC_ClockConfig+0x268>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d93f      	bls.n	800367e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035fe:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003612:	2b00      	cmp	r3, #0
 8003614:	d033      	beq.n	800367e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d12f      	bne.n	800367e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800361e:	4b72      	ldr	r3, [pc, #456]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003626:	4a70      	ldr	r2, [pc, #448]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e024      	b.n	800367e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0c6      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0be      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800365c:	f000 f8ce 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8003660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4a61      	ldr	r2, [pc, #388]	; (80037ec <HAL_RCC_ClockConfig+0x268>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d909      	bls.n	800367e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003672:	4a5d      	ldr	r2, [pc, #372]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003678:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4957      	ldr	r1, [pc, #348]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fd ffae 	bl	80015f0 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fd ffaa 	bl	80015f0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e095      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b4e      	ldr	r3, [pc, #312]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d023      	beq.n	8003714 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b43      	ldr	r3, [pc, #268]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a42      	ldr	r2, [pc, #264]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80036de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036f0:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036f8:	4a3b      	ldr	r2, [pc, #236]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80036fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4936      	ldr	r1, [pc, #216]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
 8003712:	e008      	b.n	8003726 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d105      	bne.n	8003726 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4a32      	ldr	r2, [pc, #200]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 8003720:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003724:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003726:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d21d      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003734:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 020f 	bic.w	r2, r3, #15
 800373c:	4929      	ldr	r1, [pc, #164]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003744:	f7fd ff54 	bl	80015f0 <HAL_GetTick>
 8003748:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	e00a      	b.n	8003762 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374c:	f7fd ff50 	bl	80015f0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	f241 3288 	movw	r2, #5000	; 0x1388
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e03b      	b.n	80037da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCC_ClockConfig+0x260>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d1ed      	bne.n	800374c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4917      	ldr	r1, [pc, #92]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490f      	ldr	r1, [pc, #60]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037ae:	f000 f825 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCC_ClockConfig+0x264>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_RCC_ClockConfig+0x26c>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	fa21 f303 	lsr.w	r3, r1, r3
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x270>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x274>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fba4 	bl	8000f20 <HAL_InitTick>
 80037d8:	4603      	mov	r3, r0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40021000 	.word	0x40021000
 80037ec:	04c4b400 	.word	0x04c4b400
 80037f0:	08009ccc 	.word	0x08009ccc
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003802:	4b2c      	ldr	r3, [pc, #176]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d102      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e047      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d102      	bne.n	8003826 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	e03e      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d136      	bne.n	80038a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3301      	adds	r3, #1
 8003848:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d10c      	bne.n	800386a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800385a:	68d2      	ldr	r2, [r2, #12]
 800385c:	0a12      	lsrs	r2, r2, #8
 800385e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	617b      	str	r3, [r7, #20]
      break;
 8003868:	e00c      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003874:	68d2      	ldr	r2, [r2, #12]
 8003876:	0a12      	lsrs	r2, r2, #8
 8003878:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
      break;
 8003882:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0e5b      	lsrs	r3, r3, #25
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	3301      	adds	r3, #1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e001      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038a4:	693b      	ldr	r3, [r7, #16]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	00f42400 	.word	0x00f42400

080038bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d8:	f7ff fff0 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08009cdc 	.word	0x08009cdc

08003900 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	220f      	movs	r2, #15
 800390e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003910:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_RCC_GetClockConfig+0x60>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40022000 	.word	0x40022000

08003964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d10c      	bne.n	80039a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003992:	68d2      	ldr	r2, [r2, #12]
 8003994:	0a12      	lsrs	r2, r2, #8
 8003996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
    break;
 80039a0:	e00c      	b.n	80039bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0a12      	lsrs	r2, r2, #8
 80039b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    break;
 80039ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	3301      	adds	r3, #1
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039d6:	687b      	ldr	r3, [r7, #4]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40021000 	.word	0x40021000
 80039e8:	00f42400 	.word	0x00f42400

080039ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f4:	2300      	movs	r3, #0
 80039f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f8:	2300      	movs	r3, #0
 80039fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8098 	beq.w	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10d      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a3f      	ldr	r2, [pc, #252]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a32:	2301      	movs	r3, #1
 8003a34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a36:	4b3a      	ldr	r3, [pc, #232]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a39      	ldr	r2, [pc, #228]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a42:	f7fd fdd5 	bl	80015f0 <HAL_GetTick>
 8003a46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a48:	e009      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fd fdd1 	bl	80015f0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d902      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5e:	4b30      	ldr	r3, [pc, #192]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ef      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a6a:	7cfb      	ldrb	r3, [r7, #19]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d159      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d019      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a8c:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a98:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa8:	4b1c      	ldr	r3, [pc, #112]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fd91 	bl	80015f0 <HAL_GetTick>
 8003ace:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad0:	e00b      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fd8d 	bl	80015f0 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d902      	bls.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ec      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4903      	ldr	r1, [pc, #12]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	74bb      	strb	r3, [r7, #18]
 8003b1a:	e005      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b28:	7c7b      	ldrb	r3, [r7, #17]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4ba6      	ldr	r3, [pc, #664]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4aa5      	ldr	r2, [pc, #660]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b46:	4ba0      	ldr	r3, [pc, #640]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 0203 	bic.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	499c      	ldr	r1, [pc, #624]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b68:	4b97      	ldr	r3, [pc, #604]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 020c 	bic.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	4994      	ldr	r1, [pc, #592]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8a:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	498b      	ldr	r1, [pc, #556]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bac:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	4983      	ldr	r1, [pc, #524]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bce:	4b7e      	ldr	r3, [pc, #504]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	497a      	ldr	r1, [pc, #488]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bf0:	4b75      	ldr	r3, [pc, #468]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4972      	ldr	r1, [pc, #456]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c12:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4969      	ldr	r1, [pc, #420]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c34:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4961      	ldr	r1, [pc, #388]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c56:	4b5c      	ldr	r3, [pc, #368]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	4958      	ldr	r1, [pc, #352]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	4950      	ldr	r1, [pc, #320]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d015      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb0:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	4942      	ldr	r1, [pc, #264]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cce:	d105      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cda:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4934      	ldr	r1, [pc, #208]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a2e      	ldr	r2, [pc, #184]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d12:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	4926      	ldr	r1, [pc, #152]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	4918      	ldr	r1, [pc, #96]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	490a      	ldr	r1, [pc, #40]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e084      	b.n	8003ee8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fc fee1 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e1e:	d902      	bls.n	8003e26 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e002      	b.n	8003e2c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e34:	d007      	beq.n	8003e46 <HAL_SPI_Init+0x7a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e56:	d903      	bls.n	8003e60 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e5e:	e002      	b.n	8003e66 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	ea42 0103 	orr.w	r1, r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0204 	and.w	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e049      	b.n	8003f96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc ff5c 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fe46 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e021      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_TIM_Base_Start_IT+0x68>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d00b      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x5a>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	00010007 	.word	0x00010007

0800400c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e049      	b.n	80040b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fc fe84 	bl	8000d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fdb8 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start_DMA+0x28>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e03c      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0xa2>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start_DMA+0x42>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e02f      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0xa2>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e022      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d109      	bne.n	8004132 <HAL_TIM_PWM_Start_DMA+0x76>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	e015      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0xa2>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d109      	bne.n	800414c <HAL_TIM_PWM_Start_DMA+0x90>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e008      	b.n	800415e <HAL_TIM_PWM_Start_DMA+0xa2>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	e178      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_TIM_PWM_Start_DMA+0xc4>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e03c      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0x13e>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d109      	bne.n	800419a <HAL_TIM_PWM_Start_DMA+0xde>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	e02f      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0x13e>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d109      	bne.n	80041b4 <HAL_TIM_PWM_Start_DMA+0xf8>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e022      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0x13e>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d109      	bne.n	80041ce <HAL_TIM_PWM_Start_DMA+0x112>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e015      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0x13e>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e008      	b.n	80041fa <HAL_TIM_PWM_Start_DMA+0x13e>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d034      	beq.n	8004268 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start_DMA+0x152>
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e124      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start_DMA+0x162>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	e026      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start_DMA+0x172>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800422c:	e01e      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start_DMA+0x182>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	e016      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start_DMA+0x192>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800424c:	e00e      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425c:	e006      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004266:	e001      	b.n	800426c <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0f5      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	f200 80ae 	bhi.w	80043d0 <HAL_TIM_PWM_Start_DMA+0x314>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080043d1 	.word	0x080043d1
 8004284:	080043d1 	.word	0x080043d1
 8004288:	080043d1 	.word	0x080043d1
 800428c:	080042f9 	.word	0x080042f9
 8004290:	080043d1 	.word	0x080043d1
 8004294:	080043d1 	.word	0x080043d1
 8004298:	080043d1 	.word	0x080043d1
 800429c:	08004341 	.word	0x08004341
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	080043d1 	.word	0x080043d1
 80042ac:	08004389 	.word	0x08004389
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	4a6a      	ldr	r2, [pc, #424]	; (8004460 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	4a69      	ldr	r2, [pc, #420]	; (8004464 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	4a68      	ldr	r2, [pc, #416]	; (8004468 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80042c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3334      	adds	r3, #52	; 0x34
 80042d4:	461a      	mov	r2, r3
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	f7fd fb1e 	bl	8001918 <HAL_DMA_Start_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0b8      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f4:	60da      	str	r2, [r3, #12]
      break;
 80042f6:	e06c      	b.n	80043d2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	4a58      	ldr	r2, [pc, #352]	; (8004460 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	4a57      	ldr	r2, [pc, #348]	; (8004464 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004306:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	4a56      	ldr	r2, [pc, #344]	; (8004468 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3338      	adds	r3, #56	; 0x38
 800431c:	461a      	mov	r2, r3
 800431e:	887b      	ldrh	r3, [r7, #2]
 8004320:	f7fd fafa 	bl	8001918 <HAL_DMA_Start_IT>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e094      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800433c:	60da      	str	r2, [r3, #12]
      break;
 800433e:	e048      	b.n	80043d2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a46      	ldr	r2, [pc, #280]	; (8004460 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4a45      	ldr	r2, [pc, #276]	; (8004464 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800434e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a44      	ldr	r2, [pc, #272]	; (8004468 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	333c      	adds	r3, #60	; 0x3c
 8004364:	461a      	mov	r2, r3
 8004366:	887b      	ldrh	r3, [r7, #2]
 8004368:	f7fd fad6 	bl	8001918 <HAL_DMA_Start_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e070      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004384:	60da      	str	r2, [r3, #12]
      break;
 8004386:	e024      	b.n	80043d2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	4a34      	ldr	r2, [pc, #208]	; (8004460 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	4a33      	ldr	r2, [pc, #204]	; (8004464 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	4a32      	ldr	r2, [pc, #200]	; (8004468 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800439e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3340      	adds	r3, #64	; 0x40
 80043ac:	461a      	mov	r2, r3
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	f7fd fab2 	bl	8001918 <HAL_DMA_Start_IT>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e04c      	b.n	8004458 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043cc:	60da      	str	r2, [r3, #12]
      break;
 80043ce:	e000      	b.n	80043d2 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 80043d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2201      	movs	r2, #1
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 ff76 	bl	80052cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a21      	ldr	r2, [pc, #132]	; (800446c <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_TIM_PWM_Start_DMA+0x356>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_TIM_PWM_Start_DMA+0x356>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_TIM_PWM_Start_DMA+0x356>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_TIM_PWM_Start_DMA+0x356>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d101      	bne.n	8004416 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_TIM_PWM_Start_DMA+0x35c>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8004434:	4013      	ands	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d00b      	beq.n	8004456 <HAL_TIM_PWM_Start_DMA+0x39a>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d007      	beq.n	8004456 <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	08004aaf 	.word	0x08004aaf
 8004464:	08004b57 	.word	0x08004b57
 8004468:	08004a1d 	.word	0x08004a1d
 800446c:	40012c00 	.word	0x40012c00
 8004470:	40013400 	.word	0x40013400
 8004474:	40014000 	.word	0x40014000
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800
 8004480:	00010007 	.word	0x00010007

08004484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b02      	cmp	r3, #2
 8004498:	d122      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11b      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0202 	mvn.w	r2, #2
 80044b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa76 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 80044cc:	e005      	b.n	80044da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa68 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fa79 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d122      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d11b      	bne.n	8004534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0204 	mvn.w	r2, #4
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa4c 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa3e 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa4f 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b08      	cmp	r3, #8
 8004540:	d122      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b08      	cmp	r3, #8
 800454e:	d11b      	bne.n	8004588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0208 	mvn.w	r2, #8
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2204      	movs	r2, #4
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fa22 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa14 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa25 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d122      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d11b      	bne.n	80045dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9f8 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9ea 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f9fb 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0201 	mvn.w	r2, #1
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fc fa88 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 ff9e 	bl	8005570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004642:	d10e      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b80      	cmp	r3, #128	; 0x80
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 ff91 	bl	8005584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f9b3 	bl	80049f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b20      	cmp	r3, #32
 800469a:	d10e      	bne.n	80046ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0220 	mvn.w	r2, #32
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 ff51 	bl	800555c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c8:	d10f      	bne.n	80046ea <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 ff57 	bl	8005598 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046f8:	d10f      	bne.n	800471a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004708:	d107      	bne.n	800471a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 ff49 	bl	80055ac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004728:	d10f      	bne.n	800474a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004738:	d107      	bne.n	800474a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 ff3b 	bl	80055c0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004754:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004758:	d10f      	bne.n	800477a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004768:	d107      	bne.n	800477a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 ff2d 	bl	80055d4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800479a:	2302      	movs	r3, #2
 800479c:	e0fd      	b.n	800499a <HAL_TIM_PWM_ConfigChannel+0x216>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b14      	cmp	r3, #20
 80047aa:	f200 80f0 	bhi.w	800498e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	08004809 	.word	0x08004809
 80047b8:	0800498f 	.word	0x0800498f
 80047bc:	0800498f 	.word	0x0800498f
 80047c0:	0800498f 	.word	0x0800498f
 80047c4:	08004849 	.word	0x08004849
 80047c8:	0800498f 	.word	0x0800498f
 80047cc:	0800498f 	.word	0x0800498f
 80047d0:	0800498f 	.word	0x0800498f
 80047d4:	0800488b 	.word	0x0800488b
 80047d8:	0800498f 	.word	0x0800498f
 80047dc:	0800498f 	.word	0x0800498f
 80047e0:	0800498f 	.word	0x0800498f
 80047e4:	080048cb 	.word	0x080048cb
 80047e8:	0800498f 	.word	0x0800498f
 80047ec:	0800498f 	.word	0x0800498f
 80047f0:	0800498f 	.word	0x0800498f
 80047f4:	0800490d 	.word	0x0800490d
 80047f8:	0800498f 	.word	0x0800498f
 80047fc:	0800498f 	.word	0x0800498f
 8004800:	0800498f 	.word	0x0800498f
 8004804:	0800494d 	.word	0x0800494d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa66 	bl	8004ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0204 	bic.w	r2, r2, #4
 8004832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6999      	ldr	r1, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	619a      	str	r2, [r3, #24]
      break;
 8004846:	e0a3      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fad6 	bl	8004e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	619a      	str	r2, [r3, #24]
      break;
 8004888:	e082      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68b9      	ldr	r1, [r7, #8]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fb3f 	bl	8004f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0208 	orr.w	r2, r2, #8
 80048a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0204 	bic.w	r2, r2, #4
 80048b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	61da      	str	r2, [r3, #28]
      break;
 80048c8:	e062      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fba7 	bl	8005024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	021a      	lsls	r2, r3, #8
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]
      break;
 800490a:	e041      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fc10 	bl	8005138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0208 	orr.w	r2, r2, #8
 8004926:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0204 	bic.w	r2, r2, #4
 8004936:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800494a:	e021      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fc54 	bl	8005200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004966:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004976:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	021a      	lsls	r2, r3, #8
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800498c:	e000      	b.n	8004990 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800498e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d107      	bne.n	8004a44 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a42:	e02a      	b.n	8004a9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d107      	bne.n	8004a5e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2202      	movs	r2, #2
 8004a52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	e01d      	b.n	8004a9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d107      	bne.n	8004a78 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a76:	e010      	b.n	8004a9a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d107      	bne.n	8004a92 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2208      	movs	r2, #8
 8004a86:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a90:	e003      	b.n	8004a9a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff ffb4 	bl	8004a08 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	771a      	strb	r2, [r3, #28]
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d10b      	bne.n	8004ade <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d136      	bne.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	e031      	b.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d10b      	bne.n	8004b00 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2202      	movs	r2, #2
 8004aec:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d125      	bne.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afe:	e020      	b.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d10b      	bne.n	8004b22 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d114      	bne.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b20:	e00f      	b.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d10a      	bne.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2208      	movs	r2, #8
 8004b30:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ff42 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	771a      	strb	r2, [r3, #28]
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d103      	bne.n	8004b76 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2201      	movs	r2, #1
 8004b72:	771a      	strb	r2, [r3, #28]
 8004b74:	e019      	b.n	8004baa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d103      	bne.n	8004b88 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2202      	movs	r2, #2
 8004b84:	771a      	strb	r2, [r3, #28]
 8004b86:	e010      	b.n	8004baa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d103      	bne.n	8004b9a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2204      	movs	r2, #4
 8004b96:	771a      	strb	r2, [r3, #28]
 8004b98:	e007      	b.n	8004baa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d102      	bne.n	8004baa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f7ff ff18 	bl	80049e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	771a      	strb	r2, [r3, #28]
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <TIM_Base_SetConfig+0x104>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00f      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d00b      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a39      	ldr	r2, [pc, #228]	; (8004cc8 <TIM_Base_SetConfig+0x108>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <TIM_Base_SetConfig+0x10c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d003      	beq.n	8004bf8 <TIM_Base_SetConfig+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <TIM_Base_SetConfig+0x110>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <TIM_Base_SetConfig+0x104>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01b      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d017      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <TIM_Base_SetConfig+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <TIM_Base_SetConfig+0x10c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00f      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a28      	ldr	r2, [pc, #160]	; (8004cd0 <TIM_Base_SetConfig+0x110>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <TIM_Base_SetConfig+0x114>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <TIM_Base_SetConfig+0x118>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <TIM_Base_SetConfig+0x11c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <TIM_Base_SetConfig+0x104>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0xe8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <TIM_Base_SetConfig+0x110>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0xe8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <TIM_Base_SetConfig+0x114>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0xe8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <TIM_Base_SetConfig+0x118>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xe8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0e      	ldr	r2, [pc, #56]	; (8004cdc <TIM_Base_SetConfig+0x11c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d103      	bne.n	8004cb0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f023 0302 	bic.w	r3, r3, #2
 8004d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a2c      	ldr	r2, [pc, #176]	; (8004dec <TIM_OC1_SetConfig+0x10c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00f      	beq.n	8004d60 <TIM_OC1_SetConfig+0x80>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a2b      	ldr	r2, [pc, #172]	; (8004df0 <TIM_OC1_SetConfig+0x110>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_OC1_SetConfig+0x80>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a2a      	ldr	r2, [pc, #168]	; (8004df4 <TIM_OC1_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_OC1_SetConfig+0x80>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a29      	ldr	r2, [pc, #164]	; (8004df8 <TIM_OC1_SetConfig+0x118>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_OC1_SetConfig+0x80>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a28      	ldr	r2, [pc, #160]	; (8004dfc <TIM_OC1_SetConfig+0x11c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10c      	bne.n	8004d7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0308 	bic.w	r3, r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <TIM_OC1_SetConfig+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_OC1_SetConfig+0xc2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <TIM_OC1_SetConfig+0x110>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_OC1_SetConfig+0xc2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <TIM_OC1_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_OC1_SetConfig+0xc2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <TIM_OC1_SetConfig+0x118>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC1_SetConfig+0xc2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a17      	ldr	r2, [pc, #92]	; (8004dfc <TIM_OC1_SetConfig+0x11c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800

08004e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0210 	bic.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0320 	bic.w	r3, r3, #32
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_OC2_SetConfig+0x100>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_OC2_SetConfig+0x6c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_OC2_SetConfig+0x104>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d10d      	bne.n	8004e88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <TIM_OC2_SetConfig+0x100>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_OC2_SetConfig+0xb0>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <TIM_OC2_SetConfig+0x104>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_OC2_SetConfig+0xb0>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <TIM_OC2_SetConfig+0x108>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_OC2_SetConfig+0xb0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1a      	ldr	r2, [pc, #104]	; (8004f0c <TIM_OC2_SetConfig+0x10c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC2_SetConfig+0xb0>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a19      	ldr	r2, [pc, #100]	; (8004f10 <TIM_OC2_SetConfig+0x110>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d113      	bne.n	8004ed8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40013400 	.word	0x40013400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800

08004f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <TIM_OC3_SetConfig+0xfc>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC3_SetConfig+0x6a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a26      	ldr	r2, [pc, #152]	; (8005014 <TIM_OC3_SetConfig+0x100>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10d      	bne.n	8004f9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <TIM_OC3_SetConfig+0xfc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_OC3_SetConfig+0xae>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <TIM_OC3_SetConfig+0x100>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_OC3_SetConfig+0xae>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <TIM_OC3_SetConfig+0x104>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_OC3_SetConfig+0xae>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <TIM_OC3_SetConfig+0x108>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_OC3_SetConfig+0xae>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	; (8005020 <TIM_OC3_SetConfig+0x10c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d113      	bne.n	8004fea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	621a      	str	r2, [r3, #32]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40013400 	.word	0x40013400
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a28      	ldr	r2, [pc, #160]	; (8005124 <TIM_OC4_SetConfig+0x100>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_OC4_SetConfig+0x6c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a27      	ldr	r2, [pc, #156]	; (8005128 <TIM_OC4_SetConfig+0x104>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	031b      	lsls	r3, r3, #12
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <TIM_OC4_SetConfig+0x100>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00f      	beq.n	80050d4 <TIM_OC4_SetConfig+0xb0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <TIM_OC4_SetConfig+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <TIM_OC4_SetConfig+0xb0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a1b      	ldr	r2, [pc, #108]	; (800512c <TIM_OC4_SetConfig+0x108>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_OC4_SetConfig+0xb0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <TIM_OC4_SetConfig+0x10c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC4_SetConfig+0xb0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a19      	ldr	r2, [pc, #100]	; (8005134 <TIM_OC4_SetConfig+0x110>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d113      	bne.n	80050fc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	019b      	lsls	r3, r3, #6
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	019b      	lsls	r3, r3, #6
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40013400 	.word	0x40013400
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800517c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	041b      	lsls	r3, r3, #16
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <TIM_OC5_SetConfig+0xb4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_OC5_SetConfig+0x7a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <TIM_OC5_SetConfig+0xb8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC5_SetConfig+0x7a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <TIM_OC5_SetConfig+0xbc>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC5_SetConfig+0x7a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a14      	ldr	r2, [pc, #80]	; (80051f8 <TIM_OC5_SetConfig+0xc0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC5_SetConfig+0x7a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <TIM_OC5_SetConfig+0xc4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d109      	bne.n	80051c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	051b      	lsls	r3, r3, #20
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <TIM_OC6_SetConfig+0xb8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00f      	beq.n	800527c <TIM_OC6_SetConfig+0x7c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a17      	ldr	r2, [pc, #92]	; (80052bc <TIM_OC6_SetConfig+0xbc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_OC6_SetConfig+0x7c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <TIM_OC6_SetConfig+0xc0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_OC6_SetConfig+0x7c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <TIM_OC6_SetConfig+0xc4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC6_SetConfig+0x7c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <TIM_OC6_SetConfig+0xc8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d109      	bne.n	8005290 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	621a      	str	r2, [r3, #32]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2201      	movs	r2, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	fa01 f303 	lsl.w	r3, r1, r3
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800532c:	2302      	movs	r3, #2
 800532e:	e065      	b.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2c      	ldr	r2, [pc, #176]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2b      	ldr	r2, [pc, #172]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d108      	bne.n	8005376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800536a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d018      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a6:	d013      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d009      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a12      	ldr	r2, [pc, #72]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a13      	ldr	r2, [pc, #76]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10c      	bne.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40014000 	.word	0x40014000

0800541c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e087      	b.n	8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a27      	ldr	r2, [pc, #156]	; (8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a25      	ldr	r2, [pc, #148]	; (8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d106      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d004      	beq.n	80054e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d126      	bne.n	8005536 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	051b      	lsls	r3, r3, #20
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d106      	bne.n	8005536 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400

0800555c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80055f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	b29b      	uxth	r3, r3
 8005602:	4313      	orrs	r3, r2
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005622:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005626:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	b29b      	uxth	r3, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	b29b      	uxth	r3, r3
 8005638:	4013      	ands	r3, r2
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005650:	b084      	sub	sp, #16
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	f107 0014 	add.w	r0, r7, #20
 800565e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffb0 	bl	80055e8 <USB_EnableGlobalInt>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005694:	b004      	add	sp, #16
 8005696:	4770      	bx	lr

08005698 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005698:	b490      	push	{r4, r7}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d819      	bhi.n	80056fa <USB_ActivateEndpoint+0x62>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <USB_ActivateEndpoint+0x34>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	080056dd 	.word	0x080056dd
 80056d0:	080056f1 	.word	0x080056f1
 80056d4:	08005701 	.word	0x08005701
 80056d8:	080056e7 	.word	0x080056e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056dc:	89bb      	ldrh	r3, [r7, #12]
 80056de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056e2:	81bb      	strh	r3, [r7, #12]
      break;
 80056e4:	e00d      	b.n	8005702 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056e6:	89bb      	ldrh	r3, [r7, #12]
 80056e8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056ec:	81bb      	strh	r3, [r7, #12]
      break;
 80056ee:	e008      	b.n	8005702 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056f0:	89bb      	ldrh	r3, [r7, #12]
 80056f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056f6:	81bb      	strh	r3, [r7, #12]
      break;
 80056f8:	e003      	b.n	8005702 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e000      	b.n	8005702 <USB_ActivateEndpoint+0x6a>
      break;
 8005700:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	441a      	add	r2, r3
 800570c:	89bb      	ldrh	r3, [r7, #12]
 800570e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	b21b      	sxth	r3, r3
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	b21a      	sxth	r2, r3
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b21b      	sxth	r3, r3
 8005742:	4313      	orrs	r3, r2
 8005744:	b21b      	sxth	r3, r3
 8005746:	b29c      	uxth	r4, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	441a      	add	r2, r3
 8005752:	4b8a      	ldr	r3, [pc, #552]	; (800597c <USB_ActivateEndpoint+0x2e4>)
 8005754:	4323      	orrs	r3, r4
 8005756:	b29b      	uxth	r3, r3
 8005758:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	7b1b      	ldrb	r3, [r3, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8112 	bne.w	8005988 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d067      	beq.n	800583c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800576c:	687c      	ldr	r4, [r7, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005774:	b29b      	uxth	r3, r3
 8005776:	441c      	add	r4, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4423      	add	r3, r4
 8005780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005784:	461c      	mov	r4, r3
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	88db      	ldrh	r3, [r3, #6]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29c      	uxth	r4, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d014      	beq.n	80057d6 <USB_ActivateEndpoint+0x13e>
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	b29c      	uxth	r4, r3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	4b6c      	ldr	r3, [pc, #432]	; (8005980 <USB_ActivateEndpoint+0x2e8>)
 80057d0:	4323      	orrs	r3, r4
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d018      	beq.n	8005810 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f4:	b29c      	uxth	r4, r3
 80057f6:	f084 0320 	eor.w	r3, r4, #32
 80057fa:	b29c      	uxth	r4, r3
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	4b5d      	ldr	r3, [pc, #372]	; (800597c <USB_ActivateEndpoint+0x2e4>)
 8005808:	4323      	orrs	r3, r4
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]
 800580e:	e22b      	b.n	8005c68 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	b29c      	uxth	r4, r3
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	4b52      	ldr	r3, [pc, #328]	; (800597c <USB_ActivateEndpoint+0x2e4>)
 8005834:	4323      	orrs	r3, r4
 8005836:	b29b      	uxth	r3, r3
 8005838:	8013      	strh	r3, [r2, #0]
 800583a:	e215      	b.n	8005c68 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800583c:	687c      	ldr	r4, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005844:	b29b      	uxth	r3, r3
 8005846:	441c      	add	r4, r3
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4423      	add	r3, r4
 8005850:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005854:	461c      	mov	r4, r3
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	88db      	ldrh	r3, [r3, #6]
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	b29b      	uxth	r3, r3
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	b29b      	uxth	r3, r3
 8005862:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005864:	687c      	ldr	r4, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586c:	b29b      	uxth	r3, r3
 800586e:	441c      	add	r4, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4423      	add	r3, r4
 8005878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800587c:	461c      	mov	r4, r3
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10e      	bne.n	80058a4 <USB_ActivateEndpoint+0x20c>
 8005886:	8823      	ldrh	r3, [r4, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800588e:	b29b      	uxth	r3, r3
 8005890:	8023      	strh	r3, [r4, #0]
 8005892:	8823      	ldrh	r3, [r4, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8023      	strh	r3, [r4, #0]
 80058a2:	e02d      	b.n	8005900 <USB_ActivateEndpoint+0x268>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b3e      	cmp	r3, #62	; 0x3e
 80058aa:	d812      	bhi.n	80058d2 <USB_ActivateEndpoint+0x23a>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <USB_ActivateEndpoint+0x22e>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	3301      	adds	r3, #1
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	029b      	lsls	r3, r3, #10
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	8023      	strh	r3, [r4, #0]
 80058d0:	e016      	b.n	8005900 <USB_ActivateEndpoint+0x268>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <USB_ActivateEndpoint+0x254>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29c      	uxth	r4, r3
 800590e:	4623      	mov	r3, r4
 8005910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d014      	beq.n	8005942 <USB_ActivateEndpoint+0x2aa>
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	b29c      	uxth	r4, r3
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <USB_ActivateEndpoint+0x2ec>)
 800593c:	4323      	orrs	r3, r4
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	b29b      	uxth	r3, r3
 8005950:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	b29c      	uxth	r4, r3
 800595a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800595e:	b29c      	uxth	r4, r3
 8005960:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005964:	b29c      	uxth	r4, r3
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <USB_ActivateEndpoint+0x2e4>)
 8005972:	4323      	orrs	r3, r4
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
 8005978:	e176      	b.n	8005c68 <USB_ActivateEndpoint+0x5d0>
 800597a:	bf00      	nop
 800597c:	ffff8080 	.word	0xffff8080
 8005980:	ffff80c0 	.word	0xffff80c0
 8005984:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	b29c      	uxth	r4, r3
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	4b96      	ldr	r3, [pc, #600]	; (8005c04 <USB_ActivateEndpoint+0x56c>)
 80059ac:	4323      	orrs	r3, r4
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80059b2:	687c      	ldr	r4, [r7, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	441c      	add	r4, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4423      	add	r3, r4
 80059c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ca:	461c      	mov	r4, r3
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	891b      	ldrh	r3, [r3, #8]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8023      	strh	r3, [r4, #0]
 80059da:	687c      	ldr	r4, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	441c      	add	r4, r3
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4423      	add	r3, r4
 80059ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059f2:	461c      	mov	r4, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	895b      	ldrh	r3, [r3, #10]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 8088 	bne.w	8005b1c <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29c      	uxth	r4, r3
 8005a1a:	4623      	mov	r3, r4
 8005a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d014      	beq.n	8005a4e <USB_ActivateEndpoint+0x3b6>
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	b29c      	uxth	r4, r3
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <USB_ActivateEndpoint+0x570>)
 8005a48:	4323      	orrs	r3, r4
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29c      	uxth	r4, r3
 8005a5c:	4623      	mov	r3, r4
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d014      	beq.n	8005a90 <USB_ActivateEndpoint+0x3f8>
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	b29c      	uxth	r4, r3
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	441a      	add	r2, r3
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <USB_ActivateEndpoint+0x574>)
 8005a8a:	4323      	orrs	r3, r4
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	b29c      	uxth	r4, r3
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	4b56      	ldr	r3, [pc, #344]	; (8005c0c <USB_ActivateEndpoint+0x574>)
 8005ab4:	4323      	orrs	r3, r4
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad0:	b29c      	uxth	r4, r3
 8005ad2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ad6:	b29c      	uxth	r4, r3
 8005ad8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005adc:	b29c      	uxth	r4, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	441a      	add	r2, r3
 8005ae8:	4b49      	ldr	r3, [pc, #292]	; (8005c10 <USB_ActivateEndpoint+0x578>)
 8005aea:	4323      	orrs	r3, r4
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	b29c      	uxth	r4, r3
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	441a      	add	r2, r3
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <USB_ActivateEndpoint+0x578>)
 8005b14:	4323      	orrs	r3, r4
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	8013      	strh	r3, [r2, #0]
 8005b1a:	e0a5      	b.n	8005c68 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29c      	uxth	r4, r3
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d014      	beq.n	8005b5e <USB_ActivateEndpoint+0x4c6>
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	b29c      	uxth	r4, r3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <USB_ActivateEndpoint+0x570>)
 8005b58:	4323      	orrs	r3, r4
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29c      	uxth	r4, r3
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d014      	beq.n	8005ba0 <USB_ActivateEndpoint+0x508>
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	b29c      	uxth	r4, r3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	441a      	add	r2, r3
 8005b98:	4b1c      	ldr	r3, [pc, #112]	; (8005c0c <USB_ActivateEndpoint+0x574>)
 8005b9a:	4323      	orrs	r3, r4
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	b29c      	uxth	r4, r3
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <USB_ActivateEndpoint+0x570>)
 8005bc4:	4323      	orrs	r3, r4
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d020      	beq.n	8005c14 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be8:	b29c      	uxth	r4, r3
 8005bea:	f084 0320 	eor.w	r3, r4, #32
 8005bee:	b29c      	uxth	r4, r3
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <USB_ActivateEndpoint+0x578>)
 8005bfc:	4323      	orrs	r3, r4
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	8013      	strh	r3, [r2, #0]
 8005c02:	e01c      	b.n	8005c3e <USB_ActivateEndpoint+0x5a6>
 8005c04:	ffff8180 	.word	0xffff8180
 8005c08:	ffffc080 	.word	0xffffc080
 8005c0c:	ffff80c0 	.word	0xffff80c0
 8005c10:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2a:	b29c      	uxth	r4, r3
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <USB_ActivateEndpoint+0x5dc>)
 8005c38:	4323      	orrs	r3, r4
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	b29c      	uxth	r4, r3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <USB_ActivateEndpoint+0x5dc>)
 8005c62:	4323      	orrs	r3, r4
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc90      	pop	{r4, r7}
 8005c72:	4770      	bx	lr
 8005c74:	ffff8080 	.word	0xffff8080

08005c78 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c78:	b490      	push	{r4, r7}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	7b1b      	ldrb	r3, [r3, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d171      	bne.n	8005d6e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d036      	beq.n	8005d00 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29c      	uxth	r4, r3
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <USB_DeactivateEndpoint+0x5c>
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	b29c      	uxth	r4, r3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	4b6b      	ldr	r3, [pc, #428]	; (8005e7c <USB_DeactivateEndpoint+0x204>)
 8005cce:	4323      	orrs	r3, r4
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cea:	b29c      	uxth	r4, r3
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	4b62      	ldr	r3, [pc, #392]	; (8005e80 <USB_DeactivateEndpoint+0x208>)
 8005cf8:	4323      	orrs	r3, r4
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8013      	strh	r3, [r2, #0]
 8005cfe:	e144      	b.n	8005f8a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29c      	uxth	r4, r3
 8005d0e:	4623      	mov	r3, r4
 8005d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d014      	beq.n	8005d42 <USB_DeactivateEndpoint+0xca>
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	b29c      	uxth	r4, r3
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	441a      	add	r2, r3
 8005d3a:	4b52      	ldr	r3, [pc, #328]	; (8005e84 <USB_DeactivateEndpoint+0x20c>)
 8005d3c:	4323      	orrs	r3, r4
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	b29c      	uxth	r4, r3
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	4b46      	ldr	r3, [pc, #280]	; (8005e80 <USB_DeactivateEndpoint+0x208>)
 8005d66:	4323      	orrs	r3, r4
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	8013      	strh	r3, [r2, #0]
 8005d6c:	e10d      	b.n	8005f8a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 8088 	bne.w	8005e88 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29c      	uxth	r4, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d014      	beq.n	8005dba <USB_DeactivateEndpoint+0x142>
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	b29c      	uxth	r4, r3
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <USB_DeactivateEndpoint+0x20c>)
 8005db4:	4323      	orrs	r3, r4
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29c      	uxth	r4, r3
 8005dc8:	4623      	mov	r3, r4
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d014      	beq.n	8005dfc <USB_DeactivateEndpoint+0x184>
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	b29c      	uxth	r4, r3
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <USB_DeactivateEndpoint+0x204>)
 8005df6:	4323      	orrs	r3, r4
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	b29c      	uxth	r4, r3
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <USB_DeactivateEndpoint+0x204>)
 8005e20:	4323      	orrs	r3, r4
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3c:	b29c      	uxth	r4, r3
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <USB_DeactivateEndpoint+0x208>)
 8005e4a:	4323      	orrs	r3, r4
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	b29c      	uxth	r4, r3
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	441a      	add	r2, r3
 8005e72:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <USB_DeactivateEndpoint+0x208>)
 8005e74:	4323      	orrs	r3, r4
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]
 8005e7a:	e086      	b.n	8005f8a <USB_DeactivateEndpoint+0x312>
 8005e7c:	ffff80c0 	.word	0xffff80c0
 8005e80:	ffff8080 	.word	0xffff8080
 8005e84:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29c      	uxth	r4, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d014      	beq.n	8005eca <USB_DeactivateEndpoint+0x252>
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	b29c      	uxth	r4, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	4b35      	ldr	r3, [pc, #212]	; (8005f98 <USB_DeactivateEndpoint+0x320>)
 8005ec4:	4323      	orrs	r3, r4
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29c      	uxth	r4, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d014      	beq.n	8005f0c <USB_DeactivateEndpoint+0x294>
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	b29c      	uxth	r4, r3
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <USB_DeactivateEndpoint+0x324>)
 8005f06:	4323      	orrs	r3, r4
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	b29c      	uxth	r4, r3
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	; (8005f98 <USB_DeactivateEndpoint+0x320>)
 8005f30:	4323      	orrs	r3, r4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4c:	b29c      	uxth	r4, r3
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <USB_DeactivateEndpoint+0x328>)
 8005f5a:	4323      	orrs	r3, r4
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	b29c      	uxth	r4, r3
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	441a      	add	r2, r3
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <USB_DeactivateEndpoint+0x328>)
 8005f84:	4323      	orrs	r3, r4
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc90      	pop	{r4, r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	ffffc080 	.word	0xffffc080
 8005f9c:	ffff80c0 	.word	0xffff80c0
 8005fa0:	ffff8080 	.word	0xffff8080

08005fa4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa4:	b590      	push	{r4, r7, lr}
 8005fa6:	b08d      	sub	sp, #52	; 0x34
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	f040 8160 	bne.w	8006278 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d909      	bls.n	8005fd8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	619a      	str	r2, [r3, #24]
 8005fd6:	e005      	b.n	8005fe4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	7b1b      	ldrb	r3, [r3, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d119      	bne.n	8006020 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6959      	ldr	r1, [r3, #20]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	88da      	ldrh	r2, [r3, #6]
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fba8 	bl	800674e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ffe:	687c      	ldr	r4, [r7, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	441c      	add	r4, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	4423      	add	r3, r4
 8006012:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006016:	461c      	mov	r4, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	b29b      	uxth	r3, r3
 800601c:	8023      	strh	r3, [r4, #0]
 800601e:	e10f      	b.n	8006240 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d065      	beq.n	8006102 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006036:	687c      	ldr	r4, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d148      	bne.n	80060d2 <USB_EPStartXfer+0x12e>
 8006040:	687c      	ldr	r4, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006048:	b29b      	uxth	r3, r3
 800604a:	441c      	add	r4, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	4423      	add	r3, r4
 8006054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006058:	461c      	mov	r4, r3
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10e      	bne.n	800607e <USB_EPStartXfer+0xda>
 8006060:	8823      	ldrh	r3, [r4, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006068:	b29b      	uxth	r3, r3
 800606a:	8023      	strh	r3, [r4, #0]
 800606c:	8823      	ldrh	r3, [r4, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29b      	uxth	r3, r3
 800607a:	8023      	strh	r3, [r4, #0]
 800607c:	e03d      	b.n	80060fa <USB_EPStartXfer+0x156>
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b3e      	cmp	r3, #62	; 0x3e
 8006082:	d810      	bhi.n	80060a6 <USB_EPStartXfer+0x102>
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <USB_EPStartXfer+0xf6>
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	3301      	adds	r3, #1
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	b29b      	uxth	r3, r3
 800609e:	029b      	lsls	r3, r3, #10
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8023      	strh	r3, [r4, #0]
 80060a4:	e029      	b.n	80060fa <USB_EPStartXfer+0x156>
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <USB_EPStartXfer+0x118>
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	3b01      	subs	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8023      	strh	r3, [r4, #0]
 80060d0:	e013      	b.n	80060fa <USB_EPStartXfer+0x156>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10f      	bne.n	80060fa <USB_EPStartXfer+0x156>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	441c      	add	r4, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4423      	add	r3, r4
 80060ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	895b      	ldrh	r3, [r3, #10]
 80060fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006100:	e063      	b.n	80061ca <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d148      	bne.n	800619c <USB_EPStartXfer+0x1f8>
 800610a:	687c      	ldr	r4, [r7, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	441c      	add	r4, r3
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4423      	add	r3, r4
 800611e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006122:	461c      	mov	r4, r3
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10e      	bne.n	8006148 <USB_EPStartXfer+0x1a4>
 800612a:	8823      	ldrh	r3, [r4, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006132:	b29b      	uxth	r3, r3
 8006134:	8023      	strh	r3, [r4, #0]
 8006136:	8823      	ldrh	r3, [r4, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006142:	b29b      	uxth	r3, r3
 8006144:	8023      	strh	r3, [r4, #0]
 8006146:	e03d      	b.n	80061c4 <USB_EPStartXfer+0x220>
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	2b3e      	cmp	r3, #62	; 0x3e
 800614c:	d810      	bhi.n	8006170 <USB_EPStartXfer+0x1cc>
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <USB_EPStartXfer+0x1c0>
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	3301      	adds	r3, #1
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	b29b      	uxth	r3, r3
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	b29b      	uxth	r3, r3
 800616c:	8023      	strh	r3, [r4, #0]
 800616e:	e029      	b.n	80061c4 <USB_EPStartXfer+0x220>
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <USB_EPStartXfer+0x1e2>
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	3b01      	subs	r3, #1
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	b29b      	uxth	r3, r3
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006196:	b29b      	uxth	r3, r3
 8006198:	8023      	strh	r3, [r4, #0]
 800619a:	e013      	b.n	80061c4 <USB_EPStartXfer+0x220>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	785b      	ldrb	r3, [r3, #1]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10f      	bne.n	80061c4 <USB_EPStartXfer+0x220>
 80061a4:	687c      	ldr	r4, [r7, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	441c      	add	r4, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4423      	add	r3, r4
 80061b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061bc:	461c      	mov	r4, r3
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	891b      	ldrh	r3, [r3, #8]
 80061c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6959      	ldr	r1, [r3, #20]
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 faba 	bl	800674e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d115      	bne.n	800620e <USB_EPStartXfer+0x26a>
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f8:	b29c      	uxth	r4, r3
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	441a      	add	r2, r3
 8006204:	4b9a      	ldr	r3, [pc, #616]	; (8006470 <USB_EPStartXfer+0x4cc>)
 8006206:	4323      	orrs	r3, r4
 8006208:	b29b      	uxth	r3, r3
 800620a:	8013      	strh	r3, [r2, #0]
 800620c:	e018      	b.n	8006240 <USB_EPStartXfer+0x29c>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d114      	bne.n	8006240 <USB_EPStartXfer+0x29c>
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	b29c      	uxth	r4, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	4b8e      	ldr	r3, [pc, #568]	; (8006474 <USB_EPStartXfer+0x4d0>)
 800623a:	4323      	orrs	r3, r4
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006256:	b29c      	uxth	r4, r3
 8006258:	f084 0310 	eor.w	r3, r4, #16
 800625c:	b29c      	uxth	r4, r3
 800625e:	f084 0320 	eor.w	r3, r4, #32
 8006262:	b29c      	uxth	r4, r3
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	4b82      	ldr	r3, [pc, #520]	; (8006478 <USB_EPStartXfer+0x4d4>)
 8006270:	4323      	orrs	r3, r4
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
 8006276:	e146      	b.n	8006506 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	d909      	bls.n	8006298 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	619a      	str	r2, [r3, #24]
 8006296:	e005      	b.n	80062a4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	7b1b      	ldrb	r3, [r3, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d148      	bne.n	800633e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062ac:	687c      	ldr	r4, [r7, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	441c      	add	r4, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4423      	add	r3, r4
 80062c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062c4:	461c      	mov	r4, r3
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10e      	bne.n	80062ea <USB_EPStartXfer+0x346>
 80062cc:	8823      	ldrh	r3, [r4, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8023      	strh	r3, [r4, #0]
 80062d8:	8823      	ldrh	r3, [r4, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8023      	strh	r3, [r4, #0]
 80062e8:	e0f2      	b.n	80064d0 <USB_EPStartXfer+0x52c>
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	2b3e      	cmp	r3, #62	; 0x3e
 80062ee:	d810      	bhi.n	8006312 <USB_EPStartXfer+0x36e>
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <USB_EPStartXfer+0x362>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	b29b      	uxth	r3, r3
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	b29b      	uxth	r3, r3
 800630e:	8023      	strh	r3, [r4, #0]
 8006310:	e0de      	b.n	80064d0 <USB_EPStartXfer+0x52c>
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <USB_EPStartXfer+0x384>
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3b01      	subs	r3, #1
 8006326:	61fb      	str	r3, [r7, #28]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	b29b      	uxth	r3, r3
 800632c:	029b      	lsls	r3, r3, #10
 800632e:	b29b      	uxth	r3, r3
 8006330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006338:	b29b      	uxth	r3, r3
 800633a:	8023      	strh	r3, [r4, #0]
 800633c:	e0c8      	b.n	80064d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d148      	bne.n	80063d8 <USB_EPStartXfer+0x434>
 8006346:	687c      	ldr	r4, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	441c      	add	r4, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4423      	add	r3, r4
 800635a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800635e:	461c      	mov	r4, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10e      	bne.n	8006384 <USB_EPStartXfer+0x3e0>
 8006366:	8823      	ldrh	r3, [r4, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800636e:	b29b      	uxth	r3, r3
 8006370:	8023      	strh	r3, [r4, #0]
 8006372:	8823      	ldrh	r3, [r4, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637e:	b29b      	uxth	r3, r3
 8006380:	8023      	strh	r3, [r4, #0]
 8006382:	e03d      	b.n	8006400 <USB_EPStartXfer+0x45c>
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	2b3e      	cmp	r3, #62	; 0x3e
 8006388:	d810      	bhi.n	80063ac <USB_EPStartXfer+0x408>
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <USB_EPStartXfer+0x3fc>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	3301      	adds	r3, #1
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8023      	strh	r3, [r4, #0]
 80063aa:	e029      	b.n	8006400 <USB_EPStartXfer+0x45c>
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <USB_EPStartXfer+0x41e>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	3b01      	subs	r3, #1
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	029b      	lsls	r3, r3, #10
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8023      	strh	r3, [r4, #0]
 80063d6:	e013      	b.n	8006400 <USB_EPStartXfer+0x45c>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d10f      	bne.n	8006400 <USB_EPStartXfer+0x45c>
 80063e0:	687c      	ldr	r4, [r7, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	441c      	add	r4, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4423      	add	r3, r4
 80063f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f8:	461c      	mov	r4, r3
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	8023      	strh	r3, [r4, #0]
 8006400:	687c      	ldr	r4, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	785b      	ldrb	r3, [r3, #1]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d14e      	bne.n	80064a8 <USB_EPStartXfer+0x504>
 800640a:	687c      	ldr	r4, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	441c      	add	r4, r3
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4423      	add	r3, r4
 800641e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006422:	461c      	mov	r4, r3
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10e      	bne.n	8006448 <USB_EPStartXfer+0x4a4>
 800642a:	8823      	ldrh	r3, [r4, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006432:	b29b      	uxth	r3, r3
 8006434:	8023      	strh	r3, [r4, #0]
 8006436:	8823      	ldrh	r3, [r4, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006442:	b29b      	uxth	r3, r3
 8006444:	8023      	strh	r3, [r4, #0]
 8006446:	e043      	b.n	80064d0 <USB_EPStartXfer+0x52c>
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	2b3e      	cmp	r3, #62	; 0x3e
 800644c:	d816      	bhi.n	800647c <USB_EPStartXfer+0x4d8>
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <USB_EPStartXfer+0x4c0>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29b      	uxth	r3, r3
 800646c:	8023      	strh	r3, [r4, #0]
 800646e:	e02f      	b.n	80064d0 <USB_EPStartXfer+0x52c>
 8006470:	ffff80c0 	.word	0xffff80c0
 8006474:	ffffc080 	.word	0xffffc080
 8006478:	ffff8080 	.word	0xffff8080
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <USB_EPStartXfer+0x4ee>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3b01      	subs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	b29b      	uxth	r3, r3
 8006496:	029b      	lsls	r3, r3, #10
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	8023      	strh	r3, [r4, #0]
 80064a6:	e013      	b.n	80064d0 <USB_EPStartXfer+0x52c>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10f      	bne.n	80064d0 <USB_EPStartXfer+0x52c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	441c      	add	r4, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4423      	add	r3, r4
 80064c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	b29c      	uxth	r4, r3
 80064e8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80064ec:	b29c      	uxth	r4, r3
 80064ee:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80064f2:	b29c      	uxth	r4, r3
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	4b04      	ldr	r3, [pc, #16]	; (8006510 <USB_EPStartXfer+0x56c>)
 8006500:	4323      	orrs	r3, r4
 8006502:	b29b      	uxth	r3, r3
 8006504:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3734      	adds	r7, #52	; 0x34
 800650c:	46bd      	mov	sp, r7
 800650e:	bd90      	pop	{r4, r7, pc}
 8006510:	ffff8080 	.word	0xffff8080

08006514 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006514:	b490      	push	{r4, r7}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	785b      	ldrb	r3, [r3, #1]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d018      	beq.n	8006558 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	b29c      	uxth	r4, r3
 800653e:	f084 0310 	eor.w	r3, r4, #16
 8006542:	b29c      	uxth	r4, r3
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	4b11      	ldr	r3, [pc, #68]	; (8006594 <USB_EPSetStall+0x80>)
 8006550:	4323      	orrs	r3, r4
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]
 8006556:	e017      	b.n	8006588 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	b29c      	uxth	r4, r3
 8006570:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006574:	b29c      	uxth	r4, r3
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	441a      	add	r2, r3
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <USB_EPSetStall+0x80>)
 8006582:	4323      	orrs	r3, r4
 8006584:	b29b      	uxth	r3, r3
 8006586:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bc90      	pop	{r4, r7}
 8006592:	4770      	bx	lr
 8006594:	ffff8080 	.word	0xffff8080

08006598 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006598:	b490      	push	{r4, r7}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	7b1b      	ldrb	r3, [r3, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d17d      	bne.n	80066a6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	785b      	ldrb	r3, [r3, #1]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d03d      	beq.n	800662e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29c      	uxth	r4, r3
 80065c0:	4623      	mov	r3, r4
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d014      	beq.n	80065f4 <USB_EPClearStall+0x5c>
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e0:	b29c      	uxth	r4, r3
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <USB_EPClearStall+0x11c>)
 80065ee:	4323      	orrs	r3, r4
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	78db      	ldrb	r3, [r3, #3]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d054      	beq.n	80066a6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006612:	b29c      	uxth	r4, r3
 8006614:	f084 0320 	eor.w	r3, r4, #32
 8006618:	b29c      	uxth	r4, r3
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	4b24      	ldr	r3, [pc, #144]	; (80066b8 <USB_EPClearStall+0x120>)
 8006626:	4323      	orrs	r3, r4
 8006628:	b29b      	uxth	r3, r3
 800662a:	8013      	strh	r3, [r2, #0]
 800662c:	e03b      	b.n	80066a6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29c      	uxth	r4, r3
 800663c:	4623      	mov	r3, r4
 800663e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d014      	beq.n	8006670 <USB_EPClearStall+0xd8>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665c:	b29c      	uxth	r4, r3
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	4b14      	ldr	r3, [pc, #80]	; (80066bc <USB_EPClearStall+0x124>)
 800666a:	4323      	orrs	r3, r4
 800666c:	b29b      	uxth	r3, r3
 800666e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	b29c      	uxth	r4, r3
 8006688:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800668c:	b29c      	uxth	r4, r3
 800668e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006692:	b29c      	uxth	r4, r3
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <USB_EPClearStall+0x120>)
 80066a0:	4323      	orrs	r3, r4
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc90      	pop	{r4, r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	ffff80c0 	.word	0xffff80c0
 80066b8:	ffff8080 	.word	0xffff8080
 80066bc:	ffffc080 	.word	0xffffc080

080066c0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2280      	movs	r2, #128	; 0x80
 80066d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006724:	b29b      	uxth	r3, r3
 8006726:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800674e:	b480      	push	{r7}
 8006750:	b08d      	sub	sp, #52	; 0x34
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	4611      	mov	r1, r2
 800675a:	461a      	mov	r2, r3
 800675c:	460b      	mov	r3, r1
 800675e:	80fb      	strh	r3, [r7, #6]
 8006760:	4613      	mov	r3, r2
 8006762:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006764:	88bb      	ldrh	r3, [r7, #4]
 8006766:	3301      	adds	r3, #1
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006784:	e01b      	b.n	80067be <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	3301      	adds	r3, #1
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	3302      	adds	r3, #2
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	3301      	adds	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	3b01      	subs	r3, #1
 80067bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e0      	bne.n	8006786 <USB_WritePMA+0x38>
  }
}
 80067c4:	bf00      	nop
 80067c6:	3734      	adds	r7, #52	; 0x34
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b08b      	sub	sp, #44	; 0x2c
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4611      	mov	r1, r2
 80067dc:	461a      	mov	r2, r3
 80067de:	460b      	mov	r3, r1
 80067e0:	80fb      	strh	r3, [r7, #6]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067e6:	88bb      	ldrh	r3, [r7, #4]
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067f6:	88fa      	ldrh	r2, [r7, #6]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006800:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
 8006806:	e018      	b.n	800683a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	3302      	adds	r3, #2
 8006814:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	3301      	adds	r3, #1
 8006822:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	b2da      	uxtb	r2, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3301      	adds	r3, #1
 8006832:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	3b01      	subs	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e3      	bne.n	8006808 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006840:	88bb      	ldrh	r3, [r7, #4]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29b      	uxth	r3, r3
 8006852:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	701a      	strb	r2, [r3, #0]
  }
}
 800685c:	bf00      	nop
 800685e:	372c      	adds	r7, #44	; 0x2c
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7c1b      	ldrb	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d115      	bne.n	80068ac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006884:	2202      	movs	r2, #2
 8006886:	2181      	movs	r1, #129	; 0x81
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f002 ffec 	bl	8009866 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006898:	2202      	movs	r2, #2
 800689a:	2101      	movs	r1, #1
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 ffe2 	bl	8009866 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80068aa:	e012      	b.n	80068d2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	2202      	movs	r2, #2
 80068b0:	2181      	movs	r1, #129	; 0x81
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f002 ffd7 	bl	8009866 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068be:	2340      	movs	r3, #64	; 0x40
 80068c0:	2202      	movs	r2, #2
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 ffce 	bl	8009866 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068d2:	2308      	movs	r3, #8
 80068d4:	2203      	movs	r2, #3
 80068d6:	2182      	movs	r1, #130	; 0x82
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f002 ffc4 	bl	8009866 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068e8:	f003 f914 	bl	8009b14 <USBD_static_malloc>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
 8006902:	e026      	b.n	8006952 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f003 f87e 	bl	8009a3c <USBD_LL_PrepareReceive>
 8006940:	e007      	b.n	8006952 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	2101      	movs	r1, #1
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f003 f875 	bl	8009a3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800696c:	2181      	movs	r1, #129	; 0x81
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f002 ff9f 	bl	80098b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800697a:	2101      	movs	r1, #1
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 ff98 	bl	80098b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800698a:	2182      	movs	r1, #130	; 0x82
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f002 ff90 	bl	80098b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00e      	beq.n	80069c0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b2:	4618      	mov	r0, r3
 80069b4:	f003 f8bc 	bl	8009b30 <USBD_static_free>
    pdev->pClassData = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d039      	beq.n	8006a68 <USBD_CDC_Setup+0x9e>
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d17c      	bne.n	8006af2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	88db      	ldrh	r3, [r3, #6]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d029      	beq.n	8006a54 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b25b      	sxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da11      	bge.n	8006a2e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	88d2      	ldrh	r2, [r2, #6]
 8006a1c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a1e:	6939      	ldr	r1, [r7, #16]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	88db      	ldrh	r3, [r3, #6]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 f9fa 	bl	8007e20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a2c:	e068      	b.n	8006b00 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785a      	ldrb	r2, [r3, #1]
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	88db      	ldrh	r3, [r3, #6]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a44:	6939      	ldr	r1, [r7, #16]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	88db      	ldrh	r3, [r3, #6]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fa15 	bl	8007e7c <USBD_CtlPrepareRx>
      break;
 8006a52:	e055      	b.n	8006b00 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	7850      	ldrb	r0, [r2, #1]
 8006a60:	2200      	movs	r2, #0
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	4798      	blx	r3
      break;
 8006a66:	e04b      	b.n	8006b00 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	d017      	beq.n	8006aa0 <USBD_CDC_Setup+0xd6>
 8006a70:	2b0b      	cmp	r3, #11
 8006a72:	d029      	beq.n	8006ac8 <USBD_CDC_Setup+0xfe>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d133      	bne.n	8006ae0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d107      	bne.n	8006a92 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	2202      	movs	r2, #2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 f9c8 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a90:	e02e      	b.n	8006af0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f958 	bl	8007d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a9e:	e027      	b.n	8006af0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d107      	bne.n	8006aba <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006aaa:	f107 030f 	add.w	r3, r7, #15
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 f9b4 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab8:	e01a      	b.n	8006af0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f944 	bl	8007d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac6:	e013      	b.n	8006af0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d00d      	beq.n	8006aee <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f938 	bl	8007d4a <USBD_CtlError>
            ret = USBD_FAIL;
 8006ada:	2302      	movs	r3, #2
 8006adc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ade:	e006      	b.n	8006aee <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f001 f931 	bl	8007d4a <USBD_CtlError>
          ret = USBD_FAIL;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	75fb      	strb	r3, [r7, #23]
          break;
 8006aec:	e000      	b.n	8006af0 <USBD_CDC_Setup+0x126>
          break;
 8006aee:	bf00      	nop
      }
      break;
 8006af0:	e006      	b.n	8006b00 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f928 	bl	8007d4a <USBD_CtlError>
      ret = USBD_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	75fb      	strb	r3, [r7, #23]
      break;
 8006afe:	bf00      	nop
  }

  return ret;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d037      	beq.n	8006ba0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	331c      	adds	r3, #28
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d026      	beq.n	8006b94 <USBD_CDC_DataIn+0x8a>
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	331c      	adds	r3, #28
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	0152      	lsls	r2, r2, #5
 8006b5e:	440a      	add	r2, r1
 8006b60:	3238      	adds	r2, #56	; 0x38
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b68:	fb02 f201 	mul.w	r2, r2, r1
 8006b6c:	1a9b      	subs	r3, r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	331c      	adds	r3, #28
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b86:	78f9      	ldrb	r1, [r7, #3]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f002 ff32 	bl	80099f6 <USBD_LL_Transmit>
 8006b92:	e003      	b.n	8006b9c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006ba0:	2302      	movs	r3, #2
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 ff5d 	bl	8009a82 <USBD_LL_GetRxDataSize>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00d      	beq.n	8006bf6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4798      	blx	r3

    return USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e000      	b.n	8006bf8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d015      	beq.n	8006c46 <USBD_CDC_EP0_RxReady+0x46>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c20:	2bff      	cmp	r3, #255	; 0xff
 8006c22:	d010      	beq.n	8006c46 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	22ff      	movs	r2, #255	; 0xff
 8006c42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2243      	movs	r2, #67	; 0x43
 8006c5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c5e:	4b03      	ldr	r3, [pc, #12]	; (8006c6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000094 	.word	0x20000094

08006c70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2243      	movs	r2, #67	; 0x43
 8006c7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c7e:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	20000050 	.word	0x20000050

08006c90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2243      	movs	r2, #67	; 0x43
 8006c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c9e:	4b03      	ldr	r3, [pc, #12]	; (8006cac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	200000d8 	.word	0x200000d8

08006cb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	220a      	movs	r2, #10
 8006cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006cbe:	4b03      	ldr	r3, [pc, #12]	; (8006ccc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	2000000c 	.word	0x2000000c

08006cd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006cda:	2302      	movs	r3, #2
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b087      	sub	sp, #28
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d12:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d1c:	88fa      	ldrh	r2, [r7, #6]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d42:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d017      	beq.n	8006da4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7c1b      	ldrb	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d109      	bne.n	8006d90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d86:	2101      	movs	r1, #1
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f002 fe57 	bl	8009a3c <USBD_LL_PrepareReceive>
 8006d8e:	e007      	b.n	8006da0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f002 fe4e 	bl	8009a3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	4613      	mov	r3, r2
 8006dba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e01a      	b.n	8006dfc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	79fa      	ldrb	r2, [r7, #7]
 8006df2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f002 fcbb 	bl	8009770 <USBD_LL_Init>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
 8006e24:	e001      	b.n	8006e2a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f002 fcf5 	bl	8009830 <USBD_LL_Start>

  return USBD_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
 8006e74:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00c      	beq.n	8006e9a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	4611      	mov	r1, r2
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3

  return USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fef7 	bl	8007cd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d00c      	beq.n	8006f20 <USBD_LL_SetupStage+0x56>
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d302      	bcc.n	8006f10 <USBD_LL_SetupStage+0x46>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d010      	beq.n	8006f30 <USBD_LL_SetupStage+0x66>
 8006f0e:	e017      	b.n	8006f40 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9cd 	bl	80072b8 <USBD_StdDevReq>
      break;
 8006f1e:	e01a      	b.n	8006f56 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fa2f 	bl	800738c <USBD_StdItfReq>
      break;
 8006f2e:	e012      	b.n	8006f56 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa6d 	bl	8007418 <USBD_StdEPReq>
      break;
 8006f3e:	e00a      	b.n	8006f56 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fcce 	bl	80098f0 <USBD_LL_StallEP>
      break;
 8006f54:	bf00      	nop
  }

  return USBD_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d14b      	bne.n	800700c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d134      	bne.n	8006ff0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d919      	bls.n	8006fc6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d203      	bcs.n	8006fb4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	e002      	b.n	8006fba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 ff7a 	bl	8007eb8 <USBD_CtlContinueRx>
 8006fc4:	e038      	b.n	8007038 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d105      	bne.n	8006fe8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 ff77 	bl	8007edc <USBD_CtlSendStatus>
 8006fee:	e023      	b.n	8007038 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ff6:	2b05      	cmp	r3, #5
 8006ff8:	d11e      	bne.n	8007038 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007002:	2100      	movs	r1, #0
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f002 fc73 	bl	80098f0 <USBD_LL_StallEP>
 800700a:	e015      	b.n	8007038 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800701e:	2b03      	cmp	r3, #3
 8007020:	d108      	bne.n	8007034 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	7afa      	ldrb	r2, [r7, #11]
 800702c:	4611      	mov	r1, r2
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	4798      	blx	r3
 8007032:	e001      	b.n	8007038 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007034:	2302      	movs	r3, #2
 8007036:	e000      	b.n	800703a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	460b      	mov	r3, r1
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d17f      	bne.n	8007156 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3314      	adds	r3, #20
 800705a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007062:	2b02      	cmp	r3, #2
 8007064:	d15c      	bne.n	8007120 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	429a      	cmp	r2, r3
 8007070:	d915      	bls.n	800709e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	b29b      	uxth	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fee4 	bl	8007e58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007090:	2300      	movs	r3, #0
 8007092:	2200      	movs	r2, #0
 8007094:	2100      	movs	r1, #0
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f002 fcd0 	bl	8009a3c <USBD_LL_PrepareReceive>
 800709c:	e04e      	b.n	800713c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	6912      	ldr	r2, [r2, #16]
 80070a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070aa:	fb02 f201 	mul.w	r2, r2, r1
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11c      	bne.n	80070ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070bc:	429a      	cmp	r2, r3
 80070be:	d316      	bcc.n	80070ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d20f      	bcs.n	80070ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 fec0 	bl	8007e58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f002 fca8 	bl	8009a3c <USBD_LL_PrepareReceive>
 80070ec:	e026      	b.n	800713c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00a      	beq.n	8007110 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007100:	2b03      	cmp	r3, #3
 8007102:	d105      	bne.n	8007110 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007110:	2180      	movs	r1, #128	; 0x80
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f002 fbec 	bl	80098f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fef2 	bl	8007f02 <USBD_CtlReceiveStatus>
 800711e:	e00d      	b.n	800713c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007126:	2b04      	cmp	r3, #4
 8007128:	d004      	beq.n	8007134 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f002 fbda 	bl	80098f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d11d      	bne.n	8007182 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fe82 	bl	8006e50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007154:	e015      	b.n	8007182 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007168:	2b03      	cmp	r3, #3
 800716a:	d108      	bne.n	800717e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	7afa      	ldrb	r2, [r7, #11]
 8007176:	4611      	mov	r1, r2
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	4798      	blx	r3
 800717c:	e001      	b.n	8007182 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800717e:	2302      	movs	r3, #2
 8007180:	e000      	b.n	8007184 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	2200      	movs	r2, #0
 8007198:	2100      	movs	r1, #0
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f002 fb63 	bl	8009866 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f002 fb55 	bl	8009866 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d009      	beq.n	8007204 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	4611      	mov	r1, r2
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
  }

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007266:	2b04      	cmp	r3, #4
 8007268:	d105      	bne.n	8007276 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007292:	2b03      	cmp	r3, #3
 8007294:	d10b      	bne.n	80072ae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	d004      	beq.n	80072dc <USBD_StdDevReq+0x24>
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d002      	beq.n	80072dc <USBD_StdDevReq+0x24>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <USBD_StdDevReq+0x34>
 80072da:	e04c      	b.n	8007376 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
      break;
 80072ea:	e049      	b.n	8007380 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d83a      	bhi.n	800736a <USBD_StdDevReq+0xb2>
 80072f4:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <USBD_StdDevReq+0x44>)
 80072f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fa:	bf00      	nop
 80072fc:	0800734d 	.word	0x0800734d
 8007300:	08007361 	.word	0x08007361
 8007304:	0800736b 	.word	0x0800736b
 8007308:	08007357 	.word	0x08007357
 800730c:	0800736b 	.word	0x0800736b
 8007310:	0800732f 	.word	0x0800732f
 8007314:	08007325 	.word	0x08007325
 8007318:	0800736b 	.word	0x0800736b
 800731c:	08007343 	.word	0x08007343
 8007320:	08007339 	.word	0x08007339
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9d4 	bl	80076d4 <USBD_GetDescriptor>
          break;
 800732c:	e022      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb61 	bl	80079f8 <USBD_SetAddress>
          break;
 8007336:	e01d      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fb9e 	bl	8007a7c <USBD_SetConfig>
          break;
 8007340:	e018      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fc27 	bl	8007b98 <USBD_GetConfig>
          break;
 800734a:	e013      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fc56 	bl	8007c00 <USBD_GetStatus>
          break;
 8007354:	e00e      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fc84 	bl	8007c66 <USBD_SetFeature>
          break;
 800735e:	e009      	b.n	8007374 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fc93 	bl	8007c8e <USBD_ClrFeature>
          break;
 8007368:	e004      	b.n	8007374 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fcec 	bl	8007d4a <USBD_CtlError>
          break;
 8007372:	bf00      	nop
      }
      break;
 8007374:	e004      	b.n	8007380 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fce6 	bl	8007d4a <USBD_CtlError>
      break;
 800737e:	bf00      	nop
  }

  return ret;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop

0800738c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d003      	beq.n	80073ae <USBD_StdItfReq+0x22>
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d001      	beq.n	80073ae <USBD_StdItfReq+0x22>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d12a      	bne.n	8007404 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b4:	3b01      	subs	r3, #1
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d81d      	bhi.n	80073f6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	889b      	ldrh	r3, [r3, #4]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d813      	bhi.n	80073ec <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	88db      	ldrh	r3, [r3, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <USBD_StdItfReq+0x74>
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10d      	bne.n	8007400 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fd79 	bl	8007edc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073ea:	e009      	b.n	8007400 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fcab 	bl	8007d4a <USBD_CtlError>
          break;
 80073f4:	e004      	b.n	8007400 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fca6 	bl	8007d4a <USBD_CtlError>
          break;
 80073fe:	e000      	b.n	8007402 <USBD_StdItfReq+0x76>
          break;
 8007400:	bf00      	nop
      }
      break;
 8007402:	e004      	b.n	800740e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc9f 	bl	8007d4a <USBD_CtlError>
      break;
 800740c:	bf00      	nop
  }

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	889b      	ldrh	r3, [r3, #4]
 800742a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007434:	2b20      	cmp	r3, #32
 8007436:	d004      	beq.n	8007442 <USBD_StdEPReq+0x2a>
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d002      	beq.n	8007442 <USBD_StdEPReq+0x2a>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d008      	beq.n	8007452 <USBD_StdEPReq+0x3a>
 8007440:	e13d      	b.n	80076be <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3
      break;
 8007450:	e13a      	b.n	80076c8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800745a:	2b20      	cmp	r3, #32
 800745c:	d10a      	bne.n	8007474 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	e12a      	b.n	80076ca <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d03e      	beq.n	80074fa <USBD_StdEPReq+0xe2>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d002      	beq.n	8007486 <USBD_StdEPReq+0x6e>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d070      	beq.n	8007566 <USBD_StdEPReq+0x14e>
 8007484:	e115      	b.n	80076b2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748c:	2b02      	cmp	r3, #2
 800748e:	d002      	beq.n	8007496 <USBD_StdEPReq+0x7e>
 8007490:	2b03      	cmp	r3, #3
 8007492:	d015      	beq.n	80074c0 <USBD_StdEPReq+0xa8>
 8007494:	e02b      	b.n	80074ee <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <USBD_StdEPReq+0x9e>
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b80      	cmp	r3, #128	; 0x80
 80074a0:	d009      	beq.n	80074b6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f002 fa22 	bl	80098f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074ac:	2180      	movs	r1, #128	; 0x80
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 fa1e 	bl	80098f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074b4:	e020      	b.n	80074f8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fc46 	bl	8007d4a <USBD_CtlError>
              break;
 80074be:	e01b      	b.n	80074f8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	885b      	ldrh	r3, [r3, #2]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10e      	bne.n	80074e6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <USBD_StdEPReq+0xce>
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d008      	beq.n	80074e6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	88db      	ldrh	r3, [r3, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f002 fa05 	bl	80098f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fcf8 	bl	8007edc <USBD_CtlSendStatus>

              break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fc2a 	bl	8007d4a <USBD_CtlError>
              break;
 80074f6:	bf00      	nop
          }
          break;
 80074f8:	e0e0      	b.n	80076bc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	2b02      	cmp	r3, #2
 8007502:	d002      	beq.n	800750a <USBD_StdEPReq+0xf2>
 8007504:	2b03      	cmp	r3, #3
 8007506:	d015      	beq.n	8007534 <USBD_StdEPReq+0x11c>
 8007508:	e026      	b.n	8007558 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <USBD_StdEPReq+0x112>
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d009      	beq.n	800752a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f002 f9e8 	bl	80098f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f002 f9e4 	bl	80098f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007528:	e01c      	b.n	8007564 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fc0c 	bl	8007d4a <USBD_CtlError>
              break;
 8007532:	e017      	b.n	8007564 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	885b      	ldrh	r3, [r3, #2]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d112      	bne.n	8007562 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f002 f9ef 	bl	800992e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fcc3 	bl	8007edc <USBD_CtlSendStatus>
              }
              break;
 8007556:	e004      	b.n	8007562 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fbf5 	bl	8007d4a <USBD_CtlError>
              break;
 8007560:	e000      	b.n	8007564 <USBD_StdEPReq+0x14c>
              break;
 8007562:	bf00      	nop
          }
          break;
 8007564:	e0aa      	b.n	80076bc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	2b02      	cmp	r3, #2
 800756e:	d002      	beq.n	8007576 <USBD_StdEPReq+0x15e>
 8007570:	2b03      	cmp	r3, #3
 8007572:	d032      	beq.n	80075da <USBD_StdEPReq+0x1c2>
 8007574:	e097      	b.n	80076a6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <USBD_StdEPReq+0x174>
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b80      	cmp	r3, #128	; 0x80
 8007580:	d004      	beq.n	800758c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fbe0 	bl	8007d4a <USBD_CtlError>
                break;
 800758a:	e091      	b.n	80076b0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800758c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	da0b      	bge.n	80075ac <USBD_StdEPReq+0x194>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	3310      	adds	r3, #16
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	3304      	adds	r3, #4
 80075aa:	e00b      	b.n	80075c4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	4413      	add	r3, r2
 80075c2:	3304      	adds	r3, #4
 80075c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2202      	movs	r2, #2
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc24 	bl	8007e20 <USBD_CtlSendData>
              break;
 80075d8:	e06a      	b.n	80076b0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da11      	bge.n	8007606 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3318      	adds	r3, #24
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d117      	bne.n	800762c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fba3 	bl	8007d4a <USBD_CtlError>
                  break;
 8007604:	e054      	b.n	80076b0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007606:	7bbb      	ldrb	r3, [r7, #14]
 8007608:	f003 020f 	and.w	r2, r3, #15
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	440b      	add	r3, r1
 8007618:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb90 	bl	8007d4a <USBD_CtlError>
                  break;
 800762a:	e041      	b.n	80076b0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800762c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da0b      	bge.n	800764c <USBD_StdEPReq+0x234>
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	3310      	adds	r3, #16
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	3304      	adds	r3, #4
 800764a:	e00b      	b.n	8007664 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	3304      	adds	r3, #4
 8007664:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <USBD_StdEPReq+0x25a>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d103      	bne.n	800767a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e00e      	b.n	8007698 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f002 f974 	bl	800996c <USBD_LL_IsStallEP>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2201      	movs	r2, #1
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e002      	b.n	8007698 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2202      	movs	r2, #2
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fbbe 	bl	8007e20 <USBD_CtlSendData>
              break;
 80076a4:	e004      	b.n	80076b0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb4e 	bl	8007d4a <USBD_CtlError>
              break;
 80076ae:	bf00      	nop
          }
          break;
 80076b0:	e004      	b.n	80076bc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fb48 	bl	8007d4a <USBD_CtlError>
          break;
 80076ba:	bf00      	nop
      }
      break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb42 	bl	8007d4a <USBD_CtlError>
      break;
 80076c6:	bf00      	nop
  }

  return ret;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
	...

080076d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	885b      	ldrh	r3, [r3, #2]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	2b0e      	cmp	r3, #14
 80076f6:	f200 8152 	bhi.w	800799e <USBD_GetDescriptor+0x2ca>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <USBD_GetDescriptor+0x2c>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007771 	.word	0x08007771
 8007704:	08007789 	.word	0x08007789
 8007708:	080077c9 	.word	0x080077c9
 800770c:	0800799f 	.word	0x0800799f
 8007710:	0800799f 	.word	0x0800799f
 8007714:	0800793f 	.word	0x0800793f
 8007718:	0800796b 	.word	0x0800796b
 800771c:	0800799f 	.word	0x0800799f
 8007720:	0800799f 	.word	0x0800799f
 8007724:	0800799f 	.word	0x0800799f
 8007728:	0800799f 	.word	0x0800799f
 800772c:	0800799f 	.word	0x0800799f
 8007730:	0800799f 	.word	0x0800799f
 8007734:	0800799f 	.word	0x0800799f
 8007738:	0800773d 	.word	0x0800773d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800775e:	e126      	b.n	80079ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 faf1 	bl	8007d4a <USBD_CtlError>
        err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
      break;
 800776e:	e11e      	b.n	80079ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
      break;
 8007786:	e112      	b.n	80079ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7c1b      	ldrb	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f107 0208 	add.w	r2, r7, #8
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	2202      	movs	r2, #2
 80077a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077aa:	e100      	b.n	80079ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	f107 0208 	add.w	r2, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	2202      	movs	r2, #2
 80077c4:	701a      	strb	r2, [r3, #0]
      break;
 80077c6:	e0f2      	b.n	80079ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	f200 80ac 	bhi.w	800792c <USBD_GetDescriptor+0x258>
 80077d4:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <USBD_GetDescriptor+0x108>)
 80077d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077da:	bf00      	nop
 80077dc:	080077f5 	.word	0x080077f5
 80077e0:	08007829 	.word	0x08007829
 80077e4:	0800785d 	.word	0x0800785d
 80077e8:	08007891 	.word	0x08007891
 80077ec:	080078c5 	.word	0x080078c5
 80077f0:	080078f9 	.word	0x080078f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	7c12      	ldrb	r2, [r2, #16]
 800780c:	f107 0108 	add.w	r1, r7, #8
 8007810:	4610      	mov	r0, r2
 8007812:	4798      	blx	r3
 8007814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007816:	e091      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fa95 	bl	8007d4a <USBD_CtlError>
            err++;
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	3301      	adds	r3, #1
 8007824:	72fb      	strb	r3, [r7, #11]
          break;
 8007826:	e089      	b.n	800793c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7c12      	ldrb	r2, [r2, #16]
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784a:	e077      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa7b 	bl	8007d4a <USBD_CtlError>
            err++;
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	3301      	adds	r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
          break;
 800785a:	e06f      	b.n	800793c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7c12      	ldrb	r2, [r2, #16]
 8007874:	f107 0108 	add.w	r1, r7, #8
 8007878:	4610      	mov	r0, r2
 800787a:	4798      	blx	r3
 800787c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787e:	e05d      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa61 	bl	8007d4a <USBD_CtlError>
            err++;
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	3301      	adds	r3, #1
 800788c:	72fb      	strb	r3, [r7, #11]
          break;
 800788e:	e055      	b.n	800793c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	7c12      	ldrb	r2, [r2, #16]
 80078a8:	f107 0108 	add.w	r1, r7, #8
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
 80078b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078b2:	e043      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa47 	bl	8007d4a <USBD_CtlError>
            err++;
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	3301      	adds	r3, #1
 80078c0:	72fb      	strb	r3, [r7, #11]
          break;
 80078c2:	e03b      	b.n	800793c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	7c12      	ldrb	r2, [r2, #16]
 80078dc:	f107 0108 	add.w	r1, r7, #8
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e6:	e029      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa2d 	bl	8007d4a <USBD_CtlError>
            err++;
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	3301      	adds	r3, #1
 80078f4:	72fb      	strb	r3, [r7, #11]
          break;
 80078f6:	e021      	b.n	800793c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	7c12      	ldrb	r2, [r2, #16]
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800791a:	e00f      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa13 	bl	8007d4a <USBD_CtlError>
            err++;
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	3301      	adds	r3, #1
 8007928:	72fb      	strb	r3, [r7, #11]
          break;
 800792a:	e007      	b.n	800793c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa0b 	bl	8007d4a <USBD_CtlError>
          err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800793a:	e038      	b.n	80079ae <USBD_GetDescriptor+0x2da>
 800793c:	e037      	b.n	80079ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	7c1b      	ldrb	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	4610      	mov	r0, r2
 8007954:	4798      	blx	r3
 8007956:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007958:	e029      	b.n	80079ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f9f4 	bl	8007d4a <USBD_CtlError>
        err++;
 8007962:	7afb      	ldrb	r3, [r7, #11]
 8007964:	3301      	adds	r3, #1
 8007966:	72fb      	strb	r3, [r7, #11]
      break;
 8007968:	e021      	b.n	80079ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7c1b      	ldrb	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10d      	bne.n	800798e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f107 0208 	add.w	r2, r7, #8
 800797e:	4610      	mov	r0, r2
 8007980:	4798      	blx	r3
 8007982:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3301      	adds	r3, #1
 8007988:	2207      	movs	r2, #7
 800798a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800798c:	e00f      	b.n	80079ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9da 	bl	8007d4a <USBD_CtlError>
        err++;
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	3301      	adds	r3, #1
 800799a:	72fb      	strb	r3, [r7, #11]
      break;
 800799c:	e007      	b.n	80079ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9d2 	bl	8007d4a <USBD_CtlError>
      err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	bf00      	nop
  }

  if (err != 0U)
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11c      	bne.n	80079ee <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80079b4:	893b      	ldrh	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d011      	beq.n	80079de <USBD_GetDescriptor+0x30a>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00d      	beq.n	80079de <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	88da      	ldrh	r2, [r3, #6]
 80079c6:	893b      	ldrh	r3, [r7, #8]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf28      	it	cs
 80079cc:	4613      	movcs	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079d2:	893b      	ldrh	r3, [r7, #8]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa21 	bl	8007e20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa78 	bl	8007edc <USBD_CtlSendStatus>
 80079ec:	e000      	b.n	80079f0 <USBD_GetDescriptor+0x31c>
    return;
 80079ee:	bf00      	nop
    }
  }
}
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop

080079f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	889b      	ldrh	r3, [r3, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d130      	bne.n	8007a6c <USBD_SetAddress+0x74>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88db      	ldrh	r3, [r3, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d12c      	bne.n	8007a6c <USBD_SetAddress+0x74>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	885b      	ldrh	r3, [r3, #2]
 8007a16:	2b7f      	cmp	r3, #127	; 0x7f
 8007a18:	d828      	bhi.n	8007a6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d104      	bne.n	8007a3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f989 	bl	8007d4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a38:	e01c      	b.n	8007a74 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	7bfa      	ldrb	r2, [r7, #15]
 8007a3e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 ffb6 	bl	80099b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa45 	bl	8007edc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a60:	e008      	b.n	8007a74 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	e003      	b.n	8007a74 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f96b 	bl	8007d4a <USBD_CtlError>
  }
}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	885b      	ldrh	r3, [r3, #2]
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	4b41      	ldr	r3, [pc, #260]	; (8007b94 <USBD_SetConfig+0x118>)
 8007a8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a90:	4b40      	ldr	r3, [pc, #256]	; (8007b94 <USBD_SetConfig+0x118>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d904      	bls.n	8007aa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f955 	bl	8007d4a <USBD_CtlError>
 8007aa0:	e075      	b.n	8007b8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d002      	beq.n	8007ab2 <USBD_SetConfig+0x36>
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d023      	beq.n	8007af8 <USBD_SetConfig+0x7c>
 8007ab0:	e062      	b.n	8007b78 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007ab2:	4b38      	ldr	r3, [pc, #224]	; (8007b94 <USBD_SetConfig+0x118>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01a      	beq.n	8007af0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007aba:	4b36      	ldr	r3, [pc, #216]	; (8007b94 <USBD_SetConfig+0x118>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007acc:	4b31      	ldr	r3, [pc, #196]	; (8007b94 <USBD_SetConfig+0x118>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff f9c7 	bl	8006e66 <USBD_SetClassConfig>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d104      	bne.n	8007ae8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f932 	bl	8007d4a <USBD_CtlError>
            return;
 8007ae6:	e052      	b.n	8007b8e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f9f7 	bl	8007edc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aee:	e04e      	b.n	8007b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9f3 	bl	8007edc <USBD_CtlSendStatus>
        break;
 8007af6:	e04a      	b.n	8007b8e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007af8:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <USBD_SetConfig+0x118>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d112      	bne.n	8007b26 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b08:	4b22      	ldr	r3, [pc, #136]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b12:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff f9c3 	bl	8006ea4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9dc 	bl	8007edc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b24:	e033      	b.n	8007b8e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d01d      	beq.n	8007b70 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff f9b1 	bl	8006ea4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b42:	4b14      	ldr	r3, [pc, #80]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b4c:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f987 	bl	8006e66 <USBD_SetClassConfig>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d104      	bne.n	8007b68 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f8f2 	bl	8007d4a <USBD_CtlError>
            return;
 8007b66:	e012      	b.n	8007b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9b7 	bl	8007edc <USBD_CtlSendStatus>
        break;
 8007b6e:	e00e      	b.n	8007b8e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9b3 	bl	8007edc <USBD_CtlSendStatus>
        break;
 8007b76:	e00a      	b.n	8007b8e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8e5 	bl	8007d4a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <USBD_SetConfig+0x118>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff f98c 	bl	8006ea4 <USBD_ClrClassConfig>
        break;
 8007b8c:	bf00      	nop
    }
  }
}
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	2000140e 	.word	0x2000140e

08007b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	88db      	ldrh	r3, [r3, #6]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d004      	beq.n	8007bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8cc 	bl	8007d4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bb2:	e021      	b.n	8007bf8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	db17      	blt.n	8007bee <USBD_GetConfig+0x56>
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	dd02      	ble.n	8007bc8 <USBD_GetConfig+0x30>
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d00b      	beq.n	8007bde <USBD_GetConfig+0x46>
 8007bc6:	e012      	b.n	8007bee <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f922 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007bdc:	e00c      	b.n	8007bf8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3304      	adds	r3, #4
 8007be2:	2201      	movs	r2, #1
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f91a 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007bec:	e004      	b.n	8007bf8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f8aa 	bl	8007d4a <USBD_CtlError>
        break;
 8007bf6:	bf00      	nop
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c10:	3b01      	subs	r3, #1
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d81e      	bhi.n	8007c54 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d004      	beq.n	8007c28 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f892 	bl	8007d4a <USBD_CtlError>
        break;
 8007c26:	e01a      	b.n	8007c5e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f043 0202 	orr.w	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	330c      	adds	r3, #12
 8007c48:	2202      	movs	r2, #2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8e7 	bl	8007e20 <USBD_CtlSendData>
      break;
 8007c52:	e004      	b.n	8007c5e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f877 	bl	8007d4a <USBD_CtlError>
      break;
 8007c5c:	bf00      	nop
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	885b      	ldrh	r3, [r3, #2]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d106      	bne.n	8007c86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f92b 	bl	8007edc <USBD_CtlSendStatus>
  }
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d80b      	bhi.n	8007cbc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10c      	bne.n	8007cc6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f911 	bl	8007edc <USBD_CtlSendStatus>
      }
      break;
 8007cba:	e004      	b.n	8007cc6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f843 	bl	8007d4a <USBD_CtlError>
      break;
 8007cc4:	e000      	b.n	8007cc8 <USBD_ClrFeature+0x3a>
      break;
 8007cc6:	bf00      	nop
  }
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781a      	ldrb	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	785a      	ldrb	r2, [r3, #1]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	3302      	adds	r3, #2
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	3303      	adds	r3, #3
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	4413      	add	r3, r2
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	3305      	adds	r3, #5
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3306      	adds	r3, #6
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	80da      	strh	r2, [r3, #6]

}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d54:	2180      	movs	r1, #128	; 0x80
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fdca 	bl	80098f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fdc6 	bl	80098f0 <USBD_LL_StallEP>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d032      	beq.n	8007de8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f834 	bl	8007df0 <USBD_GetLen>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	75fa      	strb	r2, [r7, #23]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	4413      	add	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	75fa      	strb	r2, [r7, #23]
 8007dae:	461a      	mov	r2, r3
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4413      	add	r3, r2
 8007db4:	2203      	movs	r2, #3
 8007db6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007db8:	e012      	b.n	8007de0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	60fa      	str	r2, [r7, #12]
 8007dc0:	7dfa      	ldrb	r2, [r7, #23]
 8007dc2:	1c51      	adds	r1, r2, #1
 8007dc4:	75f9      	strb	r1, [r7, #23]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	440a      	add	r2, r1
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	75fa      	strb	r2, [r7, #23]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4413      	add	r3, r2
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e8      	bne.n	8007dba <USBD_GetString+0x4e>
    }
  }
}
 8007de8:	bf00      	nop
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007dfc:	e005      	b.n	8007e0a <USBD_GetLen+0x1a>
  {
    len++;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3301      	adds	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3301      	adds	r3, #1
 8007e08:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f5      	bne.n	8007dfe <USBD_GetLen+0xe>
  }

  return len;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2202      	movs	r2, #2
 8007e32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 fdd4 	bl	80099f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4613      	mov	r3, r2
 8007e64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f001 fdc2 	bl	80099f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fdc7 	bl	8009a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 fdb5 	bl	8009a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eec:	2300      	movs	r3, #0
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fd7f 	bl	80099f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f12:	2300      	movs	r3, #0
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fd8f 	bl	8009a3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f3a:	2b84      	cmp	r3, #132	; 0x84
 8007f3c:	d005      	beq.n	8007f4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	3303      	adds	r3, #3
 8007f48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f5c:	f000 fa58 	bl	8008410 <vTaskStartScheduler>
  
  return osOK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f68:	b087      	sub	sp, #28
 8007f6a:	af02      	add	r7, sp, #8
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685c      	ldr	r4, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f7c:	b29e      	uxth	r6, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff ffcf 	bl	8007f28 <makeFreeRtosPriority>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	f107 030c 	add.w	r3, r7, #12
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	9200      	str	r2, [sp, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	4632      	mov	r2, r6
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f8d2 	bl	8008144 <xTaskCreate>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d001      	beq.n	8007faa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	e000      	b.n	8007fac <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fb4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <osDelay+0x16>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	e000      	b.n	8007fcc <osDelay+0x18>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f9eb 	bl	80083a8 <vTaskDelay>
  
  return osOK;
 8007fd2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f103 0208 	add.w	r2, r3, #8
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f103 0208 	add.w	r2, r3, #8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f103 0208 	add.w	r2, r3, #8
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689a      	ldr	r2, [r3, #8]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	601a      	str	r2, [r3, #0]
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d103      	bne.n	800809e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e00c      	b.n	80080b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3308      	adds	r3, #8
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	e002      	b.n	80080ac <vListInsert+0x2e>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d2f6      	bcs.n	80080a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6892      	ldr	r2, [r2, #8]
 8008106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6852      	ldr	r2, [r2, #4]
 8008110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	429a      	cmp	r2, r3
 800811a:	d103      	bne.n	8008124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	1e5a      	subs	r2, r3, #1
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08c      	sub	sp, #48	; 0x30
 8008148:	af04      	add	r7, sp, #16
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008154:	88fb      	ldrh	r3, [r7, #6]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f000 fe7b 	bl	8008e54 <pvPortMalloc>
 800815e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00e      	beq.n	8008184 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008166:	2054      	movs	r0, #84	; 0x54
 8008168:	f000 fe74 	bl	8008e54 <pvPortMalloc>
 800816c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
 800817a:	e005      	b.n	8008188 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800817c:	6978      	ldr	r0, [r7, #20]
 800817e:	f000 ff2b 	bl	8008fd8 <vPortFree>
 8008182:	e001      	b.n	8008188 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008184:	2300      	movs	r3, #0
 8008186:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d013      	beq.n	80081b6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800818e:	88fa      	ldrh	r2, [r7, #6]
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f80e 	bl	80081c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081aa:	69f8      	ldr	r0, [r7, #28]
 80081ac:	f000 f892 	bl	80082d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081b0:	2301      	movs	r3, #1
 80081b2:	61bb      	str	r3, [r7, #24]
 80081b4:	e002      	b.n	80081bc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081b6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081bc:	69bb      	ldr	r3, [r7, #24]
	}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b088      	sub	sp, #32
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60f8      	str	r0, [r7, #12]
 80081ce:	60b9      	str	r1, [r7, #8]
 80081d0:	607a      	str	r2, [r7, #4]
 80081d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081de:	3b01      	subs	r3, #1
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	f023 0307 	bic.w	r3, r3, #7
 80081ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d009      	beq.n	800820c <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e7fe      	b.n	800820a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01f      	beq.n	8008252 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	e012      	b.n	800823e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	7819      	ldrb	r1, [r3, #0]
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	4413      	add	r3, r2
 8008226:	3334      	adds	r3, #52	; 0x34
 8008228:	460a      	mov	r2, r1
 800822a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	2b0f      	cmp	r3, #15
 8008242:	d9e9      	bls.n	8008218 <prvInitialiseNewTask+0x52>
 8008244:	e000      	b.n	8008248 <prvInitialiseNewTask+0x82>
			{
				break;
 8008246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008250:	e003      	b.n	800825a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	2b06      	cmp	r3, #6
 800825e:	d901      	bls.n	8008264 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008260:	2306      	movs	r3, #6
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	2200      	movs	r2, #0
 8008274:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	3304      	adds	r3, #4
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fece 	bl	800801c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	3318      	adds	r3, #24
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fec9 	bl	800801c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800828e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	f1c3 0207 	rsb	r2, r3, #7
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800829e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	2200      	movs	r2, #0
 80082a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	69b8      	ldr	r0, [r7, #24]
 80082b4:	f000 fbc8 	bl	8008a48 <pxPortInitialiseStack>
 80082b8:	4602      	mov	r2, r0
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ca:	bf00      	nop
 80082cc:	3720      	adds	r7, #32
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082dc:	f000 fcde 	bl	8008c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e0:	4b2a      	ldr	r3, [pc, #168]	; (800838c <prvAddNewTaskToReadyList+0xb8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	4a29      	ldr	r2, [pc, #164]	; (800838c <prvAddNewTaskToReadyList+0xb8>)
 80082e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082ea:	4b29      	ldr	r3, [pc, #164]	; (8008390 <prvAddNewTaskToReadyList+0xbc>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082f2:	4a27      	ldr	r2, [pc, #156]	; (8008390 <prvAddNewTaskToReadyList+0xbc>)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082f8:	4b24      	ldr	r3, [pc, #144]	; (800838c <prvAddNewTaskToReadyList+0xb8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d110      	bne.n	8008322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008300:	f000 faa0 	bl	8008844 <prvInitialiseTaskLists>
 8008304:	e00d      	b.n	8008322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008306:	4b23      	ldr	r3, [pc, #140]	; (8008394 <prvAddNewTaskToReadyList+0xc0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800830e:	4b20      	ldr	r3, [pc, #128]	; (8008390 <prvAddNewTaskToReadyList+0xbc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	429a      	cmp	r2, r3
 800831a:	d802      	bhi.n	8008322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800831c:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <prvAddNewTaskToReadyList+0xbc>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008322:	4b1d      	ldr	r3, [pc, #116]	; (8008398 <prvAddNewTaskToReadyList+0xc4>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a1b      	ldr	r2, [pc, #108]	; (8008398 <prvAddNewTaskToReadyList+0xc4>)
 800832a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	2201      	movs	r2, #1
 8008332:	409a      	lsls	r2, r3
 8008334:	4b19      	ldr	r3, [pc, #100]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4313      	orrs	r3, r2
 800833a:	4a18      	ldr	r2, [pc, #96]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <prvAddNewTaskToReadyList+0xcc>)
 800834c:	441a      	add	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3304      	adds	r3, #4
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	f7ff fe6e 	bl	8008036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800835a:	f000 fccd 	bl	8008cf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <prvAddNewTaskToReadyList+0xc0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00e      	beq.n	8008384 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008366:	4b0a      	ldr	r3, [pc, #40]	; (8008390 <prvAddNewTaskToReadyList+0xbc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	429a      	cmp	r2, r3
 8008372:	d207      	bcs.n	8008384 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008374:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <prvAddNewTaskToReadyList+0xd0>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20001510 	.word	0x20001510
 8008390:	20001410 	.word	0x20001410
 8008394:	2000151c 	.word	0x2000151c
 8008398:	2000152c 	.word	0x2000152c
 800839c:	20001518 	.word	0x20001518
 80083a0:	20001414 	.word	0x20001414
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d016      	beq.n	80083e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083ba:	4b13      	ldr	r3, [pc, #76]	; (8008408 <vTaskDelay+0x60>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d009      	beq.n	80083d6 <vTaskDelay+0x2e>
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	e7fe      	b.n	80083d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80083d6:	f000 f861 	bl	800849c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 facd 	bl	800897c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083e2:	f000 f869 	bl	80084b8 <xTaskResumeAll>
 80083e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d107      	bne.n	80083fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <vTaskDelay+0x64>)
 80083f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20001538 	.word	0x20001538
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008416:	4b1b      	ldr	r3, [pc, #108]	; (8008484 <vTaskStartScheduler+0x74>)
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	2300      	movs	r3, #0
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	2300      	movs	r3, #0
 8008420:	2280      	movs	r2, #128	; 0x80
 8008422:	4919      	ldr	r1, [pc, #100]	; (8008488 <vTaskStartScheduler+0x78>)
 8008424:	4819      	ldr	r0, [pc, #100]	; (800848c <vTaskStartScheduler+0x7c>)
 8008426:	f7ff fe8d 	bl	8008144 <xTaskCreate>
 800842a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d115      	bne.n	800845e <vTaskStartScheduler+0x4e>
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <vTaskStartScheduler+0x80>)
 8008446:	f04f 32ff 	mov.w	r2, #4294967295
 800844a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800844c:	4b11      	ldr	r3, [pc, #68]	; (8008494 <vTaskStartScheduler+0x84>)
 800844e:	2201      	movs	r2, #1
 8008450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <vTaskStartScheduler+0x88>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008458:	f000 fb82 	bl	8008b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800845c:	e00d      	b.n	800847a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d109      	bne.n	800847a <vTaskStartScheduler+0x6a>
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	607b      	str	r3, [r7, #4]
 8008478:	e7fe      	b.n	8008478 <vTaskStartScheduler+0x68>
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20001534 	.word	0x20001534
 8008488:	08009c7c 	.word	0x08009c7c
 800848c:	08008815 	.word	0x08008815
 8008490:	20001530 	.word	0x20001530
 8008494:	2000151c 	.word	0x2000151c
 8008498:	20001514 	.word	0x20001514

0800849c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <vTaskSuspendAll+0x18>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <vTaskSuspendAll+0x18>)
 80084a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084aa:	bf00      	nop
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20001538 	.word	0x20001538

080084b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084c6:	4b41      	ldr	r3, [pc, #260]	; (80085cc <xTaskResumeAll+0x114>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <xTaskResumeAll+0x2a>
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	e7fe      	b.n	80084e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084e2:	f000 fbdb 	bl	8008c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084e6:	4b39      	ldr	r3, [pc, #228]	; (80085cc <xTaskResumeAll+0x114>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	4a37      	ldr	r2, [pc, #220]	; (80085cc <xTaskResumeAll+0x114>)
 80084ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084f0:	4b36      	ldr	r3, [pc, #216]	; (80085cc <xTaskResumeAll+0x114>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d161      	bne.n	80085bc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084f8:	4b35      	ldr	r3, [pc, #212]	; (80085d0 <xTaskResumeAll+0x118>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d05d      	beq.n	80085bc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008500:	e02e      	b.n	8008560 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008502:	4b34      	ldr	r3, [pc, #208]	; (80085d4 <xTaskResumeAll+0x11c>)
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3318      	adds	r3, #24
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fdee 	bl	80080f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3304      	adds	r3, #4
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff fde9 	bl	80080f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	2201      	movs	r2, #1
 8008524:	409a      	lsls	r2, r3
 8008526:	4b2c      	ldr	r3, [pc, #176]	; (80085d8 <xTaskResumeAll+0x120>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4313      	orrs	r3, r2
 800852c:	4a2a      	ldr	r2, [pc, #168]	; (80085d8 <xTaskResumeAll+0x120>)
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4a27      	ldr	r2, [pc, #156]	; (80085dc <xTaskResumeAll+0x124>)
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7ff fd75 	bl	8008036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4b23      	ldr	r3, [pc, #140]	; (80085e0 <xTaskResumeAll+0x128>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	429a      	cmp	r2, r3
 8008558:	d302      	bcc.n	8008560 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800855a:	4b22      	ldr	r3, [pc, #136]	; (80085e4 <xTaskResumeAll+0x12c>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008560:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <xTaskResumeAll+0x11c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1cc      	bne.n	8008502 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800856e:	f000 f9e5 	bl	800893c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008572:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <xTaskResumeAll+0x130>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d010      	beq.n	80085a0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800857e:	f000 f837 	bl	80085f0 <xTaskIncrementTick>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008588:	4b16      	ldr	r3, [pc, #88]	; (80085e4 <xTaskResumeAll+0x12c>)
 800858a:	2201      	movs	r2, #1
 800858c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f1      	bne.n	800857e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <xTaskResumeAll+0x130>)
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085a0:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <xTaskResumeAll+0x12c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d009      	beq.n	80085bc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <xTaskResumeAll+0x134>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085bc:	f000 fb9c 	bl	8008cf8 <vPortExitCritical>

	return xAlreadyYielded;
 80085c0:	68bb      	ldr	r3, [r7, #8]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20001538 	.word	0x20001538
 80085d0:	20001510 	.word	0x20001510
 80085d4:	200014d0 	.word	0x200014d0
 80085d8:	20001518 	.word	0x20001518
 80085dc:	20001414 	.word	0x20001414
 80085e0:	20001410 	.word	0x20001410
 80085e4:	20001524 	.word	0x20001524
 80085e8:	20001520 	.word	0x20001520
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fa:	4b4e      	ldr	r3, [pc, #312]	; (8008734 <xTaskIncrementTick+0x144>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f040 8087 	bne.w	8008712 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008604:	4b4c      	ldr	r3, [pc, #304]	; (8008738 <xTaskIncrementTick+0x148>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800860c:	4a4a      	ldr	r2, [pc, #296]	; (8008738 <xTaskIncrementTick+0x148>)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11f      	bne.n	8008658 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008618:	4b48      	ldr	r3, [pc, #288]	; (800873c <xTaskIncrementTick+0x14c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <xTaskIncrementTick+0x46>
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	e7fe      	b.n	8008634 <xTaskIncrementTick+0x44>
 8008636:	4b41      	ldr	r3, [pc, #260]	; (800873c <xTaskIncrementTick+0x14c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	4b40      	ldr	r3, [pc, #256]	; (8008740 <xTaskIncrementTick+0x150>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a3e      	ldr	r2, [pc, #248]	; (800873c <xTaskIncrementTick+0x14c>)
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4a3e      	ldr	r2, [pc, #248]	; (8008740 <xTaskIncrementTick+0x150>)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <xTaskIncrementTick+0x154>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	4a3c      	ldr	r2, [pc, #240]	; (8008744 <xTaskIncrementTick+0x154>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	f000 f972 	bl	800893c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008658:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <xTaskIncrementTick+0x158>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d348      	bcc.n	80086f4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008662:	4b36      	ldr	r3, [pc, #216]	; (800873c <xTaskIncrementTick+0x14c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d104      	bne.n	8008676 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <xTaskIncrementTick+0x158>)
 800866e:	f04f 32ff 	mov.w	r2, #4294967295
 8008672:	601a      	str	r2, [r3, #0]
					break;
 8008674:	e03e      	b.n	80086f4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008676:	4b31      	ldr	r3, [pc, #196]	; (800873c <xTaskIncrementTick+0x14c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d203      	bcs.n	8008696 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800868e:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <xTaskIncrementTick+0x158>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008694:	e02e      	b.n	80086f4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	3304      	adds	r3, #4
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fd28 	bl	80080f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	3318      	adds	r3, #24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff fd1f 	bl	80080f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	2201      	movs	r2, #1
 80086b8:	409a      	lsls	r2, r3
 80086ba:	4b24      	ldr	r3, [pc, #144]	; (800874c <xTaskIncrementTick+0x15c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4313      	orrs	r3, r2
 80086c0:	4a22      	ldr	r2, [pc, #136]	; (800874c <xTaskIncrementTick+0x15c>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <xTaskIncrementTick+0x160>)
 80086d2:	441a      	add	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7ff fcab 	bl	8008036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <xTaskIncrementTick+0x164>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d3b9      	bcc.n	8008662 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086f2:	e7b6      	b.n	8008662 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086f4:	4b17      	ldr	r3, [pc, #92]	; (8008754 <xTaskIncrementTick+0x164>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fa:	4915      	ldr	r1, [pc, #84]	; (8008750 <xTaskIncrementTick+0x160>)
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d907      	bls.n	800871c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e004      	b.n	800871c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008712:	4b11      	ldr	r3, [pc, #68]	; (8008758 <xTaskIncrementTick+0x168>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	4a0f      	ldr	r2, [pc, #60]	; (8008758 <xTaskIncrementTick+0x168>)
 800871a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800871c:	4b0f      	ldr	r3, [pc, #60]	; (800875c <xTaskIncrementTick+0x16c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008724:	2301      	movs	r3, #1
 8008726:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008728:	697b      	ldr	r3, [r7, #20]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20001538 	.word	0x20001538
 8008738:	20001514 	.word	0x20001514
 800873c:	200014c8 	.word	0x200014c8
 8008740:	200014cc 	.word	0x200014cc
 8008744:	20001528 	.word	0x20001528
 8008748:	20001530 	.word	0x20001530
 800874c:	20001518 	.word	0x20001518
 8008750:	20001414 	.word	0x20001414
 8008754:	20001410 	.word	0x20001410
 8008758:	20001520 	.word	0x20001520
 800875c:	20001524 	.word	0x20001524

08008760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008766:	4b26      	ldr	r3, [pc, #152]	; (8008800 <vTaskSwitchContext+0xa0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d003      	beq.n	8008776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800876e:	4b25      	ldr	r3, [pc, #148]	; (8008804 <vTaskSwitchContext+0xa4>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008774:	e03e      	b.n	80087f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008776:	4b23      	ldr	r3, [pc, #140]	; (8008804 <vTaskSwitchContext+0xa4>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800877c:	4b22      	ldr	r3, [pc, #136]	; (8008808 <vTaskSwitchContext+0xa8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	fab3 f383 	clz	r3, r3
 8008788:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	f1c3 031f 	rsb	r3, r3, #31
 8008790:	617b      	str	r3, [r7, #20]
 8008792:	491e      	ldr	r1, [pc, #120]	; (800880c <vTaskSwitchContext+0xac>)
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4613      	mov	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	607b      	str	r3, [r7, #4]
 80087b8:	e7fe      	b.n	80087b8 <vTaskSwitchContext+0x58>
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <vTaskSwitchContext+0xac>)
 80087c6:	4413      	add	r3, r2
 80087c8:	613b      	str	r3, [r7, #16]
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	3308      	adds	r3, #8
 80087dc:	429a      	cmp	r2, r3
 80087de:	d104      	bne.n	80087ea <vTaskSwitchContext+0x8a>
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	4a07      	ldr	r2, [pc, #28]	; (8008810 <vTaskSwitchContext+0xb0>)
 80087f2:	6013      	str	r3, [r2, #0]
}
 80087f4:	bf00      	nop
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20001538 	.word	0x20001538
 8008804:	20001524 	.word	0x20001524
 8008808:	20001518 	.word	0x20001518
 800880c:	20001414 	.word	0x20001414
 8008810:	20001410 	.word	0x20001410

08008814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800881c:	f000 f852 	bl	80088c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <prvIdleTask+0x28>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d9f9      	bls.n	800881c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <prvIdleTask+0x2c>)
 800882a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008838:	e7f0      	b.n	800881c <prvIdleTask+0x8>
 800883a:	bf00      	nop
 800883c:	20001414 	.word	0x20001414
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800884a:	2300      	movs	r3, #0
 800884c:	607b      	str	r3, [r7, #4]
 800884e:	e00c      	b.n	800886a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4a12      	ldr	r2, [pc, #72]	; (80088a4 <prvInitialiseTaskLists+0x60>)
 800885c:	4413      	add	r3, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fbbc 	bl	8007fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b06      	cmp	r3, #6
 800886e:	d9ef      	bls.n	8008850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008870:	480d      	ldr	r0, [pc, #52]	; (80088a8 <prvInitialiseTaskLists+0x64>)
 8008872:	f7ff fbb3 	bl	8007fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008876:	480d      	ldr	r0, [pc, #52]	; (80088ac <prvInitialiseTaskLists+0x68>)
 8008878:	f7ff fbb0 	bl	8007fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800887c:	480c      	ldr	r0, [pc, #48]	; (80088b0 <prvInitialiseTaskLists+0x6c>)
 800887e:	f7ff fbad 	bl	8007fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008882:	480c      	ldr	r0, [pc, #48]	; (80088b4 <prvInitialiseTaskLists+0x70>)
 8008884:	f7ff fbaa 	bl	8007fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008888:	480b      	ldr	r0, [pc, #44]	; (80088b8 <prvInitialiseTaskLists+0x74>)
 800888a:	f7ff fba7 	bl	8007fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800888e:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <prvInitialiseTaskLists+0x78>)
 8008890:	4a05      	ldr	r2, [pc, #20]	; (80088a8 <prvInitialiseTaskLists+0x64>)
 8008892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <prvInitialiseTaskLists+0x7c>)
 8008896:	4a05      	ldr	r2, [pc, #20]	; (80088ac <prvInitialiseTaskLists+0x68>)
 8008898:	601a      	str	r2, [r3, #0]
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20001414 	.word	0x20001414
 80088a8:	200014a0 	.word	0x200014a0
 80088ac:	200014b4 	.word	0x200014b4
 80088b0:	200014d0 	.word	0x200014d0
 80088b4:	200014e4 	.word	0x200014e4
 80088b8:	200014fc 	.word	0x200014fc
 80088bc:	200014c8 	.word	0x200014c8
 80088c0:	200014cc 	.word	0x200014cc

080088c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ca:	e019      	b.n	8008900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088cc:	f000 f9e6 	bl	8008c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d0:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <prvCheckTasksWaitingTermination+0x4c>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3304      	adds	r3, #4
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fc07 	bl	80080f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088e2:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <prvCheckTasksWaitingTermination+0x50>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	4a0a      	ldr	r2, [pc, #40]	; (8008914 <prvCheckTasksWaitingTermination+0x50>)
 80088ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <prvCheckTasksWaitingTermination+0x54>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	4a09      	ldr	r2, [pc, #36]	; (8008918 <prvCheckTasksWaitingTermination+0x54>)
 80088f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088f6:	f000 f9ff 	bl	8008cf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f80e 	bl	800891c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <prvCheckTasksWaitingTermination+0x54>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e1      	bne.n	80088cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200014e4 	.word	0x200014e4
 8008914:	20001510 	.word	0x20001510
 8008918:	200014f8 	.word	0x200014f8

0800891c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fb55 	bl	8008fd8 <vPortFree>
			vPortFree( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fb52 	bl	8008fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008934:	bf00      	nop
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008942:	4b0c      	ldr	r3, [pc, #48]	; (8008974 <prvResetNextTaskUnblockTime+0x38>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800894c:	4b0a      	ldr	r3, [pc, #40]	; (8008978 <prvResetNextTaskUnblockTime+0x3c>)
 800894e:	f04f 32ff 	mov.w	r2, #4294967295
 8008952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008954:	e008      	b.n	8008968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b07      	ldr	r3, [pc, #28]	; (8008974 <prvResetNextTaskUnblockTime+0x38>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4a04      	ldr	r2, [pc, #16]	; (8008978 <prvResetNextTaskUnblockTime+0x3c>)
 8008966:	6013      	str	r3, [r2, #0]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	200014c8 	.word	0x200014c8
 8008978:	20001530 	.word	0x20001530

0800897c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008986:	4b29      	ldr	r3, [pc, #164]	; (8008a2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898c:	4b28      	ldr	r3, [pc, #160]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3304      	adds	r3, #4
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fbac 	bl	80080f0 <uxListRemove>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800899e:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	2201      	movs	r2, #1
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	43da      	mvns	r2, r3
 80089ac:	4b21      	ldr	r3, [pc, #132]	; (8008a34 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4013      	ands	r3, r2
 80089b2:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d10a      	bne.n	80089d4 <prvAddCurrentTaskToDelayedList+0x58>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089c4:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4619      	mov	r1, r3
 80089cc:	481a      	ldr	r0, [pc, #104]	; (8008a38 <prvAddCurrentTaskToDelayedList+0xbc>)
 80089ce:	f7ff fb32 	bl	8008036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089d2:	e026      	b.n	8008a22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4413      	add	r3, r2
 80089da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089dc:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d209      	bcs.n	8008a00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <prvAddCurrentTaskToDelayedList+0xc0>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7ff fb40 	bl	800807e <vListInsert>
}
 80089fe:	e010      	b.n	8008a22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a00:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	f7ff fb36 	bl	800807e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d202      	bcs.n	8008a22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a1c:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6013      	str	r3, [r2, #0]
}
 8008a22:	bf00      	nop
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20001514 	.word	0x20001514
 8008a30:	20001410 	.word	0x20001410
 8008a34:	20001518 	.word	0x20001518
 8008a38:	200014fc 	.word	0x200014fc
 8008a3c:	200014cc 	.word	0x200014cc
 8008a40:	200014c8 	.word	0x200014c8
 8008a44:	20001530 	.word	0x20001530

08008a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3b04      	subs	r3, #4
 8008a58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b04      	subs	r3, #4
 8008a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f023 0201 	bic.w	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3b04      	subs	r3, #4
 8008a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a78:	4a0c      	ldr	r2, [pc, #48]	; (8008aac <pxPortInitialiseStack+0x64>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3b14      	subs	r3, #20
 8008a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3b04      	subs	r3, #4
 8008a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f06f 0202 	mvn.w	r2, #2
 8008a96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3b20      	subs	r3, #32
 8008a9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	08008ab1 	.word	0x08008ab1

08008ab0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aba:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <prvTaskExitError+0x50>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d009      	beq.n	8008ad8 <prvTaskExitError+0x28>
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	e7fe      	b.n	8008ad6 <prvTaskExitError+0x26>
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aea:	bf00      	nop
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0fc      	beq.n	8008aec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008af2:	bf00      	nop
 8008af4:	3714      	adds	r7, #20
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	2000011c 	.word	0x2000011c
	...

08008b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <pxCurrentTCBConst2>)
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	6808      	ldr	r0, [r1, #0]
 8008b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1a:	f380 8809 	msr	PSP, r0
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	f380 8811 	msr	BASEPRI, r0
 8008b2a:	4770      	bx	lr
 8008b2c:	f3af 8000 	nop.w

08008b30 <pxCurrentTCBConst2>:
 8008b30:	20001410 	.word	0x20001410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop

08008b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b38:	4808      	ldr	r0, [pc, #32]	; (8008b5c <prvPortStartFirstTask+0x24>)
 8008b3a:	6800      	ldr	r0, [r0, #0]
 8008b3c:	6800      	ldr	r0, [r0, #0]
 8008b3e:	f380 8808 	msr	MSP, r0
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8814 	msr	CONTROL, r0
 8008b4a:	b662      	cpsie	i
 8008b4c:	b661      	cpsie	f
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	df00      	svc	0
 8008b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b5a:	bf00      	nop
 8008b5c:	e000ed08 	.word	0xe000ed08

08008b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b66:	4b44      	ldr	r3, [pc, #272]	; (8008c78 <xPortStartScheduler+0x118>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a44      	ldr	r2, [pc, #272]	; (8008c7c <xPortStartScheduler+0x11c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d109      	bne.n	8008b84 <xPortStartScheduler+0x24>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	e7fe      	b.n	8008b82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b84:	4b3c      	ldr	r3, [pc, #240]	; (8008c78 <xPortStartScheduler+0x118>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a3d      	ldr	r2, [pc, #244]	; (8008c80 <xPortStartScheduler+0x120>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d109      	bne.n	8008ba2 <xPortStartScheduler+0x42>
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e7fe      	b.n	8008ba0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ba2:	4b38      	ldr	r3, [pc, #224]	; (8008c84 <xPortStartScheduler+0x124>)
 8008ba4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	22ff      	movs	r2, #255	; 0xff
 8008bb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <xPortStartScheduler+0x128>)
 8008bc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bca:	4b30      	ldr	r3, [pc, #192]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008bcc:	2207      	movs	r2, #7
 8008bce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bd0:	e009      	b.n	8008be6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	4a2c      	ldr	r2, [pc, #176]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008bda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bee:	2b80      	cmp	r3, #128	; 0x80
 8008bf0:	d0ef      	beq.n	8008bd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bf2:	4b26      	ldr	r3, [pc, #152]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f1c3 0307 	rsb	r3, r3, #7
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d009      	beq.n	8008c12 <xPortStartScheduler+0xb2>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	e7fe      	b.n	8008c10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008c1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c1c:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c24:	4a19      	ldr	r2, [pc, #100]	; (8008c8c <xPortStartScheduler+0x12c>)
 8008c26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c30:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <xPortStartScheduler+0x130>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a16      	ldr	r2, [pc, #88]	; (8008c90 <xPortStartScheduler+0x130>)
 8008c36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c3c:	4b14      	ldr	r3, [pc, #80]	; (8008c90 <xPortStartScheduler+0x130>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a13      	ldr	r2, [pc, #76]	; (8008c90 <xPortStartScheduler+0x130>)
 8008c42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c48:	f000 f8d6 	bl	8008df8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c4c:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <xPortStartScheduler+0x134>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c52:	f000 f8f5 	bl	8008e40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c56:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a0f      	ldr	r2, [pc, #60]	; (8008c98 <xPortStartScheduler+0x138>)
 8008c5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c62:	f7ff ff69 	bl	8008b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c66:	f7ff fd7b 	bl	8008760 <vTaskSwitchContext>
	prvTaskExitError();
 8008c6a:	f7ff ff21 	bl	8008ab0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	e000ed00 	.word	0xe000ed00
 8008c7c:	410fc271 	.word	0x410fc271
 8008c80:	410fc270 	.word	0x410fc270
 8008c84:	e000e400 	.word	0xe000e400
 8008c88:	2000153c 	.word	0x2000153c
 8008c8c:	20001540 	.word	0x20001540
 8008c90:	e000ed20 	.word	0xe000ed20
 8008c94:	2000011c 	.word	0x2000011c
 8008c98:	e000ef34 	.word	0xe000ef34

08008c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <vPortEnterCritical+0x54>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	4a0d      	ldr	r2, [pc, #52]	; (8008cf0 <vPortEnterCritical+0x54>)
 8008cbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <vPortEnterCritical+0x54>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d10e      	bne.n	8008ce4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <vPortEnterCritical+0x58>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <vPortEnterCritical+0x48>
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	603b      	str	r3, [r7, #0]
 8008ce2:	e7fe      	b.n	8008ce2 <vPortEnterCritical+0x46>
	}
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	2000011c 	.word	0x2000011c
 8008cf4:	e000ed04 	.word	0xe000ed04

08008cf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <vPortExitCritical+0x4c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <vPortExitCritical+0x22>
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	607b      	str	r3, [r7, #4]
 8008d18:	e7fe      	b.n	8008d18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <vPortExitCritical+0x4c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <vPortExitCritical+0x4c>)
 8008d22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d24:	4b07      	ldr	r3, [pc, #28]	; (8008d44 <vPortExitCritical+0x4c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <vPortExitCritical+0x3e>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	2000011c 	.word	0x2000011c
	...

08008d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d50:	f3ef 8009 	mrs	r0, PSP
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	4b15      	ldr	r3, [pc, #84]	; (8008db0 <pxCurrentTCBConst>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	f01e 0f10 	tst.w	lr, #16
 8008d60:	bf08      	it	eq
 8008d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	6010      	str	r0, [r2, #0]
 8008d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d74:	f380 8811 	msr	BASEPRI, r0
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f7ff fcee 	bl	8008760 <vTaskSwitchContext>
 8008d84:	f04f 0000 	mov.w	r0, #0
 8008d88:	f380 8811 	msr	BASEPRI, r0
 8008d8c:	bc09      	pop	{r0, r3}
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d96:	f01e 0f10 	tst.w	lr, #16
 8008d9a:	bf08      	it	eq
 8008d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008da0:	f380 8809 	msr	PSP, r0
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst>:
 8008db0:	20001410 	.word	0x20001410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008dd0:	f7ff fc0e 	bl	80085f0 <xTaskIncrementTick>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <SysTick_Handler+0x3c>)
 8008ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	2300      	movs	r3, #0
 8008de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	e000ed04 	.word	0xe000ed04

08008df8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <vPortSetupTimerInterrupt+0x34>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e02:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <vPortSetupTimerInterrupt+0x38>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <vPortSetupTimerInterrupt+0x3c>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <vPortSetupTimerInterrupt+0x40>)
 8008e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e12:	099b      	lsrs	r3, r3, #6
 8008e14:	4a09      	ldr	r2, [pc, #36]	; (8008e3c <vPortSetupTimerInterrupt+0x44>)
 8008e16:	3b01      	subs	r3, #1
 8008e18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <vPortSetupTimerInterrupt+0x34>)
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	601a      	str	r2, [r3, #0]
}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	e000e010 	.word	0xe000e010
 8008e30:	e000e018 	.word	0xe000e018
 8008e34:	20000000 	.word	0x20000000
 8008e38:	10624dd3 	.word	0x10624dd3
 8008e3c:	e000e014 	.word	0xe000e014

08008e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e50 <vPortEnableVFP+0x10>
 8008e44:	6801      	ldr	r1, [r0, #0]
 8008e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e4a:	6001      	str	r1, [r0, #0]
 8008e4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e4e:	bf00      	nop
 8008e50:	e000ed88 	.word	0xe000ed88

08008e54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e60:	f7ff fb1c 	bl	800849c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e64:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <pvPortMalloc+0x170>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e6c:	f000 f90c 	bl	8009088 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e70:	4b55      	ldr	r3, [pc, #340]	; (8008fc8 <pvPortMalloc+0x174>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f040 808c 	bne.w	8008f96 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01c      	beq.n	8008ebe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e84:	2208      	movs	r2, #8
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d013      	beq.n	8008ebe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f023 0307 	bic.w	r3, r3, #7
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d009      	beq.n	8008ebe <pvPortMalloc+0x6a>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	e7fe      	b.n	8008ebc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d068      	beq.n	8008f96 <pvPortMalloc+0x142>
 8008ec4:	4b41      	ldr	r3, [pc, #260]	; (8008fcc <pvPortMalloc+0x178>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d863      	bhi.n	8008f96 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ece:	4b40      	ldr	r3, [pc, #256]	; (8008fd0 <pvPortMalloc+0x17c>)
 8008ed0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ed2:	4b3f      	ldr	r3, [pc, #252]	; (8008fd0 <pvPortMalloc+0x17c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed8:	e004      	b.n	8008ee4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d903      	bls.n	8008ef6 <pvPortMalloc+0xa2>
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1f1      	bne.n	8008eda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ef6:	4b33      	ldr	r3, [pc, #204]	; (8008fc4 <pvPortMalloc+0x170>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d04a      	beq.n	8008f96 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2208      	movs	r2, #8
 8008f06:	4413      	add	r3, r2
 8008f08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	1ad2      	subs	r2, r2, r3
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d91e      	bls.n	8008f60 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4413      	add	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d009      	beq.n	8008f48 <pvPortMalloc+0xf4>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	e7fe      	b.n	8008f46 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f5a:	69b8      	ldr	r0, [r7, #24]
 8008f5c:	f000 f8f6 	bl	800914c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f60:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <pvPortMalloc+0x178>)
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <pvPortMalloc+0x178>)
 8008f6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f6e:	4b17      	ldr	r3, [pc, #92]	; (8008fcc <pvPortMalloc+0x178>)
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	4b18      	ldr	r3, [pc, #96]	; (8008fd4 <pvPortMalloc+0x180>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d203      	bcs.n	8008f82 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <pvPortMalloc+0x178>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	; (8008fd4 <pvPortMalloc+0x180>)
 8008f80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <pvPortMalloc+0x174>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	2200      	movs	r2, #0
 8008f94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f96:	f7ff fa8f 	bl	80084b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <pvPortMalloc+0x164>
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	e7fe      	b.n	8008fb6 <pvPortMalloc+0x162>
	return pvReturn;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3728      	adds	r7, #40	; 0x28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	2000214c 	.word	0x2000214c
 8008fc8:	20002158 	.word	0x20002158
 8008fcc:	20002150 	.word	0x20002150
 8008fd0:	20002144 	.word	0x20002144
 8008fd4:	20002154 	.word	0x20002154

08008fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d046      	beq.n	8009078 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fea:	2308      	movs	r3, #8
 8008fec:	425b      	negs	r3, r3
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	4b20      	ldr	r3, [pc, #128]	; (8009080 <vPortFree+0xa8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4013      	ands	r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <vPortFree+0x42>
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	e7fe      	b.n	8009018 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d009      	beq.n	8009036 <vPortFree+0x5e>
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	e7fe      	b.n	8009034 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <vPortFree+0xa8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4013      	ands	r3, r2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d019      	beq.n	8009078 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d115      	bne.n	8009078 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	4b0b      	ldr	r3, [pc, #44]	; (8009080 <vPortFree+0xa8>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	43db      	mvns	r3, r3
 8009056:	401a      	ands	r2, r3
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800905c:	f7ff fa1e 	bl	800849c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	4b07      	ldr	r3, [pc, #28]	; (8009084 <vPortFree+0xac>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4413      	add	r3, r2
 800906a:	4a06      	ldr	r2, [pc, #24]	; (8009084 <vPortFree+0xac>)
 800906c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800906e:	6938      	ldr	r0, [r7, #16]
 8009070:	f000 f86c 	bl	800914c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009074:	f7ff fa20 	bl	80084b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009078:	bf00      	nop
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20002158 	.word	0x20002158
 8009084:	20002150 	.word	0x20002150

08009088 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800908e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009092:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009094:	4b27      	ldr	r3, [pc, #156]	; (8009134 <prvHeapInit+0xac>)
 8009096:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3307      	adds	r3, #7
 80090a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	4a1f      	ldr	r2, [pc, #124]	; (8009134 <prvHeapInit+0xac>)
 80090b8:	4413      	add	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090c0:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <prvHeapInit+0xb0>)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090c6:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <prvHeapInit+0xb0>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	4413      	add	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090d4:	2208      	movs	r2, #8
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0307 	bic.w	r3, r3, #7
 80090e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4a15      	ldr	r2, [pc, #84]	; (800913c <prvHeapInit+0xb4>)
 80090e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <prvHeapInit+0xb4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <prvHeapInit+0xb4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	1ad2      	subs	r2, r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <prvHeapInit+0xb4>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <prvHeapInit+0xb8>)
 8009116:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4a09      	ldr	r2, [pc, #36]	; (8009144 <prvHeapInit+0xbc>)
 800911e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <prvHeapInit+0xc0>)
 8009122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	20001544 	.word	0x20001544
 8009138:	20002144 	.word	0x20002144
 800913c:	2000214c 	.word	0x2000214c
 8009140:	20002154 	.word	0x20002154
 8009144:	20002150 	.word	0x20002150
 8009148:	20002158 	.word	0x20002158

0800914c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009154:	4b28      	ldr	r3, [pc, #160]	; (80091f8 <prvInsertBlockIntoFreeList+0xac>)
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e002      	b.n	8009160 <prvInsertBlockIntoFreeList+0x14>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	429a      	cmp	r2, r3
 8009168:	d8f7      	bhi.n	800915a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	d108      	bne.n	800918e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	441a      	add	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	441a      	add	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d118      	bne.n	80091d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4b15      	ldr	r3, [pc, #84]	; (80091fc <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d00d      	beq.n	80091ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	441a      	add	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	e008      	b.n	80091dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <prvInsertBlockIntoFreeList+0xb0>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e003      	b.n	80091dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d002      	beq.n	80091ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ea:	bf00      	nop
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	20002144 	.word	0x20002144
 80091fc:	2000214c 	.word	0x2000214c

08009200 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009204:	2200      	movs	r2, #0
 8009206:	4912      	ldr	r1, [pc, #72]	; (8009250 <MX_USB_Device_Init+0x50>)
 8009208:	4812      	ldr	r0, [pc, #72]	; (8009254 <MX_USB_Device_Init+0x54>)
 800920a:	f7fd fdd0 	bl	8006dae <USBD_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009214:	f7f7 fc92 	bl	8000b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8009218:	490f      	ldr	r1, [pc, #60]	; (8009258 <MX_USB_Device_Init+0x58>)
 800921a:	480e      	ldr	r0, [pc, #56]	; (8009254 <MX_USB_Device_Init+0x54>)
 800921c:	f7fd fdf2 	bl	8006e04 <USBD_RegisterClass>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8009226:	f7f7 fc89 	bl	8000b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800922a:	490c      	ldr	r1, [pc, #48]	; (800925c <MX_USB_Device_Init+0x5c>)
 800922c:	4809      	ldr	r0, [pc, #36]	; (8009254 <MX_USB_Device_Init+0x54>)
 800922e:	f7fd fd4f 	bl	8006cd0 <USBD_CDC_RegisterInterface>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009238:	f7f7 fc80 	bl	8000b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800923c:	4805      	ldr	r0, [pc, #20]	; (8009254 <MX_USB_Device_Init+0x54>)
 800923e:	f7fd fdfb 	bl	8006e38 <USBD_Start>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009248:	f7f7 fc78 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800924c:	bf00      	nop
 800924e:	bd80      	pop	{r7, pc}
 8009250:	20000130 	.word	0x20000130
 8009254:	2000266c 	.word	0x2000266c
 8009258:	20000018 	.word	0x20000018
 800925c:	20000120 	.word	0x20000120

08009260 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009264:	2200      	movs	r2, #0
 8009266:	4905      	ldr	r1, [pc, #20]	; (800927c <CDC_Init_FS+0x1c>)
 8009268:	4805      	ldr	r0, [pc, #20]	; (8009280 <CDC_Init_FS+0x20>)
 800926a:	f7fd fd48 	bl	8006cfe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800926e:	4905      	ldr	r1, [pc, #20]	; (8009284 <CDC_Init_FS+0x24>)
 8009270:	4803      	ldr	r0, [pc, #12]	; (8009280 <CDC_Init_FS+0x20>)
 8009272:	f7fd fd5e 	bl	8006d32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009276:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009278:	4618      	mov	r0, r3
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20002d18 	.word	0x20002d18
 8009280:	2000266c 	.word	0x2000266c
 8009284:	20002930 	.word	0x20002930

08009288 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800928c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800928e:	4618      	mov	r0, r3
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
 80092a4:	4613      	mov	r3, r2
 80092a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	2b23      	cmp	r3, #35	; 0x23
 80092ac:	d84a      	bhi.n	8009344 <CDC_Control_FS+0xac>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <CDC_Control_FS+0x1c>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	08009345 	.word	0x08009345
 80092b8:	08009345 	.word	0x08009345
 80092bc:	08009345 	.word	0x08009345
 80092c0:	08009345 	.word	0x08009345
 80092c4:	08009345 	.word	0x08009345
 80092c8:	08009345 	.word	0x08009345
 80092cc:	08009345 	.word	0x08009345
 80092d0:	08009345 	.word	0x08009345
 80092d4:	08009345 	.word	0x08009345
 80092d8:	08009345 	.word	0x08009345
 80092dc:	08009345 	.word	0x08009345
 80092e0:	08009345 	.word	0x08009345
 80092e4:	08009345 	.word	0x08009345
 80092e8:	08009345 	.word	0x08009345
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009345 	.word	0x08009345
 80092f4:	08009345 	.word	0x08009345
 80092f8:	08009345 	.word	0x08009345
 80092fc:	08009345 	.word	0x08009345
 8009300:	08009345 	.word	0x08009345
 8009304:	08009345 	.word	0x08009345
 8009308:	08009345 	.word	0x08009345
 800930c:	08009345 	.word	0x08009345
 8009310:	08009345 	.word	0x08009345
 8009314:	08009345 	.word	0x08009345
 8009318:	08009345 	.word	0x08009345
 800931c:	08009345 	.word	0x08009345
 8009320:	08009345 	.word	0x08009345
 8009324:	08009345 	.word	0x08009345
 8009328:	08009345 	.word	0x08009345
 800932c:	08009345 	.word	0x08009345
 8009330:	08009345 	.word	0x08009345
 8009334:	08009345 	.word	0x08009345
 8009338:	08009345 	.word	0x08009345
 800933c:	08009345 	.word	0x08009345
 8009340:	08009345 	.word	0x08009345
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009344:	bf00      	nop
  }

  return (USBD_OK);
 8009346:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009348:	4618      	mov	r0, r3
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <CDC_Receive_FS+0x24>)
 8009362:	f7fd fce6 	bl	8006d32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009366:	4804      	ldr	r0, [pc, #16]	; (8009378 <CDC_Receive_FS+0x24>)
 8009368:	f7fd fcf7 	bl	8006d5a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800936c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	2000266c 	.word	0x2000266c

0800937c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	4603      	mov	r3, r0
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2212      	movs	r2, #18
 800938c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000150 	.word	0x20000150

080093a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2204      	movs	r2, #4
 80093b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80093b2:	4b03      	ldr	r3, [pc, #12]	; (80093c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	20000164 	.word	0x20000164

080093c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4907      	ldr	r1, [pc, #28]	; (80093f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80093da:	4808      	ldr	r0, [pc, #32]	; (80093fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80093dc:	f7fe fcc6 	bl	8007d6c <USBD_GetString>
 80093e0:	e004      	b.n	80093ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80093e8:	f7fe fcc0 	bl	8007d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20003100 	.word	0x20003100
 80093fc:	08009c84 	.word	0x08009c84

08009400 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	4904      	ldr	r1, [pc, #16]	; (8009420 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009410:	4804      	ldr	r0, [pc, #16]	; (8009424 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009412:	f7fe fcab 	bl	8007d6c <USBD_GetString>
  return USBD_StrDesc;
 8009416:	4b02      	ldr	r3, [pc, #8]	; (8009420 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20003100 	.word	0x20003100
 8009424:	08009c9c 	.word	0x08009c9c

08009428 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	6039      	str	r1, [r7, #0]
 8009432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	221a      	movs	r2, #26
 8009438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800943a:	f000 f843 	bl	80094c4 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800943e:	4b02      	ldr	r3, [pc, #8]	; (8009448 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000168 	.word	0x20000168

0800944c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	6039      	str	r1, [r7, #0]
 8009456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009458:	79fb      	ldrb	r3, [r7, #7]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	4907      	ldr	r1, [pc, #28]	; (8009480 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009462:	4808      	ldr	r0, [pc, #32]	; (8009484 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009464:	f7fe fc82 	bl	8007d6c <USBD_GetString>
 8009468:	e004      	b.n	8009474 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	4904      	ldr	r1, [pc, #16]	; (8009480 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800946e:	4805      	ldr	r0, [pc, #20]	; (8009484 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009470:	f7fe fc7c 	bl	8007d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20003100 	.word	0x20003100
 8009484:	08009cb0 	.word	0x08009cb0

08009488 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4907      	ldr	r1, [pc, #28]	; (80094bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800949e:	4808      	ldr	r0, [pc, #32]	; (80094c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80094a0:	f7fe fc64 	bl	8007d6c <USBD_GetString>
 80094a4:	e004      	b.n	80094b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4904      	ldr	r1, [pc, #16]	; (80094bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80094ac:	f7fe fc5e 	bl	8007d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20003100 	.word	0x20003100
 80094c0:	08009cbc 	.word	0x08009cbc

080094c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80094ca:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <Get_SerialNum+0x44>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80094d0:	4b0e      	ldr	r3, [pc, #56]	; (800950c <Get_SerialNum+0x48>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80094d6:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <Get_SerialNum+0x4c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4413      	add	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094ea:	2208      	movs	r2, #8
 80094ec:	4909      	ldr	r1, [pc, #36]	; (8009514 <Get_SerialNum+0x50>)
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f814 	bl	800951c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094f4:	2204      	movs	r2, #4
 80094f6:	4908      	ldr	r1, [pc, #32]	; (8009518 <Get_SerialNum+0x54>)
 80094f8:	68b8      	ldr	r0, [r7, #8]
 80094fa:	f000 f80f 	bl	800951c <IntToUnicode>
  }
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	1fff7590 	.word	0x1fff7590
 800950c:	1fff7594 	.word	0x1fff7594
 8009510:	1fff7598 	.word	0x1fff7598
 8009514:	2000016a 	.word	0x2000016a
 8009518:	2000017a 	.word	0x2000017a

0800951c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	4613      	mov	r3, r2
 8009528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800952e:	2300      	movs	r3, #0
 8009530:	75fb      	strb	r3, [r7, #23]
 8009532:	e027      	b.n	8009584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0f1b      	lsrs	r3, r3, #28
 8009538:	2b09      	cmp	r3, #9
 800953a:	d80b      	bhi.n	8009554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	0f1b      	lsrs	r3, r3, #28
 8009540:	b2da      	uxtb	r2, r3
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4619      	mov	r1, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	440b      	add	r3, r1
 800954c:	3230      	adds	r2, #48	; 0x30
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	e00a      	b.n	800956a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	0f1b      	lsrs	r3, r3, #28
 8009558:	b2da      	uxtb	r2, r3
 800955a:	7dfb      	ldrb	r3, [r7, #23]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	4619      	mov	r1, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	440b      	add	r3, r1
 8009564:	3237      	adds	r2, #55	; 0x37
 8009566:	b2d2      	uxtb	r2, r2
 8009568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	3301      	adds	r3, #1
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	4413      	add	r3, r2
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	3301      	adds	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
 8009584:	7dfa      	ldrb	r2, [r7, #23]
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	429a      	cmp	r2, r3
 800958a:	d3d3      	bcc.n	8009534 <IntToUnicode+0x18>
  }
}
 800958c:	bf00      	nop
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08a      	sub	sp, #40	; 0x28
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095a0:	f107 0314 	add.w	r3, r7, #20
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	605a      	str	r2, [r3, #4]
 80095aa:	609a      	str	r2, [r3, #8]
 80095ac:	60da      	str	r2, [r3, #12]
 80095ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a1a      	ldr	r2, [pc, #104]	; (8009620 <HAL_PCD_MspInit+0x88>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d12d      	bne.n	8009616 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ba:	4b1a      	ldr	r3, [pc, #104]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095be:	4a19      	ldr	r2, [pc, #100]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095c0:	f043 0301 	orr.w	r3, r3, #1
 80095c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80095c6:	4b17      	ldr	r3, [pc, #92]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80095d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80095d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80095d8:	2303      	movs	r3, #3
 80095da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095e0:	f107 0314 	add.w	r3, r7, #20
 80095e4:	4619      	mov	r1, r3
 80095e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80095ea:	f7f8 fb5f 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095f8:	6593      	str	r3, [r2, #88]	; 0x58
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <HAL_PCD_MspInit+0x8c>)
 80095fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8009606:	2200      	movs	r2, #0
 8009608:	2105      	movs	r1, #5
 800960a:	2014      	movs	r0, #20
 800960c:	f7f8 f8b4 	bl	8001778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009610:	2014      	movs	r0, #20
 8009612:	f7f8 f8cb 	bl	80017ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009616:	bf00      	nop
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40005c00 	.word	0x40005c00
 8009624:	40021000 	.word	0x40021000

08009628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7fd fc43 	bl	8006eca <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	015b      	lsls	r3, r3, #5
 8009664:	4413      	add	r3, r2
 8009666:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	4619      	mov	r1, r3
 8009670:	f7fd fc76 	bl	8006f60 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	015b      	lsls	r3, r3, #5
 8009694:	4413      	add	r3, r2
 8009696:	333c      	adds	r3, #60	; 0x3c
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	4619      	mov	r1, r3
 800969e:	f7fd fcd0 	bl	8007042 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80096a2:	bf00      	nop
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7fd fde3 	bl	8007284 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096ce:	2301      	movs	r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d001      	beq.n	80096de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096da:	f7f7 fa2f 	bl	8000b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096e4:	7bfa      	ldrb	r2, [r7, #15]
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fd90 	bl	800720e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fd fd49 	bl	800718c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009712:	4618      	mov	r0, r3
 8009714:	f7fd fd8b 	bl	800722e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <HAL_PCD_SuspendCallback+0x30>)
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	4a03      	ldr	r2, [pc, #12]	; (8009734 <HAL_PCD_SuspendCallback+0x30>)
 8009726:	f043 0306 	orr.w	r3, r3, #6
 800972a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	e000ed00 	.word	0xe000ed00

08009738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009748:	4b08      	ldr	r3, [pc, #32]	; (800976c <HAL_PCD_ResumeCallback+0x34>)
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	4a07      	ldr	r2, [pc, #28]	; (800976c <HAL_PCD_ResumeCallback+0x34>)
 800974e:	f023 0306 	bic.w	r3, r3, #6
 8009752:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009754:	f000 f9f6 	bl	8009b44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800975e:	4618      	mov	r0, r3
 8009760:	f7fd fd7a 	bl	8007258 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	e000ed00 	.word	0xe000ed00

08009770 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009778:	4a2b      	ldr	r2, [pc, #172]	; (8009828 <USBD_LL_Init+0xb8>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a29      	ldr	r2, [pc, #164]	; (8009828 <USBD_LL_Init+0xb8>)
 8009784:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009788:	4b27      	ldr	r3, [pc, #156]	; (8009828 <USBD_LL_Init+0xb8>)
 800978a:	4a28      	ldr	r2, [pc, #160]	; (800982c <USBD_LL_Init+0xbc>)
 800978c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800978e:	4b26      	ldr	r3, [pc, #152]	; (8009828 <USBD_LL_Init+0xb8>)
 8009790:	2208      	movs	r2, #8
 8009792:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009794:	4b24      	ldr	r3, [pc, #144]	; (8009828 <USBD_LL_Init+0xb8>)
 8009796:	2202      	movs	r2, #2
 8009798:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800979a:	4b23      	ldr	r3, [pc, #140]	; (8009828 <USBD_LL_Init+0xb8>)
 800979c:	2202      	movs	r2, #2
 800979e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80097a0:	4b21      	ldr	r3, [pc, #132]	; (8009828 <USBD_LL_Init+0xb8>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80097a6:	4b20      	ldr	r3, [pc, #128]	; (8009828 <USBD_LL_Init+0xb8>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097ac:	4b1e      	ldr	r3, [pc, #120]	; (8009828 <USBD_LL_Init+0xb8>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097b2:	4b1d      	ldr	r3, [pc, #116]	; (8009828 <USBD_LL_Init+0xb8>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097b8:	481b      	ldr	r0, [pc, #108]	; (8009828 <USBD_LL_Init+0xb8>)
 80097ba:	f7f8 fc11 	bl	8001fe0 <HAL_PCD_Init>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80097c4:	f7f7 f9ba 	bl	8000b3c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097ce:	2318      	movs	r3, #24
 80097d0:	2200      	movs	r2, #0
 80097d2:	2100      	movs	r1, #0
 80097d4:	f7f9 fab2 	bl	8002d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097de:	2358      	movs	r3, #88	; 0x58
 80097e0:	2200      	movs	r2, #0
 80097e2:	2180      	movs	r1, #128	; 0x80
 80097e4:	f7f9 faaa 	bl	8002d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097ee:	23c0      	movs	r3, #192	; 0xc0
 80097f0:	2200      	movs	r2, #0
 80097f2:	2181      	movs	r1, #129	; 0x81
 80097f4:	f7f9 faa2 	bl	8002d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097fe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009802:	2200      	movs	r2, #0
 8009804:	2101      	movs	r1, #1
 8009806:	f7f9 fa99 	bl	8002d3c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009814:	2200      	movs	r2, #0
 8009816:	2182      	movs	r1, #130	; 0x82
 8009818:	f7f9 fa90 	bl	8002d3c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20003300 	.word	0x20003300
 800982c:	40005c00 	.word	0x40005c00

08009830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009846:	4618      	mov	r0, r3
 8009848:	f7f8 fc85 	bl	8002156 <HAL_PCD_Start>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	4618      	mov	r0, r3
 8009854:	f000 f97c 	bl	8009b50 <USBD_Get_USB_Status>
 8009858:	4603      	mov	r3, r0
 800985a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800985c:	7bbb      	ldrb	r3, [r7, #14]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	4608      	mov	r0, r1
 8009870:	4611      	mov	r1, r2
 8009872:	461a      	mov	r2, r3
 8009874:	4603      	mov	r3, r0
 8009876:	70fb      	strb	r3, [r7, #3]
 8009878:	460b      	mov	r3, r1
 800987a:	70bb      	strb	r3, [r7, #2]
 800987c:	4613      	mov	r3, r2
 800987e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800988e:	78bb      	ldrb	r3, [r7, #2]
 8009890:	883a      	ldrh	r2, [r7, #0]
 8009892:	78f9      	ldrb	r1, [r7, #3]
 8009894:	f7f8 fdf4 	bl	8002480 <HAL_PCD_EP_Open>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f956 	bl	8009b50 <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 fe35 	bl	8002540 <HAL_PCD_EP_Close>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f937 	bl	8009b50 <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800990a:	78fa      	ldrb	r2, [r7, #3]
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f7f8 fee0 	bl	80026d4 <HAL_PCD_EP_SetStall>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f918 	bl	8009b50 <USBD_Get_USB_Status>
 8009920:	4603      	mov	r3, r0
 8009922:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009924:	7bbb      	ldrb	r3, [r7, #14]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f7f8 ff1b 	bl	8002788 <HAL_PCD_EP_ClrStall>
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	4618      	mov	r0, r3
 800995a:	f000 f8f9 	bl	8009b50 <USBD_Get_USB_Status>
 800995e:	4603      	mov	r3, r0
 8009960:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009962:	7bbb      	ldrb	r3, [r7, #14]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800997e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009984:	2b00      	cmp	r3, #0
 8009986:	da08      	bge.n	800999a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009988:	78fb      	ldrb	r3, [r7, #3]
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	015b      	lsls	r3, r3, #5
 8009992:	4413      	add	r3, r2
 8009994:	332a      	adds	r3, #42	; 0x2a
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	e008      	b.n	80099ac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	015b      	lsls	r3, r3, #5
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80099aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f8 fd2d 	bl	8002436 <HAL_PCD_SetAddress>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8b4 	bl	8009b50 <USBD_Get_USB_Status>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b086      	sub	sp, #24
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	461a      	mov	r2, r3
 8009a02:	460b      	mov	r3, r1
 8009a04:	72fb      	strb	r3, [r7, #11]
 8009a06:	4613      	mov	r3, r2
 8009a08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a18:	893b      	ldrh	r3, [r7, #8]
 8009a1a:	7af9      	ldrb	r1, [r7, #11]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	f7f8 fe20 	bl	8002662 <HAL_PCD_EP_Transmit>
 8009a22:	4603      	mov	r3, r0
 8009a24:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 f891 	bl	8009b50 <USBD_Get_USB_Status>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009a32:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	461a      	mov	r2, r3
 8009a48:	460b      	mov	r3, r1
 8009a4a:	72fb      	strb	r3, [r7, #11]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a5e:	893b      	ldrh	r3, [r7, #8]
 8009a60:	7af9      	ldrb	r1, [r7, #11]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f7f8 fdae 	bl	80025c4 <HAL_PCD_EP_Receive>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f86e 	bl	8009b50 <USBD_Get_USB_Status>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009a78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	4611      	mov	r1, r2
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7f8 fdcd 	bl	8002638 <HAL_PCD_EP_GetRxCount>
 8009a9e:	4603      	mov	r3, r0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8009ab4:	78fb      	ldrb	r3, [r7, #3]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <HAL_PCDEx_LPM_Callback+0x18>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d013      	beq.n	8009ae6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8009abe:	e023      	b.n	8009b08 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	699b      	ldr	r3, [r3, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009ac8:	f000 f83c 	bl	8009b44 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009acc:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	4a0f      	ldr	r2, [pc, #60]	; (8009b10 <HAL_PCDEx_LPM_Callback+0x68>)
 8009ad2:	f023 0306 	bic.w	r3, r3, #6
 8009ad6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fd fbba 	bl	8007258 <USBD_LL_Resume>
    break;
 8009ae4:	e010      	b.n	8009b08 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fd fb9e 	bl	800722e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009afa:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <HAL_PCDEx_LPM_Callback+0x68>)
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <HAL_PCDEx_LPM_Callback+0x68>)
 8009b00:	f043 0306 	orr.w	r3, r3, #6
 8009b04:	6113      	str	r3, [r2, #16]
    break;   
 8009b06:	bf00      	nop
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	e000ed00 	.word	0xe000ed00

08009b14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b1c:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <USBD_static_malloc+0x18>)
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	2000215c 	.word	0x2000215c

08009b30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009b48:	f7f6 fbc4 	bl	80002d4 <SystemClock_Config>
}
 8009b4c:	bf00      	nop
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b5e:	79fb      	ldrb	r3, [r7, #7]
 8009b60:	2b03      	cmp	r3, #3
 8009b62:	d817      	bhi.n	8009b94 <USBD_Get_USB_Status+0x44>
 8009b64:	a201      	add	r2, pc, #4	; (adr r2, 8009b6c <USBD_Get_USB_Status+0x1c>)
 8009b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6a:	bf00      	nop
 8009b6c:	08009b7d 	.word	0x08009b7d
 8009b70:	08009b83 	.word	0x08009b83
 8009b74:	08009b89 	.word	0x08009b89
 8009b78:	08009b8f 	.word	0x08009b8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b80:	e00b      	b.n	8009b9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b82:	2302      	movs	r3, #2
 8009b84:	73fb      	strb	r3, [r7, #15]
    break;
 8009b86:	e008      	b.n	8009b9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b8c:	e005      	b.n	8009b9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	73fb      	strb	r3, [r7, #15]
    break;
 8009b92:	e002      	b.n	8009b9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b94:	2302      	movs	r3, #2
 8009b96:	73fb      	strb	r3, [r7, #15]
    break;
 8009b98:	bf00      	nop
  }
  return usb_status;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4e0d      	ldr	r6, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1ba4      	subs	r4, r4, r6
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2500      	movs	r5, #0
 8009bb4:	42a5      	cmp	r5, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4e0b      	ldr	r6, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f000 f820 	bl	8009c00 <_init>
 8009bc0:	1ba4      	subs	r4, r4, r6
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	42a5      	cmp	r5, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bd0:	4798      	blx	r3
 8009bd2:	3501      	adds	r5, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bda:	4798      	blx	r3
 8009bdc:	3501      	adds	r5, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	08009ce4 	.word	0x08009ce4
 8009be4:	08009ce4 	.word	0x08009ce4
 8009be8:	08009ce4 	.word	0x08009ce4
 8009bec:	08009ce8 	.word	0x08009ce8

08009bf0 <memset>:
 8009bf0:	4402      	add	r2, r0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d100      	bne.n	8009bfa <memset+0xa>
 8009bf8:	4770      	bx	lr
 8009bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8009bfe:	e7f9      	b.n	8009bf4 <memset+0x4>

08009c00 <_init>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	bf00      	nop
 8009c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c06:	bc08      	pop	{r3}
 8009c08:	469e      	mov	lr, r3
 8009c0a:	4770      	bx	lr

08009c0c <_fini>:
 8009c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0e:	bf00      	nop
 8009c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c12:	bc08      	pop	{r3}
 8009c14:	469e      	mov	lr, r3
 8009c16:	4770      	bx	lr
