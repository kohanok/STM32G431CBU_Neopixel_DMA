
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007e7c  08007e7c  00017e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed4  08007ed4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed4  08007ed4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000180  0800805c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800805c  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7f2  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a24  00000000  00000000  0003d9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  000429d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002138d  00000000  00000000  00043e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000142df  00000000  00000000  000651cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7858  00000000  00000000  000794ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be8  00000000  00000000  00140d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007e64 	.word	0x08007e64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	08007e64 	.word	0x08007e64

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08e      	sub	sp, #56	; 0x38
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fe60 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f888 	bl	8000336 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fa47 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 f9f7 	bl	800061c <MX_DMA_Init>
  MX_TIM2_Init();
 800022e:	f000 f925 	bl	800047c <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000232:	f007 f917 	bl	8007464 <MX_USB_Device_Init>
  MX_SPI1_Init();
 8000236:	f000 f8e3 	bl	8000400 <MX_SPI1_Init>
  MX_TIM17_Init();
 800023a:	f000 f977 	bl	800052c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 800023e:	f000 fd57 	bl	8000cf0 <ws2812Init>
  ws2812Begin(LED_CNT);
 8000242:	2010      	movs	r0, #16
 8000244:	f000 fd66 	bl	8000d14 <ws2812Begin>

  uint32_t pre_time;
  uint32_t led_time=100;
 8000248:	2364      	movs	r3, #100	; 0x64
 800024a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t led_count=10;
 800024c:	230a      	movs	r3, #10
 800024e:	623b      	str	r3, [r7, #32]
	bool led_flg=false;
 8000250:	2300      	movs	r3, #0
 8000252:	61fb      	str	r3, [r7, #28]

	uint32_t test_count = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	61bb      	str	r3, [r7, #24]

  uint32_t led_index = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t  led_index_pre = -1;
 800025c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000260:	617b      	str	r3, [r7, #20]
  uint8_t led_color = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	74fb      	strb	r3, [r7, #19]

	uint32_t led_mask= 0b1110000111;
 8000266:	f240 3387 	movw	r3, #903	; 0x387
 800026a:	60fb      	str	r3, [r7, #12]
	uint32_t current_led=0;
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
	uint32_t test2=0;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
	uint32_t test1=0;
 8000274:	2300      	movs	r3, #0
 8000276:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(millis()-pre_time >= led_time)
 8000278:	f000 fa8e 	bl	8000798 <millis>
 800027c:	4602      	mov	r2, r0
 800027e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000280:	1ad3      	subs	r3, r2, r3
 8000282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000284:	429a      	cmp	r2, r3
 8000286:	d8f7      	bhi.n	8000278 <main+0x60>
		{
			pre_time = millis();
 8000288:	f000 fa86 	bl	8000798 <millis>
 800028c:	6378      	str	r0, [r7, #52]	; 0x34
			//test1 = rotr(led_mask, 1);
			test2 = rotateLeft(led_mask, led_index%LED_CNT);
 800028e:	68fa      	ldr	r2, [r7, #12]
 8000290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000292:	f003 030f 	and.w	r3, r3, #15
 8000296:	4619      	mov	r1, r3
 8000298:	4610      	mov	r0, r2
 800029a:	f000 fa84 	bl	80007a6 <rotateLeft>
 800029e:	4603      	mov	r3, r0
 80002a0:	607b      	str	r3, [r7, #4]
			test1 = rotateRight(led_mask, led_index%LED_CNT);
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	4619      	mov	r1, r3
 80002ac:	4610      	mov	r0, r2
 80002ae:	f000 fa9a 	bl	80007e6 <rotateRight>
 80002b2:	4603      	mov	r3, r0
 80002b4:	603b      	str	r3, [r7, #0]

			led_index++;
 80002b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002b8:	3301      	adds	r3, #1
 80002ba:	633b      	str	r3, [r7, #48]	; 0x30
			for(uint32_t j=0; j<12; j++) {
 80002bc:	2300      	movs	r3, #0
 80002be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002c0:	e017      	b.n	80002f2 <main+0xda>
				if( test2 >> j & 0x01){
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002c6:	fa22 f303 	lsr.w	r3, r2, r3
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d006      	beq.n	80002e0 <main+0xc8>
						ws2812SetColor(j, 255, 255, 255);
 80002d2:	23ff      	movs	r3, #255	; 0xff
 80002d4:	22ff      	movs	r2, #255	; 0xff
 80002d6:	21ff      	movs	r1, #255	; 0xff
 80002d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80002da:	f000 fd4b 	bl	8000d74 <ws2812SetColor>
 80002de:	e005      	b.n	80002ec <main+0xd4>
				}else {
					ws2812SetColor(j, 0, 0, 0);
 80002e0:	2300      	movs	r3, #0
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80002e8:	f000 fd44 	bl	8000d74 <ws2812SetColor>
			for(uint32_t j=0; j<12; j++) {
 80002ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002ee:	3301      	adds	r3, #1
 80002f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002f4:	2b0b      	cmp	r3, #11
 80002f6:	d9e4      	bls.n	80002c2 <main+0xaa>
				}
			}
			for(uint32_t j=20; j>11; j--) {
 80002f8:	2314      	movs	r3, #20
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80002fc:	e017      	b.n	800032e <main+0x116>
				if( test1 >> j & 0x01){
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000302:	fa22 f303 	lsr.w	r3, r2, r3
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d006      	beq.n	800031c <main+0x104>
						ws2812SetColor(j, 255, 255, 255);
 800030e:	23ff      	movs	r3, #255	; 0xff
 8000310:	22ff      	movs	r2, #255	; 0xff
 8000312:	21ff      	movs	r1, #255	; 0xff
 8000314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000316:	f000 fd2d 	bl	8000d74 <ws2812SetColor>
 800031a:	e005      	b.n	8000328 <main+0x110>
				}else {
					ws2812SetColor(j, 0, 0, 0);
 800031c:	2300      	movs	r3, #0
 800031e:	2200      	movs	r2, #0
 8000320:	2100      	movs	r1, #0
 8000322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000324:	f000 fd26 	bl	8000d74 <ws2812SetColor>
			for(uint32_t j=20; j>11; j--) {
 8000328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800032a:	3b01      	subs	r3, #1
 800032c:	62bb      	str	r3, [r7, #40]	; 0x28
 800032e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000330:	2b0b      	cmp	r3, #11
 8000332:	d8e4      	bhi.n	80002fe <main+0xe6>
		if(millis()-pre_time >= led_time)
 8000334:	e7a0      	b.n	8000278 <main+0x60>

08000336 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b0a4      	sub	sp, #144	; 0x90
 800033a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000340:	2238      	movs	r2, #56	; 0x38
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f007 fd85 	bl	8007e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800035a:	463b      	mov	r3, r7
 800035c:	2244      	movs	r2, #68	; 0x44
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f007 fd77 	bl	8007e54 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000366:	2000      	movs	r0, #0
 8000368:	f002 fa5e 	bl	8002828 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800036c:	2321      	movs	r3, #33	; 0x21
 800036e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000374:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000376:	2301      	movs	r3, #1
 8000378:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037e:	2303      	movs	r3, #3
 8000380:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000382:	2304      	movs	r3, #4
 8000384:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000386:	2355      	movs	r3, #85	; 0x55
 8000388:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800038c:	2302      	movs	r3, #2
 800038e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000398:	2302      	movs	r3, #2
 800039a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fae4 	bl	8002970 <HAL_RCC_OscConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80003ae:	f000 fa3e 	bl	800082e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b2:	230f      	movs	r3, #15
 80003b4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b6:	2303      	movs	r3, #3
 80003b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80003c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003ca:	2108      	movs	r1, #8
 80003cc:	4618      	mov	r0, r3
 80003ce:	f002 fde7 	bl	8002fa0 <HAL_RCC_ClockConfig>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003d8:	f000 fa29 	bl	800082e <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003e2:	2300      	movs	r3, #0
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 ffb9 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80003f4:	f000 fa1b 	bl	800082e <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3790      	adds	r7, #144	; 0x90
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_SPI1_Init+0x74>)
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_SPI1_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_SPI1_Init+0x74>)
 800040c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x74>)
 800041a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800041e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x74>)
 800042e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000432:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x74>)
 8000436:	2218      	movs	r2, #24
 8000438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_SPI1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x74>)
 800044e:	2207      	movs	r2, #7
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x74>)
 800045a:	2208      	movs	r2, #8
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_SPI1_Init+0x74>)
 8000460:	f003 f96e 	bl	8003740 <HAL_SPI_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800046a:	f000 f9e0 	bl	800082e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000aa0 	.word	0x20000aa0
 8000478:	40013000 	.word	0x40013000

0800047c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000482:	f107 031c 	add.w	r3, r7, #28
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800048e:	463b      	mov	r3, r7
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <MX_TIM2_Init+0xac>)
 80004a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_TIM2_Init+0xac>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_TIM2_Init+0xac>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <MX_TIM2_Init+0xac>)
 80004b6:	22d4      	movs	r2, #212	; 0xd4
 80004b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_TIM2_Init+0xac>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c0:	4b19      	ldr	r3, [pc, #100]	; (8000528 <MX_TIM2_Init+0xac>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004c6:	4818      	ldr	r0, [pc, #96]	; (8000528 <MX_TIM2_Init+0xac>)
 80004c8:	f003 fa23 	bl	8003912 <HAL_TIM_PWM_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80004d2:	f000 f9ac 	bl	800082e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	4619      	mov	r1, r3
 80004e4:	4810      	ldr	r0, [pc, #64]	; (8000528 <MX_TIM2_Init+0xac>)
 80004e6:	f004 f9fb 	bl	80048e0 <HAL_TIMEx_MasterConfigSynchronization>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004f0:	f000 f99d 	bl	800082e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f4:	2360      	movs	r3, #96	; 0x60
 80004f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <MX_TIM2_Init+0xac>)
 800050c:	f003 fc3c 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000516:	f000 f98a 	bl	800082e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <MX_TIM2_Init+0xac>)
 800051c:	f000 fb18 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 8000520:	bf00      	nop
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000b04 	.word	0x20000b04

0800052c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2234      	movs	r2, #52	; 0x34
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f007 fc81 	bl	8007e54 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000554:	4a30      	ldr	r2, [pc, #192]	; (8000618 <MX_TIM17_Init+0xec>)
 8000556:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000558:	4b2e      	ldr	r3, [pc, #184]	; (8000614 <MX_TIM17_Init+0xe8>)
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 8000564:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000566:	22d4      	movs	r2, #212	; 0xd4
 8000568:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <MX_TIM17_Init+0xe8>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800057c:	4825      	ldr	r0, [pc, #148]	; (8000614 <MX_TIM17_Init+0xe8>)
 800057e:	f003 f971 	bl	8003864 <HAL_TIM_Base_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000588:	f000 f951 	bl	800082e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800058c:	4821      	ldr	r0, [pc, #132]	; (8000614 <MX_TIM17_Init+0xe8>)
 800058e:	f003 f9c0 	bl	8003912 <HAL_TIM_PWM_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000598:	f000 f949 	bl	800082e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059c:	2360      	movs	r3, #96	; 0x60
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005a8:	2300      	movs	r3, #0
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b0:	2300      	movs	r3, #0
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b4:	2300      	movs	r3, #0
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <MX_TIM17_Init+0xe8>)
 80005c2:	f003 fbe1 	bl	8003d88 <HAL_TIM_PWM_ConfigChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80005cc:	f000 f92f 	bl	800082e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <MX_TIM17_Init+0xe8>)
 80005f8:	f004 f9f4 	bl	80049e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000602:	f000 f914 	bl	800082e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <MX_TIM17_Init+0xe8>)
 8000608:	f000 faa2 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000a54 	.word	0x20000a54
 8000618:	40014800 	.word	0x40014800

0800061c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_DMA_Init+0x98>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_DMA_Init+0x98>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6493      	str	r3, [r2, #72]	; 0x48
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_DMA_Init+0x98>)
 8000630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_DMA_Init+0x98>)
 800063c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <MX_DMA_Init+0x98>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6493      	str	r3, [r2, #72]	; 0x48
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_DMA_Init+0x98>)
 8000648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_DMA_Init+0x98>)
 8000654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_DMA_Init+0x98>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6493      	str	r3, [r2, #72]	; 0x48
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_DMA_Init+0x98>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200b      	movs	r0, #11
 8000670:	f000 fd83 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000674:	200b      	movs	r0, #11
 8000676:	f000 fd9a 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200c      	movs	r0, #12
 8000680:	f000 fd7b 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000684:	200c      	movs	r0, #12
 8000686:	f000 fd92 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	2038      	movs	r0, #56	; 0x38
 8000690:	f000 fd73 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000694:	2038      	movs	r0, #56	; 0x38
 8000696:	f000 fd8a 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2039      	movs	r0, #57	; 0x39
 80006a0:	f000 fd6b 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80006a4:	2039      	movs	r0, #57	; 0x39
 80006a6:	f000 fd82 	bl	80011ae <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a2e      	ldr	r2, [pc, #184]	; (800078c <MX_GPIO_Init+0xd4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <MX_GPIO_Init+0xd4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_GPIO_Init+0xd4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a28      	ldr	r2, [pc, #160]	; (800078c <MX_GPIO_Init+0xd4>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_GPIO_Init+0xd4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_GPIO_Init+0xd4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a22      	ldr	r2, [pc, #136]	; (800078c <MX_GPIO_Init+0xd4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_GPIO_Init+0xd4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_GPIO_Init+0xd4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <MX_GPIO_Init+0xd4>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_GPIO_Init+0xd4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4816      	ldr	r0, [pc, #88]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000736:	f001 f949 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_GPIO_Init+0xdc>)
 8000742:	f001 f943 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000760:	f000 ffb2 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8000764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_GPIO_Init+0xdc>)
 800077e:	f000 ffa3 	bl	80016c8 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800
 8000794:	48000400 	.word	0x48000400

08000798 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800079c:	f000 fc06 	bl	8000fac <HAL_GetTick>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
 80007ae:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80007b8:	e009      	b.n	80007ce <rotateLeft+0x28>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	141b      	asrs	r3, r3, #16
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	607b      	str	r3, [r7, #4]
    while(rotation--)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	603a      	str	r2, [r7, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1f0      	bne.n	80007ba <rotateLeft+0x14>
    }

    return num;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 80007f8:	e00d      	b.n	8000816 <rotateRight+0x30>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	105b      	asrs	r3, r3, #1
 8000806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080a:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	041b      	lsls	r3, r3, #16
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	607b      	str	r3, [r7, #4]
    while(rotation--)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	603a      	str	r2, [r7, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1ec      	bne.n	80007fa <rotateRight+0x14>
    }

    return num;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6093      	str	r3, [r2, #8]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40007000 	.word	0x40007000

0800085c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000892:	f7ff ffd3 	bl	800083c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <HAL_SPI_MspInit+0x164>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f040 809b 	bne.w	80009fe <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008c8:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008cc:	4a4f      	ldr	r2, [pc, #316]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008d2:	6613      	str	r3, [r2, #96]	; 0x60
 80008d4:	4b4d      	ldr	r3, [pc, #308]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	4a49      	ldr	r2, [pc, #292]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a43      	ldr	r2, [pc, #268]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b41      	ldr	r3, [pc, #260]	; (8000a0c <HAL_SPI_MspInit+0x168>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000910:	2360      	movs	r3, #96	; 0x60
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000920:	2305      	movs	r3, #5
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f000 fecb 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000932:	2320      	movs	r3, #32
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000942:	2305      	movs	r3, #5
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4830      	ldr	r0, [pc, #192]	; (8000a10 <HAL_SPI_MspInit+0x16c>)
 800094e:	f000 febb 	bl	80016c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel1;
 8000952:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000954:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <HAL_SPI_MspInit+0x174>)
 8000956:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000958:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 800095a:	220a      	movs	r2, #10
 800095c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000976:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 800097a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 800098e:	f000 fc29 	bl	80011e4 <HAL_DMA_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000998:	f7ff ff49 	bl	800082e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 80009a0:	659a      	str	r2, [r3, #88]	; 0x58
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <HAL_SPI_MspInit+0x170>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel2;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009aa:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <HAL_SPI_MspInit+0x17c>)
 80009ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009b0:	220b      	movs	r2, #11
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009b6:	2210      	movs	r2, #16
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009e4:	f000 fbfe 	bl	80011e4 <HAL_DMA_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 80009ee:	f7ff ff1e 	bl	800082e <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009f6:	655a      	str	r2, [r3, #84]	; 0x54
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_SPI_MspInit+0x178>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40013000 	.word	0x40013000
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400
 8000a14:	20000b50 	.word	0x20000b50
 8000a18:	40020408 	.word	0x40020408
 8000a1c:	20000c10 	.word	0x20000c10
 8000a20:	4002041c 	.word	0x4002041c

08000a24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d135      	bne.n	8000aa2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_TIM_PWM_MspInit+0x88>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_TIM_PWM_MspInit+0x88>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6593      	str	r3, [r2, #88]	; 0x58
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_TIM_PWM_MspInit+0x88>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x90>)
 8000a52:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a56:	2238      	movs	r2, #56	; 0x38
 8000a58:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a88:	f000 fbac 	bl	80011e4 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000a92:	f7ff fecc 	bl	800082e <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x8c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	200009f4 	.word	0x200009f4
 8000ab4:	40020008 	.word	0x40020008

08000ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_TIM_Base_MspInit+0x88>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d135      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <HAL_TIM_Base_MspInit+0x8c>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_TIM_Base_MspInit+0x8c>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_TIM_Base_MspInit+0x8c>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_TIM_Base_MspInit+0x94>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000aea:	2254      	movs	r2, #84	; 0x54
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000af0:	2210      	movs	r2, #16
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b06:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b1c:	f000 fb62 	bl	80011e4 <HAL_DMA_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000b26:	f7ff fe82 	bl	800082e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <HAL_TIM_Base_MspInit+0x90>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40014800 	.word	0x40014800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	20000bb0 	.word	0x20000bb0
 8000b4c:	4002001c 	.word	0x4002001c

08000b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b70:	d11d      	bne.n	8000bae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fd8e 	bl	80016c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000bac:	e021      	b.n	8000bf2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d11c      	bne.n	8000bf2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f000 fd6b 	bl	80016c8 <HAL_GPIO_Init>
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40014800 	.word	0x40014800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f996 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <DMA1_Channel1_IRQHandler+0x10>)
 8000c66:	f000 fbe0 	bl	800142a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200009f4 	.word	0x200009f4

08000c74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <DMA1_Channel2_IRQHandler+0x10>)
 8000c7a:	f000 fbd6 	bl	800142a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000bb0 	.word	0x20000bb0

08000c88 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <USB_LP_IRQHandler+0x10>)
 8000c8e:	f000 ff92 	bl	8001bb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000190c 	.word	0x2000190c

08000c9c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <DMA2_Channel1_IRQHandler+0x10>)
 8000ca2:	f000 fbc2 	bl	800142a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000b50 	.word	0x20000b50

08000cb0 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA2_Channel2_IRQHandler+0x10>)
 8000cb6:	f000 fbb8 	bl	800142a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000c10 	.word	0x20000c10

08000cc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SystemInit+0x28>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <SystemInit+0x28>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SystemInit+0x28>)
 8000cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cde:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8000cf4:	f240 6232 	movw	r2, #1586	; 0x632
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <ws2812Init+0x1c>)
 8000cfc:	f007 f8aa 	bl	8007e54 <memset>
  is_init = true;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <ws2812Init+0x20>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]

  return true;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001a0 	.word	0x200001a0
 8000d10:	2000019c 	.word	0x2000019c

08000d14 <ws2812Begin>:

void ws2812Begin(uint32_t led_cnt)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  ws2812.led_cnt = led_cnt;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <ws2812Begin+0x50>)
 8000d22:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.led_cnt) * 1);
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <ws2812Begin+0x50>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	0052      	lsls	r2, r2, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	3332      	adds	r3, #50	; 0x32
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <ws2812Begin+0x54>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <ws2812Begin+0x58>)
 8000d3c:	f002 fe40 	bl	80039c0 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.led_cnt) * 1);
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <ws2812Begin+0x50>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	0052      	lsls	r2, r2, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3332      	adds	r3, #50	; 0x32
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <ws2812Begin+0x54>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <ws2812Begin+0x5c>)
 8000d58:	f002 fe32 	bl	80039c0 <HAL_TIM_PWM_Start_DMA>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000c70 	.word	0x20000c70
 8000d68:	200001a0 	.word	0x200001a0
 8000d6c:	20000b04 	.word	0x20000b04
 8000d70:	20000a54 	.word	0x20000a54

08000d74 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b08b      	sub	sp, #44	; 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	461a      	mov	r2, r3
 8000d82:	4603      	mov	r3, r0
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	460b      	mov	r3, r1
 8000d88:	70bb      	strb	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	e03e      	b.n	8000e12 <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8000d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	da06      	bge.n	8000daa <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8000d9c:	f107 0218 	add.w	r2, r7, #24
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	4413      	add	r3, r2
 8000da4:	2287      	movs	r2, #135	; 0x87
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e005      	b.n	8000db6 <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8000daa:	f107 0218 	add.w	r2, r7, #24
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	4413      	add	r3, r2
 8000db2:	2243      	movs	r2, #67	; 0x43
 8000db4:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8000dbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da06      	bge.n	8000dd2 <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	4413      	add	r3, r2
 8000dcc:	2287      	movs	r2, #135	; 0x87
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e005      	b.n	8000dde <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8000dd2:	f107 0210 	add.w	r2, r7, #16
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	4413      	add	r3, r2
 8000dda:	2243      	movs	r2, #67	; 0x43
 8000ddc:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8000dde:	78bb      	ldrb	r3, [r7, #2]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8000de4:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da06      	bge.n	8000dfa <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	4413      	add	r3, r2
 8000df4:	2287      	movs	r2, #135	; 0x87
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	e005      	b.n	8000e06 <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8000dfa:	f107 0208 	add.w	r2, r7, #8
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	4413      	add	r3, r2
 8000e02:	2243      	movs	r2, #67	; 0x43
 8000e04:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8000e06:	787b      	ldrb	r3, [r7, #1]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3301      	adds	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	ddbd      	ble.n	8000d94 <ws2812SetColor+0x20>
  }

  offset = 50;
 8000e18:	2332      	movs	r3, #50	; 0x32
 8000e1a:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	461a      	mov	r2, r3
 8000e28:	6a3b      	ldr	r3, [r7, #32]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <ws2812SetColor+0x118>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	cb03      	ldmia	r3!, {r0, r1}
 8000e38:	6010      	str	r0, [r2, #0]
 8000e3a:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	461a      	mov	r2, r3
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3308      	adds	r3, #8
 8000e4e:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <ws2812SetColor+0x118>)
 8000e50:	4413      	add	r3, r2
 8000e52:	461a      	mov	r2, r3
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	cb03      	ldmia	r3!, {r0, r1}
 8000e5a:	6010      	str	r0, [r2, #0]
 8000e5c:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	6a3b      	ldr	r3, [r7, #32]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3310      	adds	r3, #16
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <ws2812SetColor+0x118>)
 8000e72:	4413      	add	r3, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	cb03      	ldmia	r3!, {r0, r1}
 8000e7c:	6010      	str	r0, [r2, #0]
 8000e7e:	6051      	str	r1, [r2, #4]
}
 8000e80:	bf00      	nop
 8000e82:	372c      	adds	r7, #44	; 0x2c
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	200001a0 	.word	0x200001a0

08000e90 <Reset_Handler>:
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
 8000e92:	4685      	mov	sp, r0
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopForever+0x6>)
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopForever+0xa>)
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopForever+0xe>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:
 8000e9e:	58d4      	ldr	r4, [r2, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:
 8000ea4:	18c4      	adds	r4, r0, r3
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopForever+0x12>)
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopForever+0x16>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
 8000eba:	f7ff ff03 	bl	8000cc4 <SystemInit>
 8000ebe:	f006 ffa5 	bl	8007e0c <__libc_init_array>
 8000ec2:	f7ff f9a9 	bl	8000218 <main>

08000ec6 <LoopForever>:
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
 8000ec8:	20008000 	.word	0x20008000
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	20000180 	.word	0x20000180
 8000ed4:	08007edc 	.word	0x08007edc
 8000ed8:	20000180 	.word	0x20000180
 8000edc:	20001b80 	.word	0x20001b80

08000ee0 <ADC1_2_IRQHandler>:
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f939 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fcaa 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]

}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_InitTick+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d022      	beq.n	8000f6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_InitTick+0x68>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f944 	bl	80011ca <HAL_SYSTICK_Config>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d10f      	bne.n	8000f68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b0f      	cmp	r3, #15
 8000f4c:	d809      	bhi.n	8000f62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f56:	f000 f910 	bl	800117a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_InitTick+0x70>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e007      	b.n	8000f72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e004      	b.n	8000f72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e001      	b.n	8000f72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f98:	6013      	str	r3, [r2, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000c74 	.word	0x20000c74
 8000fa8:	20000008 	.word	0x20000008

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000c74 	.word	0x20000c74

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff40 	bl	800100c <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff90 	bl	80010b8 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5f 	bl	8001064 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff33 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa4 	bl	8001120 <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e08d      	b.n	8001312 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b47      	ldr	r3, [pc, #284]	; (800131c <HAL_DMA_Init+0x138>)
 80011fe:	429a      	cmp	r2, r3
 8001200:	d80f      	bhi.n	8001222 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_DMA_Init+0x13c>)
 800120a:	4413      	add	r3, r2
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_DMA_Init+0x140>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a42      	ldr	r2, [pc, #264]	; (8001328 <HAL_DMA_Init+0x144>)
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
 8001220:	e00e      	b.n	8001240 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	4b40      	ldr	r3, [pc, #256]	; (800132c <HAL_DMA_Init+0x148>)
 800122a:	4413      	add	r3, r2
 800122c:	4a3d      	ldr	r2, [pc, #244]	; (8001324 <HAL_DMA_Init+0x140>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a3c      	ldr	r2, [pc, #240]	; (8001330 <HAL_DMA_Init+0x14c>)
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800125a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f9b6 	bl	8001604 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012a0:	d102      	bne.n	80012a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <HAL_DMA_Init+0x104>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d80c      	bhi.n	80012e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f9d6 	bl	8001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	e008      	b.n	80012fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40020407 	.word	0x40020407
 8001320:	bffdfff8 	.word	0xbffdfff8
 8001324:	cccccccd 	.word	0xcccccccd
 8001328:	40020000 	.word	0x40020000
 800132c:	bffdfbf8 	.word	0xbffdfbf8
 8001330:	40020400 	.word	0x40020400

08001334 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_DMA_Start_IT+0x20>
 8001350:	2302      	movs	r3, #2
 8001352:	e066      	b.n	8001422 <HAL_DMA_Start_IT+0xee>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d155      	bne.n	8001414 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f8fb 	bl	8001588 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	2b00      	cmp	r3, #0
 8001398:	d008      	beq.n	80013ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 020e 	orr.w	r2, r2, #14
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e00f      	b.n	80013cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 020a 	orr.w	r2, r2, #10
 80013ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001400:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e005      	b.n	8001420 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001420:	7dfb      	ldrb	r3, [r7, #23]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f003 031f 	and.w	r3, r3, #31
 800144a:	2204      	movs	r2, #4
 800144c:	409a      	lsls	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d026      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x7a>
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d107      	bne.n	800147e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0204 	bic.w	r2, r2, #4
 800147c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 021f 	and.w	r2, r3, #31
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2104      	movs	r1, #4
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	2b00      	cmp	r3, #0
 8001498:	d071      	beq.n	800157e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014a2:	e06c      	b.n	800157e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2202      	movs	r2, #2
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02e      	beq.n	8001516 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d029      	beq.n	8001516 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10b      	bne.n	80014e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020a 	bic.w	r2, r2, #10
 80014de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2102      	movs	r1, #2
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d038      	beq.n	800157e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001514:	e033      	b.n	800157e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	2208      	movs	r2, #8
 8001520:	409a      	lsls	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d02a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d025      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 020e 	bic.w	r2, r2, #14
 8001542:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	2101      	movs	r1, #1
 8001552:	fa01 f202 	lsl.w	r2, r1, r2
 8001556:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800157e:	bf00      	nop
 8001580:	bf00      	nop
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800159e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 021f 	and.w	r2, r3, #31
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	2101      	movs	r1, #1
 80015c0:	fa01 f202 	lsl.w	r2, r1, r2
 80015c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d108      	bne.n	80015e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015e6:	e007      	b.n	80015f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001614:	429a      	cmp	r2, r3
 8001616:	d802      	bhi.n	800161e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e001      	b.n	8001622 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001620:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3b08      	subs	r3, #8
 800162e:	4a12      	ldr	r2, [pc, #72]	; (8001678 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	009a      	lsls	r2, r3, #2
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800164e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	2201      	movs	r2, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800165e:	bf00      	nop
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40020407 	.word	0x40020407
 8001670:	40020800 	.word	0x40020800
 8001674:	40020820 	.word	0x40020820
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	40020880 	.word	0x40020880

08001680 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2201      	movs	r2, #1
 80016ae:	409a      	lsls	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	1000823f 	.word	0x1000823f
 80016c4:	40020940 	.word	0x40020940

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016d6:	e15a      	b.n	800198e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 814c 	beq.w	8001988 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00b      	beq.n	8001710 <HAL_GPIO_Init+0x48>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001704:	2b11      	cmp	r3, #17
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b12      	cmp	r3, #18
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0xea>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	6939      	ldr	r1, [r7, #16]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0203 	and.w	r2, r3, #3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80a6 	beq.w	8001988 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 800183e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001840:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6613      	str	r3, [r2, #96]	; 0x60
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_GPIO_Init+0x2e4>)
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001854:	4a56      	ldr	r2, [pc, #344]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187e:	d01f      	beq.n	80018c0 <HAL_GPIO_Init+0x1f8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a4c      	ldr	r2, [pc, #304]	; (80019b4 <HAL_GPIO_Init+0x2ec>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d019      	beq.n	80018bc <HAL_GPIO_Init+0x1f4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_GPIO_Init+0x2f0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d013      	beq.n	80018b8 <HAL_GPIO_Init+0x1f0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_GPIO_Init+0x2f4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00d      	beq.n	80018b4 <HAL_GPIO_Init+0x1ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_GPIO_Init+0x2f8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_GPIO_Init+0x1e8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2fc>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_Init+0x1e4>
 80018a8:	2305      	movs	r3, #5
 80018aa:	e00a      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018ac:	2306      	movs	r3, #6
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1fa>
 80018c0:	2300      	movs	r3, #0
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2e8>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_GPIO_Init+0x300>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001904:	4a30      	ldr	r2, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x300>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x300>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_GPIO_Init+0x300>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f ae9d 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	48001000 	.word	0x48001000
 80019c4:	48001400 	.word	0x48001400
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	b08b      	sub	sp, #44	; 0x2c
 8001a00:	af06      	add	r7, sp, #24
 8001a02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0ad      	b.n	8001b6a <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f005 feea 	bl	80077fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f88e 	bl	8004b56 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
 8001a3e:	e035      	b.n	8001aac <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	015b      	lsls	r3, r3, #5
 8001a46:	4413      	add	r3, r2
 8001a48:	3329      	adds	r3, #41	; 0x29
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	4413      	add	r3, r2
 8001a56:	3328      	adds	r3, #40	; 0x28
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	b291      	uxth	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	4413      	add	r3, r2
 8001a68:	3336      	adds	r3, #54	; 0x36
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	4413      	add	r3, r2
 8001a76:	332b      	adds	r3, #43	; 0x2b
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	4413      	add	r3, r2
 8001a84:	3338      	adds	r3, #56	; 0x38
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	4413      	add	r3, r2
 8001a92:	333c      	adds	r3, #60	; 0x3c
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	015b      	lsls	r3, r3, #5
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d3c4      	bcc.n	8001a40 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e031      	b.n	8001b20 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	015b      	lsls	r3, r3, #5
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	015b      	lsls	r3, r3, #5
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	015b      	lsls	r3, r3, #5
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	015b      	lsls	r3, r3, #5
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	330a      	adds	r3, #10
 8001b12:	015b      	lsls	r3, r3, #5
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3c8      	bcc.n	8001abc <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	687e      	ldr	r6, [r7, #4]
 8001b32:	466d      	mov	r5, sp
 8001b34:	f106 0410 	add.w	r4, r6, #16
 8001b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	602b      	str	r3, [r5, #0]
 8001b40:	1d33      	adds	r3, r6, #4
 8001b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f003 f821 	bl	8004b8c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fe35 	bl	80027d2 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_PCD_Start+0x16>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e012      	b.n	8001bae <HAL_PCD_Start+0x3c>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f845 	bl	8005c24 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 ffc0 	bl	8004b24 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 f845 	bl	8005c52 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb33 	bl	8002240 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 f837 	bl	8005c52 <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d112      	bne.n	8001c16 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	b292      	uxth	r2, r2
 8001c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f005 fe8e 	bl	800792a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f91e 	bl	8001e52 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 f819 	bl	8005c52 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c2a:	d10b      	bne.n	8001c44 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 f802 	bl	8005c52 <USB_ReadInterrupts>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c58:	d10b      	bne.n	8001c72 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 ffeb 	bl	8005c52 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c86:	d133      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0204 	bic.w	r2, r2, #4
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0208 	bic.w	r2, r2, #8
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f006 f81d 	bl	8007d0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f005 fe62 	bl	800799c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cea:	b292      	uxth	r2, r2
 8001cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 ffac 	bl	8005c52 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d04:	d126      	bne.n	8001d54 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0208 	orr.w	r2, r2, #8
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d30:	b292      	uxth	r2, r2
 8001d32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0204 	orr.w	r2, r2, #4
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f005 fe0a 	bl	8007968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 ff7a 	bl	8005c52 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d13f      	bne.n	8001de8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d12b      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0204 	orr.w	r2, r2, #4
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0208 	orr.w	r2, r2, #8
 8001db4:	b292      	uxth	r2, r2
 8001db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f005 ff96 	bl	8007d0c <HAL_PCDEx_LPM_Callback>
 8001de0:	e002      	b.n	8001de8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f005 fdc0 	bl	8007968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 ff30 	bl	8005c52 <USB_ReadInterrupts>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfc:	d10e      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e10:	b292      	uxth	r2, r2
 8001e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f005 fd79 	bl	800790e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 ff16 	bl	8005c52 <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e30:	d10b      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e44:	b292      	uxth	r2, r2
 8001e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_PCD_SetAddress+0x1a>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e013      	b.n	8001e94 <HAL_PCD_SetAddress+0x42>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 feb9 	bl	8005bfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	70fb      	strb	r3, [r7, #3]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	803b      	strh	r3, [r7, #0]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	da0b      	bge.n	8001eda <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	3328      	adds	r3, #40	; 0x28
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	705a      	strb	r2, [r3, #1]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	015b      	lsls	r3, r3, #5
 8001ee2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001efe:	883a      	ldrh	r2, [r7, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	78ba      	ldrb	r2, [r7, #2]
 8001f08:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f1c:	78bb      	ldrb	r3, [r7, #2]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d102      	bne.n	8001f28 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_PCD_EP_Open+0x9a>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e00e      	b.n	8001f54 <HAL_PCD_EP_Open+0xb8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68f9      	ldr	r1, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fe45 	bl	8004bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da0b      	bge.n	8001f88 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	015b      	lsls	r3, r3, #5
 8001f78:	3328      	adds	r3, #40	; 0x28
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	705a      	strb	r2, [r3, #1]
 8001f86:	e00b      	b.n	8001fa0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_PCD_EP_Close+0x5e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e00e      	b.n	8001fd8 <HAL_PCD_EP_Close+0x7c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 f8f3 	bl	80051b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	015b      	lsls	r3, r3, #5
 8001ff8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	b2da      	uxtb	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6979      	ldr	r1, [r7, #20]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fa52 	bl	80054e0 <USB_EPStartXfer>
 800203c:	e005      	b.n	800204a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6979      	ldr	r1, [r7, #20]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 fa4b 	bl	80054e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	330a      	adds	r3, #10
 800206a:	015b      	lsls	r3, r3, #5
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	681b      	ldr	r3, [r3, #0]
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	460b      	mov	r3, r1
 800208c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	3328      	adds	r3, #40	; 0x28
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2201      	movs	r2, #1
 80020b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020c2:	7afb      	ldrb	r3, [r7, #11]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fa04 	bl	80054e0 <USB_EPStartXfer>
 80020d8:	e005      	b.n	80020e6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 f9fd 	bl	80054e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 0207 	and.w	r2, r3, #7
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d901      	bls.n	800210e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e046      	b.n	800219c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800210e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	da0b      	bge.n	800212e <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	3328      	adds	r3, #40	; 0x28
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	705a      	strb	r2, [r3, #1]
 800212c:	e009      	b.n	8002142 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	015b      	lsls	r3, r3, #5
 8002132:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_PCD_EP_SetStall+0x72>
 800215e:	2302      	movs	r3, #2
 8002160:	e01c      	b.n	800219c <HAL_PCD_EP_SetStall+0xac>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fc6d 	bl	8005a50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f003 fd70 	bl	8005c72 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 020f 	and.w	r2, r3, #15
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d901      	bls.n	80021c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e03a      	b.n	8002238 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da0b      	bge.n	80021e2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	3328      	adds	r3, #40	; 0x28
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	705a      	strb	r2, [r3, #1]
 80021e0:	e00b      	b.n	80021fa <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	015b      	lsls	r3, r3, #5
 80021ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_ClrStall+0x76>
 8002216:	2302      	movs	r3, #2
 8002218:	e00e      	b.n	8002238 <HAL_PCD_EP_ClrStall+0x94>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fc53 	bl	8005ad4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002248:	e274      	b.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002252:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800225e:	7d7b      	ldrb	r3, [r7, #21]
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 813c 	bne.w	80024de <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002266:	8afb      	ldrh	r3, [r7, #22]
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d14f      	bne.n	8002310 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	b29c      	uxth	r4, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800228a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228e:	b29b      	uxth	r3, r3
 8002290:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3328      	adds	r3, #40	; 0x28
 8002296:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	441a      	add	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f005 fb05 	bl	80078e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8228 	beq.w	8002734 <PCD_EP_ISR_Handler+0x4f4>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 8223 	bne.w	8002734 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b292      	uxth	r2, r2
 8002302:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800230e:	e211      	b.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002316:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002320:	8a7b      	ldrh	r3, [r7, #18]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d031      	beq.n	800238e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	4413      	add	r3, r2
 8002344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002364:	b29b      	uxth	r3, r3
 8002366:	f003 fcd1 	bl	8005d0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29a      	uxth	r2, r3
 8002372:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002376:	4013      	ands	r3, r2
 8002378:	b29c      	uxth	r4, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002382:	b292      	uxth	r2, r2
 8002384:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f005 fa80 	bl	800788c <HAL_PCD_SetupStageCallback>
 800238c:	e1d2      	b.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800238e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f280 81ce 	bge.w	8002734 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023a4:	4013      	ands	r3, r2
 80023a6:	b29c      	uxth	r4, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80023b0:	b292      	uxth	r2, r2
 80023b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1d8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6959      	ldr	r1, [r3, #20]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f003 fc85 	bl	8005d0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	441a      	add	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fa4c 	bl	80078b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461c      	mov	r4, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	441c      	add	r4, r3
 800242a:	f204 4306 	addw	r3, r4, #1030	; 0x406
 800242e:	461c      	mov	r4, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10e      	bne.n	8002456 <PCD_EP_ISR_Handler+0x216>
 8002438:	8823      	ldrh	r3, [r4, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002440:	b29b      	uxth	r3, r3
 8002442:	8023      	strh	r3, [r4, #0]
 8002444:	8823      	ldrh	r3, [r4, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002450:	b29b      	uxth	r3, r3
 8002452:	8023      	strh	r3, [r4, #0]
 8002454:	e02d      	b.n	80024b2 <PCD_EP_ISR_Handler+0x272>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b3e      	cmp	r3, #62	; 0x3e
 800245c:	d812      	bhi.n	8002484 <PCD_EP_ISR_Handler+0x244>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <PCD_EP_ISR_Handler+0x238>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3301      	adds	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	b29b      	uxth	r3, r3
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	b29b      	uxth	r3, r3
 8002480:	8023      	strh	r3, [r4, #0]
 8002482:	e016      	b.n	80024b2 <PCD_EP_ISR_Handler+0x272>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <PCD_EP_ISR_Handler+0x25e>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3b01      	subs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	b29c      	uxth	r4, r3
 80024c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80024c8:	b29c      	uxth	r4, r3
 80024ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80024ce:	b29c      	uxth	r4, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <PCD_EP_ISR_Handler+0x510>)
 80024d6:	4323      	orrs	r3, r4
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]
 80024dc:	e12a      	b.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	7d7b      	ldrb	r3, [r7, #21]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f280 80cb 	bge.w	800268e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	7d7b      	ldrb	r3, [r7, #21]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
 8002508:	f640 738f 	movw	r3, #3983	; 0xf8f
 800250c:	4013      	ands	r3, r2
 800250e:	b29c      	uxth	r4, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	7d7b      	ldrb	r3, [r7, #21]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002520:	b292      	uxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002524:	7d7b      	ldrb	r3, [r7, #21]
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	7b1b      	ldrb	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11f      	bne.n	800257a <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4413      	add	r3, r2
 8002554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002560:	8bfb      	ldrh	r3, [r7, #30]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d06e      	beq.n	8002644 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6959      	ldr	r1, [r3, #20]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	88da      	ldrh	r2, [r3, #6]
 8002572:	8bfb      	ldrh	r3, [r7, #30]
 8002574:	f003 fbca 	bl	8005d0c <USB_ReadPMA>
 8002578:	e064      	b.n	8002644 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002594:	b29c      	uxth	r4, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	4b6b      	ldr	r3, [pc, #428]	; (8002754 <PCD_EP_ISR_Handler+0x514>)
 80025a6:	4323      	orrs	r3, r4
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01f      	beq.n	8002606 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ea:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025ec:	8bfb      	ldrh	r3, [r7, #30]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d028      	beq.n	8002644 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6959      	ldr	r1, [r3, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	891a      	ldrh	r2, [r3, #8]
 80025fe:	8bfb      	ldrh	r3, [r7, #30]
 8002600:	f003 fb84 	bl	8005d0c <USB_ReadPMA>
 8002604:	e01e      	b.n	8002644 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800262c:	8bfb      	ldrh	r3, [r7, #30]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6959      	ldr	r1, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	895a      	ldrh	r2, [r3, #10]
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	f003 fb64 	bl	8005d0c <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	8bfb      	ldrh	r3, [r7, #30]
 800264a:	441a      	add	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	8bfb      	ldrh	r3, [r7, #30]
 8002656:	441a      	add	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <PCD_EP_ISR_Handler+0x42e>
 8002664:	8bfa      	ldrh	r2, [r7, #30]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d206      	bcs.n	800267c <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f005 f91b 	bl	80078b0 <HAL_PCD_DataOutStageCallback>
 800267a:	e008      	b.n	800268e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	7819      	ldrb	r1, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fca9 	bl	8001fe0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800268e:	8a7b      	ldrh	r3, [r7, #18]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d04d      	beq.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002698:	7d7b      	ldrb	r3, [r7, #21]
 800269a:	015b      	lsls	r3, r3, #5
 800269c:	3328      	adds	r3, #40	; 0x28
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	7d7b      	ldrb	r3, [r7, #21]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026bc:	b29c      	uxth	r4, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	7d7b      	ldrb	r3, [r7, #21]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	441a      	add	r2, r3
 80026ca:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	695a      	ldr	r2, [r3, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	441a      	add	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f005 f8e0 	bl	80078e0 <HAL_PCD_DataInStageCallback>
 8002720:	e008      	b.n	8002734 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	7819      	ldrb	r1, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff fca5 	bl	800207e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273c:	b29b      	uxth	r3, r3
 800273e:	b21b      	sxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	f6ff ad82 	blt.w	800224a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3724      	adds	r7, #36	; 0x24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	ffff8080 	.word	0xffff8080
 8002754:	ffff80c0 	.word	0xffff80c0

08002758 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	4613      	mov	r3, r2
 8002768:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800276a:	897b      	ldrh	r3, [r7, #10]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	015b      	lsls	r3, r3, #5
 800277e:	3328      	adds	r3, #40	; 0x28
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e006      	b.n	8002796 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002788:	897b      	ldrh	r3, [r7, #10]
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002796:	893b      	ldrh	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	80da      	strh	r2, [r3, #6]
 80027aa:	e00b      	b.n	80027c4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2201      	movs	r2, #1
 80027b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	b29a      	uxth	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800280a:	b29b      	uxth	r3, r3
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d141      	bne.n	80028ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002836:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800283e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002842:	d131      	bne.n	80028a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284a:	4a46      	ldr	r2, [pc, #280]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800285c:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002864:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2232      	movs	r2, #50	; 0x32
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	4a3f      	ldr	r2, [pc, #252]	; (800296c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287a:	e002      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3b01      	subs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288e:	d102      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f2      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002896:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d158      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e057      	b.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ae:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80028b8:	e04d      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c0:	d141      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ce:	d131      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d6:	4a23      	ldr	r2, [pc, #140]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2232      	movs	r2, #50	; 0x32
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	0c9b      	lsrs	r3, r3, #18
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002906:	e002      	b.n	800290e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3b01      	subs	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d102      	bne.n	8002922 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f2      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d112      	bne.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e011      	b.n	8002958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002944:	e007      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002954:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40007000 	.word	0x40007000
 8002968:	20000000 	.word	0x20000000
 800296c:	431bde83 	.word	0x431bde83

08002970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e308      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d075      	beq.n	8002a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4ba3      	ldr	r3, [pc, #652]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002998:	4ba0      	ldr	r3, [pc, #640]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0x3e>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_OscConfig+0x44>
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10b      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b99      	ldr	r3, [pc, #612]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <HAL_RCC_OscConfig+0x108>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d157      	bne.n	8002a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e2e3      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x74>
 80029d6:	4b91      	ldr	r3, [pc, #580]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a90      	ldr	r2, [pc, #576]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x98>
 80029ee:	4b8b      	ldr	r3, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a8a      	ldr	r2, [pc, #552]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a87      	ldr	r2, [pc, #540]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 8002a08:	4b84      	ldr	r3, [pc, #528]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a83      	ldr	r2, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fac0 	bl	8000fac <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fabc 	bl	8000fac <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e2a8      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xc0>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe faac 	bl	8000fac <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe faa8 	bl	8000fac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e294      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0xe8>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d075      	beq.n	8002b72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a86:	4b65      	ldr	r3, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a90:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d102      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x136>
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_OscConfig+0x13c>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11f      	bne.n	8002aec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x154>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e267      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ad8:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_RCC_OscConfig+0x2b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fa19 	bl	8000f14 <HAL_InitTick>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d043      	beq.n	8002b70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e253      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d023      	beq.n	8002b3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fa54 	bl	8000fac <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fa50 	bl	8000fac <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e23c      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1a:	4b40      	ldr	r3, [pc, #256]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
 8002b3a:	e01a      	b.n	8002b72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3c:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a36      	ldr	r2, [pc, #216]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fa30 	bl	8000fac <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b50:	f7fe fa2c 	bl	8000fac <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e218      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x1e0>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe fa09 	bl	8000fac <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fa05 	bl	8000fac <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1f1      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0ef      	beq.n	8002b9e <HAL_RCC_OscConfig+0x22e>
 8002bbe:	e01b      	b.n	8002bf8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe f9ec 	bl	8000fac <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd8:	f7fe f9e8 	bl	8000fac <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1d4      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ab 	beq.w	8002d5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2b4>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e005      	b.n	8002c26 <HAL_RCC_OscConfig+0x2b6>
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	20000004 	.word	0x20000004
 8002c24:	2300      	movs	r3, #0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4baf      	ldr	r3, [pc, #700]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	4aae      	ldr	r2, [pc, #696]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
 8002c36:	4bac      	ldr	r3, [pc, #688]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4ba9      	ldr	r3, [pc, #676]	; (8002eec <HAL_RCC_OscConfig+0x57c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d118      	bne.n	8002c84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c52:	4ba6      	ldr	r3, [pc, #664]	; (8002eec <HAL_RCC_OscConfig+0x57c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4aa5      	ldr	r2, [pc, #660]	; (8002eec <HAL_RCC_OscConfig+0x57c>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f9a5 	bl	8000fac <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe f9a1 	bl	8000fac <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e18d      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c78:	4b9c      	ldr	r3, [pc, #624]	; (8002eec <HAL_RCC_OscConfig+0x57c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_RCC_OscConfig+0x32e>
 8002c8c:	4b96      	ldr	r3, [pc, #600]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a95      	ldr	r2, [pc, #596]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	e024      	b.n	8002ce8 <HAL_RCC_OscConfig+0x378>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d110      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x358>
 8002ca6:	4b90      	ldr	r3, [pc, #576]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	4a8e      	ldr	r2, [pc, #568]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb6:	4b8c      	ldr	r3, [pc, #560]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x378>
 8002cc8:	4b87      	ldr	r3, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a86      	ldr	r2, [pc, #536]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd8:	4b83      	ldr	r3, [pc, #524]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	4a82      	ldr	r2, [pc, #520]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	f023 0304 	bic.w	r3, r3, #4
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d016      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f95c 	bl	8000fac <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f958 	bl	8000fac <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e142      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ed      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x388>
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f945 	bl	8000fac <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fe f941 	bl	8000fac <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e12b      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ed      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4a64      	ldr	r2, [pc, #400]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01c      	beq.n	8002daa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d70:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d76:	4a5c      	ldr	r2, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe f914 	bl	8000fac <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d88:	f7fe f910 	bl	8000fac <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0fc      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d9a:	4b53      	ldr	r3, [pc, #332]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCC_OscConfig+0x418>
 8002da8:	e01b      	b.n	8002de2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002daa:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db0:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe f8f7 	bl	8000fac <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc2:	f7fe f8f3 	bl	8000fac <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0df      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd4:	4b44      	ldr	r3, [pc, #272]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 80d3 	beq.w	8002f92 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dec:	4b3e      	ldr	r3, [pc, #248]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	f000 808d 	beq.w	8002f14 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d15a      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b39      	ldr	r3, [pc, #228]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a38      	ldr	r2, [pc, #224]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe f8cd 	bl	8000fac <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe f8c9 	bl	8000fac <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0b5      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_OscConfig+0x580>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6a11      	ldr	r1, [r2, #32]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e4e:	0212      	lsls	r2, r2, #8
 8002e50:	4311      	orrs	r1, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e56:	0852      	lsrs	r2, r2, #1
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	0552      	lsls	r2, r2, #21
 8002e5c:	4311      	orrs	r1, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0652      	lsls	r2, r2, #25
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e6e:	06d2      	lsls	r2, r2, #27
 8002e70:	430a      	orrs	r2, r1
 8002e72:	491d      	ldr	r1, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f88c 	bl	8000fac <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f888 	bl	8000fac <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e074      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x528>
 8002eb6:	e06c      	b.n	8002f92 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f864 	bl	8000fac <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	e00e      	b.n	8002f06 <HAL_RCC_OscConfig+0x596>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe f85a 	bl	8000fac <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e046      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f06:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x62c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x584>
 8002f12:	e03e      	b.n	8002f92 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e039      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <HAL_RCC_OscConfig+0x62c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d12c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d123      	bne.n	8002f8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d11b      	bne.n	8002f8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d113      	bne.n	8002f8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	3b01      	subs	r3, #1
 8002f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	3b01      	subs	r3, #1
 8002f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d001      	beq.n	8002f92 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e11e      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b91      	ldr	r3, [pc, #580]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d910      	bls.n	8002fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b8e      	ldr	r3, [pc, #568]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	498c      	ldr	r1, [pc, #560]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b8a      	ldr	r3, [pc, #552]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e106      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d073      	beq.n	80030dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d129      	bne.n	8003050 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0f4      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800300c:	f000 f964 	bl	80032d8 <RCC_GetSysClockFreqFromPLLSource>
 8003010:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4a7c      	ldr	r2, [pc, #496]	; (8003208 <HAL_RCC_ClockConfig+0x268>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d93f      	bls.n	800309a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800301a:	4b7a      	ldr	r3, [pc, #488]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800302e:	2b00      	cmp	r3, #0
 8003030:	d033      	beq.n	800309a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003036:	2b00      	cmp	r3, #0
 8003038:	d12f      	bne.n	800309a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003042:	4a70      	ldr	r2, [pc, #448]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003048:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e024      	b.n	800309a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d107      	bne.n	8003068 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003058:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0c6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0be      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003078:	f000 f8ce 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800307c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4a61      	ldr	r2, [pc, #388]	; (8003208 <HAL_RCC_ClockConfig+0x268>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d909      	bls.n	800309a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308e:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8003090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003094:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800309a:	4b5a      	ldr	r3, [pc, #360]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 0203 	bic.w	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4957      	ldr	r1, [pc, #348]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fd ff7e 	bl	8000fac <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b4:	f7fd ff7a 	bl	8000fac <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e095      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	4b4e      	ldr	r3, [pc, #312]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 020c 	and.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	429a      	cmp	r2, r3
 80030da:	d1eb      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d023      	beq.n	8003130 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a42      	ldr	r2, [pc, #264]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800310c:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003114:	4a3b      	ldr	r2, [pc, #236]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8003116:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800311a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4936      	ldr	r1, [pc, #216]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
 800312e:	e008      	b.n	8003142 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d105      	bne.n	8003142 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4a32      	ldr	r2, [pc, #200]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800313c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003140:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d21d      	bcs.n	800318c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 020f 	bic.w	r2, r3, #15
 8003158:	4929      	ldr	r1, [pc, #164]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003160:	f7fd ff24 	bl	8000fac <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fd ff20 	bl	8000fac <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e03b      	b.n	80031f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_ClockConfig+0x260>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d1ed      	bne.n	8003168 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4917      	ldr	r1, [pc, #92]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490f      	ldr	r1, [pc, #60]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ca:	f000 f825 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_ClockConfig+0x264>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_RCC_ClockConfig+0x26c>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x270>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fe90 	bl	8000f14 <HAL_InitTick>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40022000 	.word	0x40022000
 8003204:	40021000 	.word	0x40021000
 8003208:	04c4b400 	.word	0x04c4b400
 800320c:	08007ec4 	.word	0x08007ec4
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b04      	cmp	r3, #4
 8003228:	d102      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800322a:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	e047      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d102      	bne.n	8003242 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e03e      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003242:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d136      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3301      	adds	r3, #1
 8003264:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003276:	68d2      	ldr	r2, [r2, #12]
 8003278:	0a12      	lsrs	r2, r2, #8
 800327a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	617b      	str	r3, [r7, #20]
      break;
 8003284:	e00c      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	fbb2 f3f3 	udiv	r3, r2, r3
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	0a12      	lsrs	r2, r2, #8
 8003294:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	617b      	str	r3, [r7, #20]
      break;
 800329e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	0e5b      	lsrs	r3, r3, #25
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	3301      	adds	r3, #1
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	e001      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032c0:	693b      	ldr	r3, [r7, #16]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d10c      	bne.n	8003316 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003306:	68d2      	ldr	r2, [r2, #12]
 8003308:	0a12      	lsrs	r2, r2, #8
 800330a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	617b      	str	r3, [r7, #20]
    break;
 8003314:	e00c      	b.n	8003330 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003316:	4a11      	ldr	r2, [pc, #68]	; (800335c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	0a12      	lsrs	r2, r2, #8
 8003324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    break;
 800332e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0e5b      	lsrs	r3, r3, #25
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	3301      	adds	r3, #1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800334a:	687b      	ldr	r3, [r7, #4]
}
 800334c:	4618      	mov	r0, r3
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000
 800335c:	00f42400 	.word	0x00f42400

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003368:	2300      	movs	r3, #0
 800336a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800336c:	2300      	movs	r3, #0
 800336e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8098 	beq.w	80034ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003382:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10d      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	4b40      	ldr	r3, [pc, #256]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	4a3f      	ldr	r2, [pc, #252]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6593      	str	r3, [r2, #88]	; 0x58
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033aa:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a39      	ldr	r2, [pc, #228]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b6:	f7fd fdf9 	bl	8000fac <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033bc:	e009      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fd fdf5 	bl	8000fac <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d902      	bls.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	74fb      	strb	r3, [r7, #19]
        break;
 80033d0:	e005      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ef      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d159      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033e4:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01e      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d019      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003400:	4b23      	ldr	r3, [pc, #140]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800340e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fdb5 	bl	8000fac <HAL_GetTick>
 8003442:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003444:	e00b      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fd fdb1 	bl	8000fac <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d902      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	74fb      	strb	r3, [r7, #19]
            break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ec      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10b      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003488:	e008      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	74bb      	strb	r3, [r7, #18]
 800348e:	e005      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349c:	7c7b      	ldrb	r3, [r7, #17]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4ba6      	ldr	r3, [pc, #664]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	4aa5      	ldr	r2, [pc, #660]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ba:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f023 0203 	bic.w	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	499c      	ldr	r1, [pc, #624]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034dc:	4b97      	ldr	r3, [pc, #604]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 020c 	bic.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4994      	ldr	r1, [pc, #592]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034fe:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	498b      	ldr	r1, [pc, #556]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003520:	4b86      	ldr	r3, [pc, #536]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	4983      	ldr	r1, [pc, #524]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003542:	4b7e      	ldr	r3, [pc, #504]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	497a      	ldr	r1, [pc, #488]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003564:	4b75      	ldr	r3, [pc, #468]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	4972      	ldr	r1, [pc, #456]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003586:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4969      	ldr	r1, [pc, #420]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035a8:	4b64      	ldr	r3, [pc, #400]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4961      	ldr	r1, [pc, #388]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ca:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	4958      	ldr	r1, [pc, #352]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	4950      	ldr	r1, [pc, #320]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d105      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003624:	4b45      	ldr	r3, [pc, #276]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	4942      	ldr	r1, [pc, #264]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d105      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003644:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800364a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800364e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800367a:	d105      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367c:	4b2f      	ldr	r3, [pc, #188]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a2e      	ldr	r2, [pc, #184]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003686:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	4926      	ldr	r1, [pc, #152]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b2:	d105      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d015      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	4918      	ldr	r1, [pc, #96]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ea:	d105      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d015      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	490a      	ldr	r1, [pc, #40]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d105      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003730:	7cbb      	ldrb	r3, [r7, #18]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000

08003740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e084      	b.n	800385c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fd f899 	bl	80008a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003792:	d902      	bls.n	800379a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e002      	b.n	80037a0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80037a8:	d007      	beq.n	80037ba <HAL_SPI_Init+0x7a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ca:	d903      	bls.n	80037d4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
 80037d2:	e002      	b.n	80037da <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0204 	and.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	ea42 0103 	orr.w	r1, r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69da      	ldr	r2, [r3, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e049      	b.n	800390a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd f914 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 fc70 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e049      	b.n	80039b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fd f873 	bl	8000a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f000 fc19 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_TIM_PWM_Start_DMA+0x28>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e03c      	b.n	8003a62 <HAL_TIM_PWM_Start_DMA+0xa2>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d109      	bne.n	8003a02 <HAL_TIM_PWM_Start_DMA+0x42>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	e02f      	b.n	8003a62 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d109      	bne.n	8003a1c <HAL_TIM_PWM_Start_DMA+0x5c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e022      	b.n	8003a62 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d109      	bne.n	8003a36 <HAL_TIM_PWM_Start_DMA+0x76>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e015      	b.n	8003a62 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start_DMA+0x90>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e008      	b.n	8003a62 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	e178      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e03c      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x13e>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d109      	bne.n	8003a9e <HAL_TIM_PWM_Start_DMA+0xde>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e02f      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x13e>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d109      	bne.n	8003ab8 <HAL_TIM_PWM_Start_DMA+0xf8>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	e022      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x13e>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d109      	bne.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x112>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e015      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x13e>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start_DMA+0x12c>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e008      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x13e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d034      	beq.n	8003b6c <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_PWM_Start_DMA+0x152>
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e124      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_PWM_Start_DMA+0x162>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	e026      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start_DMA+0x172>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b30:	e01e      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d104      	bne.n	8003b42 <HAL_TIM_PWM_Start_DMA+0x182>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b40:	e016      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_PWM_Start_DMA+0x192>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b50:	e00e      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b60:	e006      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b6a:	e001      	b.n	8003b70 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0f5      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b0c      	cmp	r3, #12
 8003b74:	f200 80ae 	bhi.w	8003cd4 <HAL_TIM_PWM_Start_DMA+0x314>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bb5 	.word	0x08003bb5
 8003b84:	08003cd5 	.word	0x08003cd5
 8003b88:	08003cd5 	.word	0x08003cd5
 8003b8c:	08003cd5 	.word	0x08003cd5
 8003b90:	08003bfd 	.word	0x08003bfd
 8003b94:	08003cd5 	.word	0x08003cd5
 8003b98:	08003cd5 	.word	0x08003cd5
 8003b9c:	08003cd5 	.word	0x08003cd5
 8003ba0:	08003c45 	.word	0x08003c45
 8003ba4:	08003cd5 	.word	0x08003cd5
 8003ba8:	08003cd5 	.word	0x08003cd5
 8003bac:	08003cd5 	.word	0x08003cd5
 8003bb0:	08003c8d 	.word	0x08003c8d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	4a69      	ldr	r2, [pc, #420]	; (8003d68 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	4a68      	ldr	r2, [pc, #416]	; (8003d6c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003bca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3334      	adds	r3, #52	; 0x34
 8003bd8:	461a      	mov	r2, r3
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	f7fd fbaa 	bl	8001334 <HAL_DMA_Start_IT>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0b8      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	60da      	str	r2, [r3, #12]
      break;
 8003bfa:	e06c      	b.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	4a58      	ldr	r2, [pc, #352]	; (8003d64 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	4a56      	ldr	r2, [pc, #344]	; (8003d6c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003c12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3338      	adds	r3, #56	; 0x38
 8003c20:	461a      	mov	r2, r3
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	f7fd fb86 	bl	8001334 <HAL_DMA_Start_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e094      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c40:	60da      	str	r2, [r3, #12]
      break;
 8003c42:	e048      	b.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4a46      	ldr	r2, [pc, #280]	; (8003d64 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a45      	ldr	r2, [pc, #276]	; (8003d68 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003c5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	333c      	adds	r3, #60	; 0x3c
 8003c68:	461a      	mov	r2, r3
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	f7fd fb62 	bl	8001334 <HAL_DMA_Start_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e070      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c88:	60da      	str	r2, [r3, #12]
      break;
 8003c8a:	e024      	b.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4a33      	ldr	r2, [pc, #204]	; (8003d68 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003ca2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3340      	adds	r3, #64	; 0x40
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	f7fd fb3e 	bl	8001334 <HAL_DMA_Start_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e04c      	b.n	8003d5c <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cd0:	60da      	str	r2, [r3, #12]
      break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8003cd4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fdd8 	bl	8004894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x356>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x356>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x356>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIM_PWM_Start_DMA+0x356>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x35c>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d00b      	beq.n	8003d5a <HAL_TIM_PWM_Start_DMA+0x39a>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d007      	beq.n	8003d5a <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	08004077 	.word	0x08004077
 8003d68:	0800411f 	.word	0x0800411f
 8003d6c:	08003fe5 	.word	0x08003fe5
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40013400 	.word	0x40013400
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40014400 	.word	0x40014400
 8003d80:	40014800 	.word	0x40014800
 8003d84:	00010007 	.word	0x00010007

08003d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0fd      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b14      	cmp	r3, #20
 8003dae:	f200 80f0 	bhi.w	8003f92 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003f93 	.word	0x08003f93
 8003dc0:	08003f93 	.word	0x08003f93
 8003dc4:	08003f93 	.word	0x08003f93
 8003dc8:	08003e4d 	.word	0x08003e4d
 8003dcc:	08003f93 	.word	0x08003f93
 8003dd0:	08003f93 	.word	0x08003f93
 8003dd4:	08003f93 	.word	0x08003f93
 8003dd8:	08003e8f 	.word	0x08003e8f
 8003ddc:	08003f93 	.word	0x08003f93
 8003de0:	08003f93 	.word	0x08003f93
 8003de4:	08003f93 	.word	0x08003f93
 8003de8:	08003ecf 	.word	0x08003ecf
 8003dec:	08003f93 	.word	0x08003f93
 8003df0:	08003f93 	.word	0x08003f93
 8003df4:	08003f93 	.word	0x08003f93
 8003df8:	08003f11 	.word	0x08003f11
 8003dfc:	08003f93 	.word	0x08003f93
 8003e00:	08003f93 	.word	0x08003f93
 8003e04:	08003f93 	.word	0x08003f93
 8003e08:	08003f51 	.word	0x08003f51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa48 	bl	80042a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0208 	orr.w	r2, r2, #8
 8003e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6999      	ldr	r1, [r3, #24]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	619a      	str	r2, [r3, #24]
      break;
 8003e4a:	e0a3      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fab8 	bl	80043c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6999      	ldr	r1, [r3, #24]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	021a      	lsls	r2, r3, #8
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	619a      	str	r2, [r3, #24]
      break;
 8003e8c:	e082      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fb21 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0208 	orr.w	r2, r2, #8
 8003ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0204 	bic.w	r2, r2, #4
 8003eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69d9      	ldr	r1, [r3, #28]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
      break;
 8003ecc:	e062      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fb89 	bl	80045ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	021a      	lsls	r2, r3, #8
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	61da      	str	r2, [r3, #28]
      break;
 8003f0e:	e041      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fbf2 	bl	8004700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0208 	orr.w	r2, r2, #8
 8003f2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0204 	bic.w	r2, r2, #4
 8003f3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f4e:	e021      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fc36 	bl	80047c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f7a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	021a      	lsls	r2, r3, #8
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d107      	bne.n	800400c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800400a:	e02a      	b.n	8004062 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d107      	bne.n	8004026 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2202      	movs	r2, #2
 800401a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	e01d      	b.n	8004062 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d107      	bne.n	8004040 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2204      	movs	r2, #4
 8004034:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403e:	e010      	b.n	8004062 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d107      	bne.n	800405a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2208      	movs	r2, #8
 800404e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004058:	e003      	b.n	8004062 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff ffb4 	bl	8003fd0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	771a      	strb	r2, [r3, #28]
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	429a      	cmp	r2, r3
 800408c:	d10b      	bne.n	80040a6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d136      	bne.n	800410a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	e031      	b.n	800410a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d10b      	bne.n	80040c8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2202      	movs	r2, #2
 80040b4:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d125      	bne.n	800410a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c6:	e020      	b.n	800410a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d10b      	bne.n	80040ea <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2204      	movs	r2, #4
 80040d6:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d114      	bne.n	800410a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	e00f      	b.n	800410a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10a      	bne.n	800410a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2208      	movs	r2, #8
 80040f8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7ff ff4c 	bl	8003fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	771a      	strb	r2, [r3, #28]
}
 8004116:	bf00      	nop
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d103      	bne.n	800413e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]
 800413c:	e019      	b.n	8004172 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	d103      	bne.n	8004150 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2202      	movs	r2, #2
 800414c:	771a      	strb	r2, [r3, #28]
 800414e:	e010      	b.n	8004172 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d103      	bne.n	8004162 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2204      	movs	r2, #4
 800415e:	771a      	strb	r2, [r3, #28]
 8004160:	e007      	b.n	8004172 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d102      	bne.n	8004172 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2208      	movs	r2, #8
 8004170:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff22 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	771a      	strb	r2, [r3, #28]
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3c      	ldr	r2, [pc, #240]	; (800428c <TIM_Base_SetConfig+0x104>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0x38>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a39      	ldr	r2, [pc, #228]	; (8004290 <TIM_Base_SetConfig+0x108>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0x38>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a38      	ldr	r2, [pc, #224]	; (8004294 <TIM_Base_SetConfig+0x10c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0x38>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a37      	ldr	r2, [pc, #220]	; (8004298 <TIM_Base_SetConfig+0x110>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d108      	bne.n	80041d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2d      	ldr	r2, [pc, #180]	; (800428c <TIM_Base_SetConfig+0x104>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01b      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e0:	d017      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <TIM_Base_SetConfig+0x108>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <TIM_Base_SetConfig+0x10c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00f      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a28      	ldr	r2, [pc, #160]	; (8004298 <TIM_Base_SetConfig+0x110>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00b      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a27      	ldr	r2, [pc, #156]	; (800429c <TIM_Base_SetConfig+0x114>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d108      	bne.n	8004224 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a10      	ldr	r2, [pc, #64]	; (800428c <TIM_Base_SetConfig+0x104>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0xe8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <TIM_Base_SetConfig+0x110>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0xe8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <TIM_Base_SetConfig+0x114>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0xe8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <TIM_Base_SetConfig+0x118>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0xe8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0e      	ldr	r2, [pc, #56]	; (80042a4 <TIM_Base_SetConfig+0x11c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	615a      	str	r2, [r3, #20]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40013400 	.word	0x40013400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0201 	bic.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 0302 	bic.w	r3, r3, #2
 80042f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a2c      	ldr	r2, [pc, #176]	; (80043b4 <TIM_OC1_SetConfig+0x10c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_OC1_SetConfig+0x80>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <TIM_OC1_SetConfig+0x110>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_OC1_SetConfig+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <TIM_OC1_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_OC1_SetConfig+0x80>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a29      	ldr	r2, [pc, #164]	; (80043c0 <TIM_OC1_SetConfig+0x118>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_OC1_SetConfig+0x80>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <TIM_OC1_SetConfig+0x11c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10c      	bne.n	8004342 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0308 	bic.w	r3, r3, #8
 800432e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 0304 	bic.w	r3, r3, #4
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <TIM_OC1_SetConfig+0x10c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_OC1_SetConfig+0xc2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <TIM_OC1_SetConfig+0x110>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <TIM_OC1_SetConfig+0xc2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <TIM_OC1_SetConfig+0x114>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_OC1_SetConfig+0xc2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <TIM_OC1_SetConfig+0x118>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_OC1_SetConfig+0xc2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <TIM_OC1_SetConfig+0x11c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d111      	bne.n	800438e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40013400 	.word	0x40013400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0320 	bic.w	r3, r3, #32
 8004416:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <TIM_OC2_SetConfig+0x100>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_OC2_SetConfig+0x6c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <TIM_OC2_SetConfig+0x104>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d10d      	bne.n	8004450 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800444e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <TIM_OC2_SetConfig+0x100>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00f      	beq.n	8004478 <TIM_OC2_SetConfig+0xb0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <TIM_OC2_SetConfig+0x104>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_OC2_SetConfig+0xb0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <TIM_OC2_SetConfig+0x108>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_OC2_SetConfig+0xb0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <TIM_OC2_SetConfig+0x10c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC2_SetConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <TIM_OC2_SetConfig+0x110>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d113      	bne.n	80044a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a27      	ldr	r2, [pc, #156]	; (80045d8 <TIM_OC3_SetConfig+0xfc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_OC3_SetConfig+0x6a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <TIM_OC3_SetConfig+0x100>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10d      	bne.n	8004562 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800454c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <TIM_OC3_SetConfig+0xfc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_OC3_SetConfig+0xae>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <TIM_OC3_SetConfig+0x100>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_OC3_SetConfig+0xae>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <TIM_OC3_SetConfig+0x104>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_OC3_SetConfig+0xae>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <TIM_OC3_SetConfig+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_OC3_SetConfig+0xae>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <TIM_OC3_SetConfig+0x10c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d113      	bne.n	80045b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00
 80045dc:	40013400 	.word	0x40013400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800

080045ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a28      	ldr	r2, [pc, #160]	; (80046ec <TIM_OC4_SetConfig+0x100>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_OC4_SetConfig+0x6c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a27      	ldr	r2, [pc, #156]	; (80046f0 <TIM_OC4_SetConfig+0x104>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	031b      	lsls	r3, r3, #12
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <TIM_OC4_SetConfig+0x100>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00f      	beq.n	800469c <TIM_OC4_SetConfig+0xb0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <TIM_OC4_SetConfig+0x104>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC4_SetConfig+0xb0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <TIM_OC4_SetConfig+0x108>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC4_SetConfig+0xb0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <TIM_OC4_SetConfig+0x10c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC4_SetConfig+0xb0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <TIM_OC4_SetConfig+0x110>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d113      	bne.n	80046c4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800

08004700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC5_SetConfig+0xb4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC5_SetConfig+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <TIM_OC5_SetConfig+0xbc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <TIM_OC5_SetConfig+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d003      	beq.n	800477a <TIM_OC5_SetConfig+0x7a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <TIM_OC5_SetConfig+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d109      	bne.n	800478e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800480e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	051b      	lsls	r3, r3, #20
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a18      	ldr	r2, [pc, #96]	; (8004880 <TIM_OC6_SetConfig+0xb8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00f      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <TIM_OC6_SetConfig+0xbc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <TIM_OC6_SetConfig+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <TIM_OC6_SetConfig+0xc4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC6_SetConfig+0x7c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a14      	ldr	r2, [pc, #80]	; (8004890 <TIM_OC6_SetConfig+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d109      	bne.n	8004858 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2201      	movs	r2, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1a      	ldr	r2, [r3, #32]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	401a      	ands	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e065      	b.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2b      	ldr	r2, [pc, #172]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004948:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d013      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a12      	ldr	r2, [pc, #72]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10c      	bne.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40013400 	.word	0x40013400
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40014000 	.word	0x40014000

080049e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e087      	b.n	8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a27      	ldr	r2, [pc, #156]	; (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d004      	beq.n	8004a8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d106      	bne.n	8004a9c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d126      	bne.n	8004afe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	051b      	lsls	r3, r3, #20
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d106      	bne.n	8004afe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400

08004b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b5e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4013      	ands	r3, r2
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	f107 0014 	add.w	r0, r7, #20
 8004b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffb0 	bl	8004b24 <USB_EnableGlobalInt>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr

08004bd4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd4:	b490      	push	{r4, r7}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	78db      	ldrb	r3, [r3, #3]
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d819      	bhi.n	8004c36 <USB_ActivateEndpoint+0x62>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <USB_ActivateEndpoint+0x34>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c2d 	.word	0x08004c2d
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	08004c23 	.word	0x08004c23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c18:	89bb      	ldrh	r3, [r7, #12]
 8004c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c1e:	81bb      	strh	r3, [r7, #12]
      break;
 8004c20:	e00d      	b.n	8004c3e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c22:	89bb      	ldrh	r3, [r7, #12]
 8004c24:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c28:	81bb      	strh	r3, [r7, #12]
      break;
 8004c2a:	e008      	b.n	8004c3e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c2c:	89bb      	ldrh	r3, [r7, #12]
 8004c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c32:	81bb      	strh	r3, [r7, #12]
      break;
 8004c34:	e003      	b.n	8004c3e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3a:	e000      	b.n	8004c3e <USB_ActivateEndpoint+0x6a>
      break;
 8004c3c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	441a      	add	r2, r3
 8004c48:	89bb      	ldrh	r3, [r7, #12]
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	b21b      	sxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	b21a      	sxth	r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b21b      	sxth	r3, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	b21b      	sxth	r3, r3
 8004c82:	b29c      	uxth	r4, r3
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	4b8a      	ldr	r3, [pc, #552]	; (8004eb8 <USB_ActivateEndpoint+0x2e4>)
 8004c90:	4323      	orrs	r3, r4
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	7b1b      	ldrb	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 8112 	bne.w	8004ec4 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	785b      	ldrb	r3, [r3, #1]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d067      	beq.n	8004d78 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ca8:	687c      	ldr	r4, [r7, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	441c      	add	r4, r3
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4423      	add	r3, r4
 8004cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	88db      	ldrh	r3, [r3, #6]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29c      	uxth	r4, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d014      	beq.n	8004d12 <USB_ActivateEndpoint+0x13e>
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	b29c      	uxth	r4, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	4b6c      	ldr	r3, [pc, #432]	; (8004ebc <USB_ActivateEndpoint+0x2e8>)
 8004d0c:	4323      	orrs	r3, r4
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	78db      	ldrb	r3, [r3, #3]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d018      	beq.n	8004d4c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d30:	b29c      	uxth	r4, r3
 8004d32:	f084 0320 	eor.w	r3, r4, #32
 8004d36:	b29c      	uxth	r4, r3
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	4b5d      	ldr	r3, [pc, #372]	; (8004eb8 <USB_ActivateEndpoint+0x2e4>)
 8004d44:	4323      	orrs	r3, r4
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	8013      	strh	r3, [r2, #0]
 8004d4a:	e22b      	b.n	80051a4 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	b29c      	uxth	r4, r3
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	4b52      	ldr	r3, [pc, #328]	; (8004eb8 <USB_ActivateEndpoint+0x2e4>)
 8004d70:	4323      	orrs	r3, r4
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]
 8004d76:	e215      	b.n	80051a4 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d78:	687c      	ldr	r4, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	441c      	add	r4, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4423      	add	r3, r4
 8004d8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d90:	461c      	mov	r4, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	88db      	ldrh	r3, [r3, #6]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004da0:	687c      	ldr	r4, [r7, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	441c      	add	r4, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4423      	add	r3, r4
 8004db4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004db8:	461c      	mov	r4, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10e      	bne.n	8004de0 <USB_ActivateEndpoint+0x20c>
 8004dc2:	8823      	ldrh	r3, [r4, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8023      	strh	r3, [r4, #0]
 8004dce:	8823      	ldrh	r3, [r4, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8023      	strh	r3, [r4, #0]
 8004dde:	e02d      	b.n	8004e3c <USB_ActivateEndpoint+0x268>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b3e      	cmp	r3, #62	; 0x3e
 8004de6:	d812      	bhi.n	8004e0e <USB_ActivateEndpoint+0x23a>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <USB_ActivateEndpoint+0x22e>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	029b      	lsls	r3, r3, #10
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8023      	strh	r3, [r4, #0]
 8004e0c:	e016      	b.n	8004e3c <USB_ActivateEndpoint+0x268>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <USB_ActivateEndpoint+0x254>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29c      	uxth	r4, r3
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d014      	beq.n	8004e7e <USB_ActivateEndpoint+0x2aa>
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	b29c      	uxth	r4, r3
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <USB_ActivateEndpoint+0x2ec>)
 8004e78:	4323      	orrs	r3, r4
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	b29c      	uxth	r4, r3
 8004e96:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e9a:	b29c      	uxth	r4, r3
 8004e9c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004ea0:	b29c      	uxth	r4, r3
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	441a      	add	r2, r3
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <USB_ActivateEndpoint+0x2e4>)
 8004eae:	4323      	orrs	r3, r4
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	8013      	strh	r3, [r2, #0]
 8004eb4:	e176      	b.n	80051a4 <USB_ActivateEndpoint+0x5d0>
 8004eb6:	bf00      	nop
 8004eb8:	ffff8080 	.word	0xffff8080
 8004ebc:	ffff80c0 	.word	0xffff80c0
 8004ec0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eda:	b29c      	uxth	r4, r3
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	441a      	add	r2, r3
 8004ee6:	4b96      	ldr	r3, [pc, #600]	; (8005140 <USB_ActivateEndpoint+0x56c>)
 8004ee8:	4323      	orrs	r3, r4
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004eee:	687c      	ldr	r4, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	441c      	add	r4, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4423      	add	r3, r4
 8004f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f06:	461c      	mov	r4, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	891b      	ldrh	r3, [r3, #8]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	8023      	strh	r3, [r4, #0]
 8004f16:	687c      	ldr	r4, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	441c      	add	r4, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4423      	add	r3, r4
 8004f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f2e:	461c      	mov	r4, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	895b      	ldrh	r3, [r3, #10]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 8088 	bne.w	8005058 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	b29c      	uxth	r4, r3
 8004f56:	4623      	mov	r3, r4
 8004f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d014      	beq.n	8004f8a <USB_ActivateEndpoint+0x3b6>
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	b29c      	uxth	r4, r3
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	4b70      	ldr	r3, [pc, #448]	; (8005144 <USB_ActivateEndpoint+0x570>)
 8004f84:	4323      	orrs	r3, r4
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	b29c      	uxth	r4, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d014      	beq.n	8004fcc <USB_ActivateEndpoint+0x3f8>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	b29c      	uxth	r4, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	4b60      	ldr	r3, [pc, #384]	; (8005148 <USB_ActivateEndpoint+0x574>)
 8004fc6:	4323      	orrs	r3, r4
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	b29c      	uxth	r4, r3
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	441a      	add	r2, r3
 8004fee:	4b56      	ldr	r3, [pc, #344]	; (8005148 <USB_ActivateEndpoint+0x574>)
 8004ff0:	4323      	orrs	r3, r4
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	b29c      	uxth	r4, r3
 800500e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005012:	b29c      	uxth	r4, r3
 8005014:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005018:	b29c      	uxth	r4, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	4b49      	ldr	r3, [pc, #292]	; (800514c <USB_ActivateEndpoint+0x578>)
 8005026:	4323      	orrs	r3, r4
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005042:	b29c      	uxth	r4, r3
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	441a      	add	r2, r3
 800504e:	4b3f      	ldr	r3, [pc, #252]	; (800514c <USB_ActivateEndpoint+0x578>)
 8005050:	4323      	orrs	r3, r4
 8005052:	b29b      	uxth	r3, r3
 8005054:	8013      	strh	r3, [r2, #0]
 8005056:	e0a5      	b.n	80051a4 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29c      	uxth	r4, r3
 8005066:	4623      	mov	r3, r4
 8005068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d014      	beq.n	800509a <USB_ActivateEndpoint+0x4c6>
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	b29c      	uxth	r4, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <USB_ActivateEndpoint+0x570>)
 8005094:	4323      	orrs	r3, r4
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29c      	uxth	r4, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d014      	beq.n	80050dc <USB_ActivateEndpoint+0x508>
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c8:	b29c      	uxth	r4, r3
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	441a      	add	r2, r3
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <USB_ActivateEndpoint+0x574>)
 80050d6:	4323      	orrs	r3, r4
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	b29c      	uxth	r4, r3
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <USB_ActivateEndpoint+0x570>)
 8005100:	4323      	orrs	r3, r4
 8005102:	b29b      	uxth	r3, r3
 8005104:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d020      	beq.n	8005150 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005124:	b29c      	uxth	r4, r3
 8005126:	f084 0320 	eor.w	r3, r4, #32
 800512a:	b29c      	uxth	r4, r3
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <USB_ActivateEndpoint+0x578>)
 8005138:	4323      	orrs	r3, r4
 800513a:	b29b      	uxth	r3, r3
 800513c:	8013      	strh	r3, [r2, #0]
 800513e:	e01c      	b.n	800517a <USB_ActivateEndpoint+0x5a6>
 8005140:	ffff8180 	.word	0xffff8180
 8005144:	ffffc080 	.word	0xffffc080
 8005148:	ffff80c0 	.word	0xffff80c0
 800514c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	b29c      	uxth	r4, r3
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <USB_ActivateEndpoint+0x5dc>)
 8005174:	4323      	orrs	r3, r4
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	b29c      	uxth	r4, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	441a      	add	r2, r3
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <USB_ActivateEndpoint+0x5dc>)
 800519e:	4323      	orrs	r3, r4
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc90      	pop	{r4, r7}
 80051ae:	4770      	bx	lr
 80051b0:	ffff8080 	.word	0xffff8080

080051b4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051b4:	b490      	push	{r4, r7}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	7b1b      	ldrb	r3, [r3, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d171      	bne.n	80052aa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d036      	beq.n	800523c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29c      	uxth	r4, r3
 80051dc:	4623      	mov	r3, r4
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d014      	beq.n	8005210 <USB_DeactivateEndpoint+0x5c>
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	b29c      	uxth	r4, r3
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	4b6b      	ldr	r3, [pc, #428]	; (80053b8 <USB_DeactivateEndpoint+0x204>)
 800520a:	4323      	orrs	r3, r4
 800520c:	b29b      	uxth	r3, r3
 800520e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005226:	b29c      	uxth	r4, r3
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	4b62      	ldr	r3, [pc, #392]	; (80053bc <USB_DeactivateEndpoint+0x208>)
 8005234:	4323      	orrs	r3, r4
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]
 800523a:	e144      	b.n	80054c6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29c      	uxth	r4, r3
 800524a:	4623      	mov	r3, r4
 800524c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d014      	beq.n	800527e <USB_DeactivateEndpoint+0xca>
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	b29c      	uxth	r4, r3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	4b52      	ldr	r3, [pc, #328]	; (80053c0 <USB_DeactivateEndpoint+0x20c>)
 8005278:	4323      	orrs	r3, r4
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005294:	b29c      	uxth	r4, r3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	4b46      	ldr	r3, [pc, #280]	; (80053bc <USB_DeactivateEndpoint+0x208>)
 80052a2:	4323      	orrs	r3, r4
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	8013      	strh	r3, [r2, #0]
 80052a8:	e10d      	b.n	80054c6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 8088 	bne.w	80053c4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29c      	uxth	r4, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d014      	beq.n	80052f6 <USB_DeactivateEndpoint+0x142>
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	b29c      	uxth	r4, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	441a      	add	r2, r3
 80052ee:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <USB_DeactivateEndpoint+0x20c>)
 80052f0:	4323      	orrs	r3, r4
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29c      	uxth	r4, r3
 8005304:	4623      	mov	r3, r4
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <USB_DeactivateEndpoint+0x184>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	b29c      	uxth	r4, r3
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	4b21      	ldr	r3, [pc, #132]	; (80053b8 <USB_DeactivateEndpoint+0x204>)
 8005332:	4323      	orrs	r3, r4
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	b29c      	uxth	r4, r3
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <USB_DeactivateEndpoint+0x204>)
 800535c:	4323      	orrs	r3, r4
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	b29c      	uxth	r4, r3
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <USB_DeactivateEndpoint+0x208>)
 8005386:	4323      	orrs	r3, r4
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a2:	b29c      	uxth	r4, r3
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <USB_DeactivateEndpoint+0x208>)
 80053b0:	4323      	orrs	r3, r4
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
 80053b6:	e086      	b.n	80054c6 <USB_DeactivateEndpoint+0x312>
 80053b8:	ffff80c0 	.word	0xffff80c0
 80053bc:	ffff8080 	.word	0xffff8080
 80053c0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29c      	uxth	r4, r3
 80053d2:	4623      	mov	r3, r4
 80053d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d014      	beq.n	8005406 <USB_DeactivateEndpoint+0x252>
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	b29c      	uxth	r4, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	4b35      	ldr	r3, [pc, #212]	; (80054d4 <USB_DeactivateEndpoint+0x320>)
 8005400:	4323      	orrs	r3, r4
 8005402:	b29b      	uxth	r3, r3
 8005404:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29c      	uxth	r4, r3
 8005414:	4623      	mov	r3, r4
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <USB_DeactivateEndpoint+0x294>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	b29c      	uxth	r4, r3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <USB_DeactivateEndpoint+0x324>)
 8005442:	4323      	orrs	r3, r4
 8005444:	b29b      	uxth	r3, r3
 8005446:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	b29c      	uxth	r4, r3
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <USB_DeactivateEndpoint+0x320>)
 800546c:	4323      	orrs	r3, r4
 800546e:	b29b      	uxth	r3, r3
 8005470:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	b29c      	uxth	r4, r3
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	441a      	add	r2, r3
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <USB_DeactivateEndpoint+0x328>)
 8005496:	4323      	orrs	r3, r4
 8005498:	b29b      	uxth	r3, r3
 800549a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	b29c      	uxth	r4, r3
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	4b07      	ldr	r3, [pc, #28]	; (80054dc <USB_DeactivateEndpoint+0x328>)
 80054c0:	4323      	orrs	r3, r4
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc90      	pop	{r4, r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	ffffc080 	.word	0xffffc080
 80054d8:	ffff80c0 	.word	0xffff80c0
 80054dc:	ffff8080 	.word	0xffff8080

080054e0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b08d      	sub	sp, #52	; 0x34
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	f040 8160 	bne.w	80057b4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d909      	bls.n	8005514 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	1ad2      	subs	r2, r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	619a      	str	r2, [r3, #24]
 8005512:	e005      	b.n	8005520 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2200      	movs	r2, #0
 800551e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d119      	bne.n	800555c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6959      	ldr	r1, [r3, #20]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	88da      	ldrh	r2, [r3, #6]
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	b29b      	uxth	r3, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fba8 	bl	8005c8a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800553a:	687c      	ldr	r4, [r7, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	441c      	add	r4, r3
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4423      	add	r3, r4
 800554e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005552:	461c      	mov	r4, r3
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	b29b      	uxth	r3, r3
 8005558:	8023      	strh	r3, [r4, #0]
 800555a:	e10f      	b.n	800577c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d065      	beq.n	800563e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005572:	687c      	ldr	r4, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d148      	bne.n	800560e <USB_EPStartXfer+0x12e>
 800557c:	687c      	ldr	r4, [r7, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	441c      	add	r4, r3
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4423      	add	r3, r4
 8005590:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005594:	461c      	mov	r4, r3
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10e      	bne.n	80055ba <USB_EPStartXfer+0xda>
 800559c:	8823      	ldrh	r3, [r4, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8023      	strh	r3, [r4, #0]
 80055a8:	8823      	ldrh	r3, [r4, #0]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8023      	strh	r3, [r4, #0]
 80055b8:	e03d      	b.n	8005636 <USB_EPStartXfer+0x156>
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	2b3e      	cmp	r3, #62	; 0x3e
 80055be:	d810      	bhi.n	80055e2 <USB_EPStartXfer+0x102>
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USB_EPStartXfer+0xf6>
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	b29b      	uxth	r3, r3
 80055da:	029b      	lsls	r3, r3, #10
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8023      	strh	r3, [r4, #0]
 80055e0:	e029      	b.n	8005636 <USB_EPStartXfer+0x156>
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <USB_EPStartXfer+0x118>
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	3b01      	subs	r3, #1
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	b29b      	uxth	r3, r3
 8005600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005608:	b29b      	uxth	r3, r3
 800560a:	8023      	strh	r3, [r4, #0]
 800560c:	e013      	b.n	8005636 <USB_EPStartXfer+0x156>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10f      	bne.n	8005636 <USB_EPStartXfer+0x156>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561c:	b29b      	uxth	r3, r3
 800561e:	441c      	add	r4, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4423      	add	r3, r4
 8005628:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	895b      	ldrh	r3, [r3, #10]
 800563a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800563c:	e063      	b.n	8005706 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d148      	bne.n	80056d8 <USB_EPStartXfer+0x1f8>
 8005646:	687c      	ldr	r4, [r7, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564e:	b29b      	uxth	r3, r3
 8005650:	441c      	add	r4, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4423      	add	r3, r4
 800565a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800565e:	461c      	mov	r4, r3
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10e      	bne.n	8005684 <USB_EPStartXfer+0x1a4>
 8005666:	8823      	ldrh	r3, [r4, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566e:	b29b      	uxth	r3, r3
 8005670:	8023      	strh	r3, [r4, #0]
 8005672:	8823      	ldrh	r3, [r4, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567e:	b29b      	uxth	r3, r3
 8005680:	8023      	strh	r3, [r4, #0]
 8005682:	e03d      	b.n	8005700 <USB_EPStartXfer+0x220>
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b3e      	cmp	r3, #62	; 0x3e
 8005688:	d810      	bhi.n	80056ac <USB_EPStartXfer+0x1cc>
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <USB_EPStartXfer+0x1c0>
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	3301      	adds	r3, #1
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	8023      	strh	r3, [r4, #0]
 80056aa:	e029      	b.n	8005700 <USB_EPStartXfer+0x220>
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	623b      	str	r3, [r7, #32]
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d102      	bne.n	80056c2 <USB_EPStartXfer+0x1e2>
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	3b01      	subs	r3, #1
 80056c0:	623b      	str	r3, [r7, #32]
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	029b      	lsls	r3, r3, #10
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	8023      	strh	r3, [r4, #0]
 80056d6:	e013      	b.n	8005700 <USB_EPStartXfer+0x220>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10f      	bne.n	8005700 <USB_EPStartXfer+0x220>
 80056e0:	687c      	ldr	r4, [r7, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	441c      	add	r4, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4423      	add	r3, r4
 80056f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056f8:	461c      	mov	r4, r3
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	891b      	ldrh	r3, [r3, #8]
 8005704:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6959      	ldr	r1, [r3, #20]
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	b29b      	uxth	r3, r3
 800570e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 faba 	bl	8005c8a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d115      	bne.n	800574a <USB_EPStartXfer+0x26a>
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	b29c      	uxth	r4, r3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	441a      	add	r2, r3
 8005740:	4b9a      	ldr	r3, [pc, #616]	; (80059ac <USB_EPStartXfer+0x4cc>)
 8005742:	4323      	orrs	r3, r4
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
 8005748:	e018      	b.n	800577c <USB_EPStartXfer+0x29c>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d114      	bne.n	800577c <USB_EPStartXfer+0x29c>
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29b      	uxth	r3, r3
 8005760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005768:	b29c      	uxth	r4, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	441a      	add	r2, r3
 8005774:	4b8e      	ldr	r3, [pc, #568]	; (80059b0 <USB_EPStartXfer+0x4d0>)
 8005776:	4323      	orrs	r3, r4
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005792:	b29c      	uxth	r4, r3
 8005794:	f084 0310 	eor.w	r3, r4, #16
 8005798:	b29c      	uxth	r4, r3
 800579a:	f084 0320 	eor.w	r3, r4, #32
 800579e:	b29c      	uxth	r4, r3
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	4b82      	ldr	r3, [pc, #520]	; (80059b4 <USB_EPStartXfer+0x4d4>)
 80057ac:	4323      	orrs	r3, r4
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8013      	strh	r3, [r2, #0]
 80057b2:	e146      	b.n	8005a42 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d909      	bls.n	80057d4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	619a      	str	r2, [r3, #24]
 80057d2:	e005      	b.n	80057e0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	7b1b      	ldrb	r3, [r3, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d148      	bne.n	800587a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057e8:	687c      	ldr	r4, [r7, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	441c      	add	r4, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	4423      	add	r3, r4
 80057fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005800:	461c      	mov	r4, r3
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10e      	bne.n	8005826 <USB_EPStartXfer+0x346>
 8005808:	8823      	ldrh	r3, [r4, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005810:	b29b      	uxth	r3, r3
 8005812:	8023      	strh	r3, [r4, #0]
 8005814:	8823      	ldrh	r3, [r4, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005820:	b29b      	uxth	r3, r3
 8005822:	8023      	strh	r3, [r4, #0]
 8005824:	e0f2      	b.n	8005a0c <USB_EPStartXfer+0x52c>
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	2b3e      	cmp	r3, #62	; 0x3e
 800582a:	d810      	bhi.n	800584e <USB_EPStartXfer+0x36e>
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	085b      	lsrs	r3, r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <USB_EPStartXfer+0x362>
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29b      	uxth	r3, r3
 800584a:	8023      	strh	r3, [r4, #0]
 800584c:	e0de      	b.n	8005a0c <USB_EPStartXfer+0x52c>
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <USB_EPStartXfer+0x384>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3b01      	subs	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	b29b      	uxth	r3, r3
 8005868:	029b      	lsls	r3, r3, #10
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005874:	b29b      	uxth	r3, r3
 8005876:	8023      	strh	r3, [r4, #0]
 8005878:	e0c8      	b.n	8005a0c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d148      	bne.n	8005914 <USB_EPStartXfer+0x434>
 8005882:	687c      	ldr	r4, [r7, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800588a:	b29b      	uxth	r3, r3
 800588c:	441c      	add	r4, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4423      	add	r3, r4
 8005896:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800589a:	461c      	mov	r4, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <USB_EPStartXfer+0x3e0>
 80058a2:	8823      	ldrh	r3, [r4, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8023      	strh	r3, [r4, #0]
 80058ae:	8823      	ldrh	r3, [r4, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8023      	strh	r3, [r4, #0]
 80058be:	e03d      	b.n	800593c <USB_EPStartXfer+0x45c>
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b3e      	cmp	r3, #62	; 0x3e
 80058c4:	d810      	bhi.n	80058e8 <USB_EPStartXfer+0x408>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <USB_EPStartXfer+0x3fc>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	029b      	lsls	r3, r3, #10
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8023      	strh	r3, [r4, #0]
 80058e6:	e029      	b.n	800593c <USB_EPStartXfer+0x45c>
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <USB_EPStartXfer+0x41e>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	b29b      	uxth	r3, r3
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	b29b      	uxth	r3, r3
 8005906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800590e:	b29b      	uxth	r3, r3
 8005910:	8023      	strh	r3, [r4, #0]
 8005912:	e013      	b.n	800593c <USB_EPStartXfer+0x45c>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10f      	bne.n	800593c <USB_EPStartXfer+0x45c>
 800591c:	687c      	ldr	r4, [r7, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	441c      	add	r4, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4423      	add	r3, r4
 8005930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005934:	461c      	mov	r4, r3
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	b29b      	uxth	r3, r3
 800593a:	8023      	strh	r3, [r4, #0]
 800593c:	687c      	ldr	r4, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d14e      	bne.n	80059e4 <USB_EPStartXfer+0x504>
 8005946:	687c      	ldr	r4, [r7, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594e:	b29b      	uxth	r3, r3
 8005950:	441c      	add	r4, r3
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4423      	add	r3, r4
 800595a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800595e:	461c      	mov	r4, r3
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <USB_EPStartXfer+0x4a4>
 8005966:	8823      	ldrh	r3, [r4, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596e:	b29b      	uxth	r3, r3
 8005970:	8023      	strh	r3, [r4, #0]
 8005972:	8823      	ldrh	r3, [r4, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597e:	b29b      	uxth	r3, r3
 8005980:	8023      	strh	r3, [r4, #0]
 8005982:	e043      	b.n	8005a0c <USB_EPStartXfer+0x52c>
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b3e      	cmp	r3, #62	; 0x3e
 8005988:	d816      	bhi.n	80059b8 <USB_EPStartXfer+0x4d8>
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <USB_EPStartXfer+0x4c0>
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	3301      	adds	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	029b      	lsls	r3, r3, #10
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8023      	strh	r3, [r4, #0]
 80059aa:	e02f      	b.n	8005a0c <USB_EPStartXfer+0x52c>
 80059ac:	ffff80c0 	.word	0xffff80c0
 80059b0:	ffffc080 	.word	0xffffc080
 80059b4:	ffff8080 	.word	0xffff8080
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <USB_EPStartXfer+0x4ee>
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8023      	strh	r3, [r4, #0]
 80059e2:	e013      	b.n	8005a0c <USB_EPStartXfer+0x52c>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d10f      	bne.n	8005a0c <USB_EPStartXfer+0x52c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	441c      	add	r4, r3
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4423      	add	r3, r4
 80059fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	b29c      	uxth	r4, r3
 8005a24:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005a28:	b29c      	uxth	r4, r3
 8005a2a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005a2e:	b29c      	uxth	r4, r3
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <USB_EPStartXfer+0x56c>)
 8005a3c:	4323      	orrs	r3, r4
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3734      	adds	r7, #52	; 0x34
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}
 8005a4c:	ffff8080 	.word	0xffff8080

08005a50 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a50:	b490      	push	{r4, r7}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d018      	beq.n	8005a94 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a78:	b29c      	uxth	r4, r3
 8005a7a:	f084 0310 	eor.w	r3, r4, #16
 8005a7e:	b29c      	uxth	r4, r3
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <USB_EPSetStall+0x80>)
 8005a8c:	4323      	orrs	r3, r4
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
 8005a92:	e017      	b.n	8005ac4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	b29c      	uxth	r4, r3
 8005aac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ab0:	b29c      	uxth	r4, r3
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	441a      	add	r2, r3
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <USB_EPSetStall+0x80>)
 8005abe:	4323      	orrs	r3, r4
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc90      	pop	{r4, r7}
 8005ace:	4770      	bx	lr
 8005ad0:	ffff8080 	.word	0xffff8080

08005ad4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ad4:	b490      	push	{r4, r7}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	7b1b      	ldrb	r3, [r3, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d17d      	bne.n	8005be2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d03d      	beq.n	8005b6a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29c      	uxth	r4, r3
 8005afc:	4623      	mov	r3, r4
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d014      	beq.n	8005b30 <USB_EPClearStall+0x5c>
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	b29c      	uxth	r4, r3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	441a      	add	r2, r3
 8005b28:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <USB_EPClearStall+0x11c>)
 8005b2a:	4323      	orrs	r3, r4
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d054      	beq.n	8005be2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	b29c      	uxth	r4, r3
 8005b50:	f084 0320 	eor.w	r3, r4, #32
 8005b54:	b29c      	uxth	r4, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <USB_EPClearStall+0x120>)
 8005b62:	4323      	orrs	r3, r4
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
 8005b68:	e03b      	b.n	8005be2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29c      	uxth	r4, r3
 8005b78:	4623      	mov	r3, r4
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d014      	beq.n	8005bac <USB_EPClearStall+0xd8>
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	b29c      	uxth	r4, r3
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <USB_EPClearStall+0x124>)
 8005ba6:	4323      	orrs	r3, r4
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	b29c      	uxth	r4, r3
 8005bc4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005bc8:	b29c      	uxth	r4, r3
 8005bca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005bce:	b29c      	uxth	r4, r3
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	441a      	add	r2, r3
 8005bda:	4b06      	ldr	r3, [pc, #24]	; (8005bf4 <USB_EPClearStall+0x120>)
 8005bdc:	4323      	orrs	r3, r4
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc90      	pop	{r4, r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	ffff80c0 	.word	0xffff80c0
 8005bf4:	ffff8080 	.word	0xffff8080
 8005bf8:	ffffc080 	.word	0xffffc080

08005bfc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c64:	68fb      	ldr	r3, [r7, #12]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b08d      	sub	sp, #52	; 0x34
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	4611      	mov	r1, r2
 8005c96:	461a      	mov	r2, r3
 8005c98:	460b      	mov	r3, r1
 8005c9a:	80fb      	strh	r3, [r7, #6]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ca0:	88bb      	ldrh	r3, [r7, #4]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	085b      	lsrs	r3, r3, #1
 8005ca6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc0:	e01b      	b.n	8005cfa <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	3301      	adds	r3, #1
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	3302      	adds	r3, #2
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e0      	bne.n	8005cc2 <USB_WritePMA+0x38>
  }
}
 8005d00:	bf00      	nop
 8005d02:	3734      	adds	r7, #52	; 0x34
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b08b      	sub	sp, #44	; 0x2c
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	4611      	mov	r1, r2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	80fb      	strh	r3, [r7, #6]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d22:	88bb      	ldrh	r3, [r7, #4]
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	e018      	b.n	8005d76 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	3302      	adds	r3, #2
 8005d50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	3b01      	subs	r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e3      	bne.n	8005d44 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d7c:	88bb      	ldrh	r3, [r7, #4]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	701a      	strb	r2, [r3, #0]
  }
}
 8005d98:	bf00      	nop
 8005d9a:	372c      	adds	r7, #44	; 0x2c
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	7c1b      	ldrb	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d115      	bne.n	8005de8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	2181      	movs	r1, #129	; 0x81
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fe80 	bl	8007aca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f001 fe76 	bl	8007aca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005de6:	e012      	b.n	8005e0e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005de8:	2340      	movs	r3, #64	; 0x40
 8005dea:	2202      	movs	r2, #2
 8005dec:	2181      	movs	r1, #129	; 0x81
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fe6b 	bl	8007aca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fe62 	bl	8007aca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e0e:	2308      	movs	r3, #8
 8005e10:	2203      	movs	r2, #3
 8005e12:	2182      	movs	r1, #130	; 0x82
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fe58 	bl	8007aca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e24:	f001 ffa8 	bl	8007d78 <USBD_static_malloc>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
 8005e3e:	e026      	b.n	8005e8e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7c1b      	ldrb	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e74:	2101      	movs	r1, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 ff12 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8005e7c:	e007      	b.n	8005e8e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e84:	2340      	movs	r3, #64	; 0x40
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 ff09 	bl	8007ca0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ea8:	2181      	movs	r1, #129	; 0x81
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 fe33 	bl	8007b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 fe2c 	bl	8007b16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ec6:	2182      	movs	r1, #130	; 0x82
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fe24 	bl	8007b16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 ff50 	bl	8007d94 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f16:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d039      	beq.n	8005fa4 <USBD_CDC_Setup+0x9e>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d17c      	bne.n	800602e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	88db      	ldrh	r3, [r3, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d029      	beq.n	8005f90 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da11      	bge.n	8005f6a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005f52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	88d2      	ldrh	r2, [r2, #6]
 8005f58:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f5a:	6939      	ldr	r1, [r7, #16]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	88db      	ldrh	r3, [r3, #6]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f001 f9fa 	bl	800735c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005f68:	e068      	b.n	800603c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785a      	ldrb	r2, [r3, #1]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	88db      	ldrh	r3, [r3, #6]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f80:	6939      	ldr	r1, [r7, #16]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	88db      	ldrh	r3, [r3, #6]
 8005f86:	461a      	mov	r2, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fa15 	bl	80073b8 <USBD_CtlPrepareRx>
      break;
 8005f8e:	e055      	b.n	800603c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	7850      	ldrb	r0, [r2, #1]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	4798      	blx	r3
      break;
 8005fa2:	e04b      	b.n	800603c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b0a      	cmp	r3, #10
 8005faa:	d017      	beq.n	8005fdc <USBD_CDC_Setup+0xd6>
 8005fac:	2b0b      	cmp	r3, #11
 8005fae:	d029      	beq.n	8006004 <USBD_CDC_Setup+0xfe>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d133      	bne.n	800601c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d107      	bne.n	8005fce <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005fbe:	f107 030c 	add.w	r3, r7, #12
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 f9c8 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fcc:	e02e      	b.n	800602c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f958 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fda:	e027      	b.n	800602c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d107      	bne.n	8005ff6 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fe6:	f107 030f 	add.w	r3, r7, #15
 8005fea:	2201      	movs	r2, #1
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 f9b4 	bl	800735c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ff4:	e01a      	b.n	800602c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 f944 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ffe:	2302      	movs	r3, #2
 8006000:	75fb      	strb	r3, [r7, #23]
          break;
 8006002:	e013      	b.n	800602c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600a:	2b03      	cmp	r3, #3
 800600c:	d00d      	beq.n	800602a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 f938 	bl	8007286 <USBD_CtlError>
            ret = USBD_FAIL;
 8006016:	2302      	movs	r3, #2
 8006018:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800601a:	e006      	b.n	800602a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 f931 	bl	8007286 <USBD_CtlError>
          ret = USBD_FAIL;
 8006024:	2302      	movs	r3, #2
 8006026:	75fb      	strb	r3, [r7, #23]
          break;
 8006028:	e000      	b.n	800602c <USBD_CDC_Setup+0x126>
          break;
 800602a:	bf00      	nop
      }
      break;
 800602c:	e006      	b.n	800603c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 f928 	bl	8007286 <USBD_CtlError>
      ret = USBD_FAIL;
 8006036:	2302      	movs	r3, #2
 8006038:	75fb      	strb	r3, [r7, #23]
      break;
 800603a:	bf00      	nop
  }

  return ret;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006060:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d037      	beq.n	80060dc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	331c      	adds	r3, #28
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d026      	beq.n	80060d0 <USBD_CDC_DataIn+0x8a>
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	331c      	adds	r3, #28
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	0152      	lsls	r2, r2, #5
 800609a:	440a      	add	r2, r1
 800609c:	3238      	adds	r2, #56	; 0x38
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a4:	fb02 f201 	mul.w	r2, r2, r1
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d110      	bne.n	80060d0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	331c      	adds	r3, #28
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060c2:	78f9      	ldrb	r1, [r7, #3]
 80060c4:	2300      	movs	r3, #0
 80060c6:	2200      	movs	r2, #0
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f001 fdc6 	bl	8007c5a <USBD_LL_Transmit>
 80060ce:	e003      	b.n	80060d8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	e000      	b.n	80060de <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80060dc:	2302      	movs	r3, #2
  }
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fdf1 	bl	8007ce6 <USBD_LL_GetRxDataSize>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800612a:	4611      	mov	r1, r2
 800612c:	4798      	blx	r3

    return USBD_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <USBD_CDC_EP0_RxReady+0x46>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800615c:	2bff      	cmp	r3, #255	; 0xff
 800615e:	d010      	beq.n	8006182 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800616e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006176:	b292      	uxth	r2, r2
 8006178:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22ff      	movs	r2, #255	; 0xff
 800617e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2243      	movs	r2, #67	; 0x43
 8006198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800619a:	4b03      	ldr	r3, [pc, #12]	; (80061a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000094 	.word	0x20000094

080061ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2243      	movs	r2, #67	; 0x43
 80061b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80061ba:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20000050 	.word	0x20000050

080061cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2243      	movs	r2, #67	; 0x43
 80061d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	200000d8 	.word	0x200000d8

080061ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	220a      	movs	r2, #10
 80061f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	2000000c 	.word	0x2000000c

0800620c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006216:	2302      	movs	r3, #2
 8006218:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d005      	beq.n	800622c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800623a:	b480      	push	{r7}
 800623c:	b087      	sub	sp, #28
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	4613      	mov	r3, r2
 8006246:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7c1b      	ldrb	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c2:	2101      	movs	r1, #1
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fceb 	bl	8007ca0 <USBD_LL_PrepareReceive>
 80062ca:	e007      	b.n	80062dc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062d2:	2340      	movs	r3, #64	; 0x40
 80062d4:	2101      	movs	r1, #1
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fce2 	bl	8007ca0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e000      	b.n	80062e2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80062e0:	2302      	movs	r3, #2
  }
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062fe:	2302      	movs	r3, #2
 8006300:	e01a      	b.n	8006338 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	79fa      	ldrb	r2, [r7, #7]
 800632e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f001 fb4f 	bl	80079d4 <USBD_LL_Init>

  return USBD_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e001      	b.n	8006366 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006362:	2302      	movs	r3, #2
 8006364:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fb89 	bl	8007a94 <USBD_LL_Start>

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063ae:	2302      	movs	r3, #2
 80063b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	78fa      	ldrb	r2, [r7, #3]
 80063c6:	4611      	mov	r1, r2
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	4611      	mov	r1, r2
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fef7 	bl	800720c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	2b01      	cmp	r3, #1
 8006440:	d00c      	beq.n	800645c <USBD_LL_SetupStage+0x56>
 8006442:	2b01      	cmp	r3, #1
 8006444:	d302      	bcc.n	800644c <USBD_LL_SetupStage+0x46>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d010      	beq.n	800646c <USBD_LL_SetupStage+0x66>
 800644a:	e017      	b.n	800647c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9cd 	bl	80067f4 <USBD_StdDevReq>
      break;
 800645a:	e01a      	b.n	8006492 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa2f 	bl	80068c8 <USBD_StdItfReq>
      break;
 800646a:	e012      	b.n	8006492 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa6d 	bl	8006954 <USBD_StdEPReq>
      break;
 800647a:	e00a      	b.n	8006492 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fb62 	bl	8007b54 <USBD_LL_StallEP>
      break;
 8006490:	bf00      	nop
  }

  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	460b      	mov	r3, r1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d14b      	bne.n	8006548 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d134      	bne.n	800652c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d919      	bls.n	8006502 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d203      	bcs.n	80064f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	e002      	b.n	80064f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 ff7a 	bl	80073f4 <USBD_CtlContinueRx>
 8006500:	e038      	b.n	8006574 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006514:	2b03      	cmp	r3, #3
 8006516:	d105      	bne.n	8006524 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 ff77 	bl	8007418 <USBD_CtlSendStatus>
 800652a:	e023      	b.n	8006574 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006532:	2b05      	cmp	r3, #5
 8006534:	d11e      	bne.n	8006574 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800653e:	2100      	movs	r1, #0
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 fb07 	bl	8007b54 <USBD_LL_StallEP>
 8006546:	e015      	b.n	8006574 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800655a:	2b03      	cmp	r3, #3
 800655c:	d108      	bne.n	8006570 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	7afa      	ldrb	r2, [r7, #11]
 8006568:	4611      	mov	r1, r2
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	4798      	blx	r3
 800656e:	e001      	b.n	8006574 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006570:	2302      	movs	r3, #2
 8006572:	e000      	b.n	8006576 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	460b      	mov	r3, r1
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d17f      	bne.n	8006692 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3314      	adds	r3, #20
 8006596:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d15c      	bne.n	800665c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d915      	bls.n	80065da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fee4 	bl	8007394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065cc:	2300      	movs	r3, #0
 80065ce:	2200      	movs	r2, #0
 80065d0:	2100      	movs	r1, #0
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f001 fb64 	bl	8007ca0 <USBD_LL_PrepareReceive>
 80065d8:	e04e      	b.n	8006678 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	6912      	ldr	r2, [r2, #16]
 80065e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80065e6:	fb02 f201 	mul.w	r2, r2, r1
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11c      	bne.n	800662a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d316      	bcc.n	800662a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006606:	429a      	cmp	r2, r3
 8006608:	d20f      	bcs.n	800662a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800660a:	2200      	movs	r2, #0
 800660c:	2100      	movs	r1, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fec0 	bl	8007394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800661c:	2300      	movs	r3, #0
 800661e:	2200      	movs	r2, #0
 8006620:	2100      	movs	r1, #0
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 fb3c 	bl	8007ca0 <USBD_LL_PrepareReceive>
 8006628:	e026      	b.n	8006678 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800663c:	2b03      	cmp	r3, #3
 800663e:	d105      	bne.n	800664c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800664c:	2180      	movs	r1, #128	; 0x80
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 fa80 	bl	8007b54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fef2 	bl	800743e <USBD_CtlReceiveStatus>
 800665a:	e00d      	b.n	8006678 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006662:	2b04      	cmp	r3, #4
 8006664:	d004      	beq.n	8006670 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006670:	2180      	movs	r1, #128	; 0x80
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f001 fa6e 	bl	8007b54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800667e:	2b01      	cmp	r3, #1
 8006680:	d11d      	bne.n	80066be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fe82 	bl	800638c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006690:	e015      	b.n	80066be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d108      	bne.n	80066ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	7afa      	ldrb	r2, [r7, #11]
 80066b2:	4611      	mov	r1, r2
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	4798      	blx	r3
 80066b8:	e001      	b.n	80066be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e000      	b.n	80066c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2200      	movs	r2, #0
 80066d4:	2100      	movs	r1, #0
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f9f7 	bl	8007aca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2240      	movs	r2, #64	; 0x40
 80066e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066ec:	2340      	movs	r3, #64	; 0x40
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f9e9 	bl	8007aca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2240      	movs	r2, #64	; 0x40
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6852      	ldr	r2, [r2, #4]
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	4611      	mov	r1, r2
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
  }

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2204      	movs	r2, #4
 8006782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d105      	bne.n	80067b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d10b      	bne.n	80067ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800680a:	2b20      	cmp	r3, #32
 800680c:	d004      	beq.n	8006818 <USBD_StdDevReq+0x24>
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d002      	beq.n	8006818 <USBD_StdDevReq+0x24>
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <USBD_StdDevReq+0x34>
 8006816:	e04c      	b.n	80068b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
      break;
 8006826:	e049      	b.n	80068bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b09      	cmp	r3, #9
 800682e:	d83a      	bhi.n	80068a6 <USBD_StdDevReq+0xb2>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USBD_StdDevReq+0x44>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006889 	.word	0x08006889
 800683c:	0800689d 	.word	0x0800689d
 8006840:	080068a7 	.word	0x080068a7
 8006844:	08006893 	.word	0x08006893
 8006848:	080068a7 	.word	0x080068a7
 800684c:	0800686b 	.word	0x0800686b
 8006850:	08006861 	.word	0x08006861
 8006854:	080068a7 	.word	0x080068a7
 8006858:	0800687f 	.word	0x0800687f
 800685c:	08006875 	.word	0x08006875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f9d4 	bl	8006c10 <USBD_GetDescriptor>
          break;
 8006868:	e022      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb61 	bl	8006f34 <USBD_SetAddress>
          break;
 8006872:	e01d      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fb9e 	bl	8006fb8 <USBD_SetConfig>
          break;
 800687c:	e018      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc27 	bl	80070d4 <USBD_GetConfig>
          break;
 8006886:	e013      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc56 	bl	800713c <USBD_GetStatus>
          break;
 8006890:	e00e      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc84 	bl	80071a2 <USBD_SetFeature>
          break;
 800689a:	e009      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fc93 	bl	80071ca <USBD_ClrFeature>
          break;
 80068a4:	e004      	b.n	80068b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fcec 	bl	8007286 <USBD_CtlError>
          break;
 80068ae:	bf00      	nop
      }
      break;
 80068b0:	e004      	b.n	80068bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fce6 	bl	8007286 <USBD_CtlError>
      break;
 80068ba:	bf00      	nop
  }

  return ret;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop

080068c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d003      	beq.n	80068ea <USBD_StdItfReq+0x22>
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d001      	beq.n	80068ea <USBD_StdItfReq+0x22>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12a      	bne.n	8006940 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f0:	3b01      	subs	r3, #1
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d81d      	bhi.n	8006932 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	889b      	ldrh	r3, [r3, #4]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d813      	bhi.n	8006928 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	88db      	ldrh	r3, [r3, #6]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d110      	bne.n	800693c <USBD_StdItfReq+0x74>
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10d      	bne.n	800693c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fd79 	bl	8007418 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006926:	e009      	b.n	800693c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fcab 	bl	8007286 <USBD_CtlError>
          break;
 8006930:	e004      	b.n	800693c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fca6 	bl	8007286 <USBD_CtlError>
          break;
 800693a:	e000      	b.n	800693e <USBD_StdItfReq+0x76>
          break;
 800693c:	bf00      	nop
      }
      break;
 800693e:	e004      	b.n	800694a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006940:	6839      	ldr	r1, [r7, #0]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fc9f 	bl	8007286 <USBD_CtlError>
      break;
 8006948:	bf00      	nop
  }

  return USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	889b      	ldrh	r3, [r3, #4]
 8006966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006970:	2b20      	cmp	r3, #32
 8006972:	d004      	beq.n	800697e <USBD_StdEPReq+0x2a>
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d002      	beq.n	800697e <USBD_StdEPReq+0x2a>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <USBD_StdEPReq+0x3a>
 800697c:	e13d      	b.n	8006bfa <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      break;
 800698c:	e13a      	b.n	8006c04 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006996:	2b20      	cmp	r3, #32
 8006998:	d10a      	bne.n	80069b0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]

        return ret;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	e12a      	b.n	8006c06 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d03e      	beq.n	8006a36 <USBD_StdEPReq+0xe2>
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d002      	beq.n	80069c2 <USBD_StdEPReq+0x6e>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d070      	beq.n	8006aa2 <USBD_StdEPReq+0x14e>
 80069c0:	e115      	b.n	8006bee <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d002      	beq.n	80069d2 <USBD_StdEPReq+0x7e>
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d015      	beq.n	80069fc <USBD_StdEPReq+0xa8>
 80069d0:	e02b      	b.n	8006a2a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d2:	7bbb      	ldrb	r3, [r7, #14]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <USBD_StdEPReq+0x9e>
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	2b80      	cmp	r3, #128	; 0x80
 80069dc:	d009      	beq.n	80069f2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f8b6 	bl	8007b54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f8b2 	bl	8007b54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f0:	e020      	b.n	8006a34 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc46 	bl	8007286 <USBD_CtlError>
              break;
 80069fa:	e01b      	b.n	8006a34 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	885b      	ldrh	r3, [r3, #2]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10e      	bne.n	8006a22 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00b      	beq.n	8006a22 <USBD_StdEPReq+0xce>
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b80      	cmp	r3, #128	; 0x80
 8006a0e:	d008      	beq.n	8006a22 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 f899 	bl	8007b54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fcf8 	bl	8007418 <USBD_CtlSendStatus>

              break;
 8006a28:	e004      	b.n	8006a34 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc2a 	bl	8007286 <USBD_CtlError>
              break;
 8006a32:	bf00      	nop
          }
          break;
 8006a34:	e0e0      	b.n	8006bf8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d002      	beq.n	8006a46 <USBD_StdEPReq+0xf2>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d015      	beq.n	8006a70 <USBD_StdEPReq+0x11c>
 8006a44:	e026      	b.n	8006a94 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00c      	beq.n	8006a66 <USBD_StdEPReq+0x112>
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	2b80      	cmp	r3, #128	; 0x80
 8006a50:	d009      	beq.n	8006a66 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f87c 	bl	8007b54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a5c:	2180      	movs	r1, #128	; 0x80
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f878 	bl	8007b54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a64:	e01c      	b.n	8006aa0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc0c 	bl	8007286 <USBD_CtlError>
              break;
 8006a6e:	e017      	b.n	8006aa0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	885b      	ldrh	r3, [r3, #2]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f883 	bl	8007b92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fcc3 	bl	8007418 <USBD_CtlSendStatus>
              }
              break;
 8006a92:	e004      	b.n	8006a9e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fbf5 	bl	8007286 <USBD_CtlError>
              break;
 8006a9c:	e000      	b.n	8006aa0 <USBD_StdEPReq+0x14c>
              break;
 8006a9e:	bf00      	nop
          }
          break;
 8006aa0:	e0aa      	b.n	8006bf8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d002      	beq.n	8006ab2 <USBD_StdEPReq+0x15e>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d032      	beq.n	8006b16 <USBD_StdEPReq+0x1c2>
 8006ab0:	e097      	b.n	8006be2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <USBD_StdEPReq+0x174>
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b80      	cmp	r3, #128	; 0x80
 8006abc:	d004      	beq.n	8006ac8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fbe0 	bl	8007286 <USBD_CtlError>
                break;
 8006ac6:	e091      	b.n	8006bec <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	da0b      	bge.n	8006ae8 <USBD_StdEPReq+0x194>
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	3310      	adds	r3, #16
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	e00b      	b.n	8006b00 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	3304      	adds	r3, #4
 8006b00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fc24 	bl	800735c <USBD_CtlSendData>
              break;
 8006b14:	e06a      	b.n	8006bec <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da11      	bge.n	8006b42 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	f003 020f 	and.w	r2, r3, #15
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3318      	adds	r3, #24
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d117      	bne.n	8006b68 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fba3 	bl	8007286 <USBD_CtlError>
                  break;
 8006b40:	e054      	b.n	8006bec <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	f003 020f 	and.w	r2, r3, #15
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb90 	bl	8007286 <USBD_CtlError>
                  break;
 8006b66:	e041      	b.n	8006bec <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	da0b      	bge.n	8006b88 <USBD_StdEPReq+0x234>
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	3310      	adds	r3, #16
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	e00b      	b.n	8006ba0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <USBD_StdEPReq+0x25a>
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d103      	bne.n	8006bb6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	e00e      	b.n	8006bd4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006bb6:	7bbb      	ldrb	r3, [r7, #14]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f001 f808 	bl	8007bd0 <USBD_LL_IsStallEP>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e002      	b.n	8006bd4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fbbe 	bl	800735c <USBD_CtlSendData>
              break;
 8006be0:	e004      	b.n	8006bec <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb4e 	bl	8007286 <USBD_CtlError>
              break;
 8006bea:	bf00      	nop
          }
          break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fb48 	bl	8007286 <USBD_CtlError>
          break;
 8006bf6:	bf00      	nop
      }
      break;
 8006bf8:	e004      	b.n	8006c04 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fb42 	bl	8007286 <USBD_CtlError>
      break;
 8006c02:	bf00      	nop
  }

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	885b      	ldrh	r3, [r3, #2]
 8006c2a:	0a1b      	lsrs	r3, r3, #8
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	2b0e      	cmp	r3, #14
 8006c32:	f200 8152 	bhi.w	8006eda <USBD_GetDescriptor+0x2ca>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <USBD_GetDescriptor+0x2c>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006cad 	.word	0x08006cad
 8006c40:	08006cc5 	.word	0x08006cc5
 8006c44:	08006d05 	.word	0x08006d05
 8006c48:	08006edb 	.word	0x08006edb
 8006c4c:	08006edb 	.word	0x08006edb
 8006c50:	08006e7b 	.word	0x08006e7b
 8006c54:	08006ea7 	.word	0x08006ea7
 8006c58:	08006edb 	.word	0x08006edb
 8006c5c:	08006edb 	.word	0x08006edb
 8006c60:	08006edb 	.word	0x08006edb
 8006c64:	08006edb 	.word	0x08006edb
 8006c68:	08006edb 	.word	0x08006edb
 8006c6c:	08006edb 	.word	0x08006edb
 8006c70:	08006edb 	.word	0x08006edb
 8006c74:	08006c79 	.word	0x08006c79
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7c12      	ldrb	r2, [r2, #16]
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c9a:	e126      	b.n	8006eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 faf1 	bl	8007286 <USBD_CtlError>
        err++;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8006caa:	e11e      	b.n	8006eea <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
      break;
 8006cc2:	e112      	b.n	8006eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7c1b      	ldrb	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10d      	bne.n	8006ce8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	f107 0208 	add.w	r2, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ce6:	e100      	b.n	8006eea <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f107 0208 	add.w	r2, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	2202      	movs	r2, #2
 8006d00:	701a      	strb	r2, [r3, #0]
      break;
 8006d02:	e0f2      	b.n	8006eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	885b      	ldrh	r3, [r3, #2]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	f200 80ac 	bhi.w	8006e68 <USBD_GetDescriptor+0x258>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <USBD_GetDescriptor+0x108>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d99 	.word	0x08006d99
 8006d24:	08006dcd 	.word	0x08006dcd
 8006d28:	08006e01 	.word	0x08006e01
 8006d2c:	08006e35 	.word	0x08006e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	7c12      	ldrb	r2, [r2, #16]
 8006d48:	f107 0108 	add.w	r1, r7, #8
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	4798      	blx	r3
 8006d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d52:	e091      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa95 	bl	8007286 <USBD_CtlError>
            err++;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	72fb      	strb	r3, [r7, #11]
          break;
 8006d62:	e089      	b.n	8006e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e077      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa7b 	bl	8007286 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e06f      	b.n	8006e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e05d      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa61 	bl	8007286 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e055      	b.n	8006e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e043      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa47 	bl	8007286 <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e03b      	b.n	8006e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e22:	e029      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa2d 	bl	8007286 <USBD_CtlError>
            err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
          break;
 8006e32:	e021      	b.n	8006e78 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e56:	e00f      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa13 	bl	8007286 <USBD_CtlError>
            err++;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	3301      	adds	r3, #1
 8006e64:	72fb      	strb	r3, [r7, #11]
          break;
 8006e66:	e007      	b.n	8006e78 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa0b 	bl	8007286 <USBD_CtlError>
          err++;
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	3301      	adds	r3, #1
 8006e74:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e76:	e038      	b.n	8006eea <USBD_GetDescriptor+0x2da>
 8006e78:	e037      	b.n	8006eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c1b      	ldrb	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	f107 0208 	add.w	r2, r7, #8
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e94:	e029      	b.n	8006eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f9f4 	bl	8007286 <USBD_CtlError>
        err++;
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea4:	e021      	b.n	8006eea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	f107 0208 	add.w	r2, r7, #8
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4798      	blx	r3
 8006ebe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec8:	e00f      	b.n	8006eea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f9da 	bl	8007286 <USBD_CtlError>
        err++;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed8:	e007      	b.n	8006eea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f9d2 	bl	8007286 <USBD_CtlError>
      err++;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee8:	bf00      	nop
  }

  if (err != 0U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d11c      	bne.n	8006f2a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ef0:	893b      	ldrh	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d011      	beq.n	8006f1a <USBD_GetDescriptor+0x30a>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	88da      	ldrh	r2, [r3, #6]
 8006f02:	893b      	ldrh	r3, [r7, #8]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	bf28      	it	cs
 8006f08:	4613      	movcs	r3, r2
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f0e:	893b      	ldrh	r3, [r7, #8]
 8006f10:	461a      	mov	r2, r3
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa21 	bl	800735c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	88db      	ldrh	r3, [r3, #6]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa78 	bl	8007418 <USBD_CtlSendStatus>
 8006f28:	e000      	b.n	8006f2c <USBD_GetDescriptor+0x31c>
    return;
 8006f2a:	bf00      	nop
    }
  }
}
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	889b      	ldrh	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d130      	bne.n	8006fa8 <USBD_SetAddress+0x74>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d12c      	bne.n	8006fa8 <USBD_SetAddress+0x74>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d828      	bhi.n	8006fa8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d104      	bne.n	8006f76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f989 	bl	8007286 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	e01c      	b.n	8006fb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7bfa      	ldrb	r2, [r7, #15]
 8006f7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fe4a 	bl	8007c1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa45 	bl	8007418 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d004      	beq.n	8006f9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9c:	e008      	b.n	8006fb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	e003      	b.n	8006fb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f96b 	bl	8007286 <USBD_CtlError>
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	885b      	ldrh	r3, [r3, #2]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	4b41      	ldr	r3, [pc, #260]	; (80070d0 <USBD_SetConfig+0x118>)
 8006fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fcc:	4b40      	ldr	r3, [pc, #256]	; (80070d0 <USBD_SetConfig+0x118>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d904      	bls.n	8006fde <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f955 	bl	8007286 <USBD_CtlError>
 8006fdc:	e075      	b.n	80070ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d002      	beq.n	8006fee <USBD_SetConfig+0x36>
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d023      	beq.n	8007034 <USBD_SetConfig+0x7c>
 8006fec:	e062      	b.n	80070b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006fee:	4b38      	ldr	r3, [pc, #224]	; (80070d0 <USBD_SetConfig+0x118>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d01a      	beq.n	800702c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <USBD_SetConfig+0x118>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2203      	movs	r2, #3
 8007004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007008:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <USBD_SetConfig+0x118>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff f9c7 	bl	80063a2 <USBD_SetClassConfig>
 8007014:	4603      	mov	r3, r0
 8007016:	2b02      	cmp	r3, #2
 8007018:	d104      	bne.n	8007024 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f932 	bl	8007286 <USBD_CtlError>
            return;
 8007022:	e052      	b.n	80070ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f9f7 	bl	8007418 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800702a:	e04e      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f9f3 	bl	8007418 <USBD_CtlSendStatus>
        break;
 8007032:	e04a      	b.n	80070ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007034:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <USBD_SetConfig+0x118>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d112      	bne.n	8007062 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007044:	4b22      	ldr	r3, [pc, #136]	; (80070d0 <USBD_SetConfig+0x118>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800704e:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <USBD_SetConfig+0x118>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff f9c3 	bl	80063e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f9dc 	bl	8007418 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007060:	e033      	b.n	80070ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007062:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <USBD_SetConfig+0x118>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d01d      	beq.n	80070ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff f9b1 	bl	80063e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800707e:	4b14      	ldr	r3, [pc, #80]	; (80070d0 <USBD_SetConfig+0x118>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <USBD_SetConfig+0x118>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff f987 	bl	80063a2 <USBD_SetClassConfig>
 8007094:	4603      	mov	r3, r0
 8007096:	2b02      	cmp	r3, #2
 8007098:	d104      	bne.n	80070a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8f2 	bl	8007286 <USBD_CtlError>
            return;
 80070a2:	e012      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9b7 	bl	8007418 <USBD_CtlSendStatus>
        break;
 80070aa:	e00e      	b.n	80070ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9b3 	bl	8007418 <USBD_CtlSendStatus>
        break;
 80070b2:	e00a      	b.n	80070ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f8e5 	bl	8007286 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <USBD_SetConfig+0x118>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff f98c 	bl	80063e0 <USBD_ClrClassConfig>
        break;
 80070c8:	bf00      	nop
    }
  }
}
 80070ca:	3708      	adds	r7, #8
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200007d2 	.word	0x200007d2

080070d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d004      	beq.n	80070f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8cc 	bl	8007286 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070ee:	e021      	b.n	8007134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	db17      	blt.n	800712a <USBD_GetConfig+0x56>
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	dd02      	ble.n	8007104 <USBD_GetConfig+0x30>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d00b      	beq.n	800711a <USBD_GetConfig+0x46>
 8007102:	e012      	b.n	800712a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3308      	adds	r3, #8
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f922 	bl	800735c <USBD_CtlSendData>
        break;
 8007118:	e00c      	b.n	8007134 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3304      	adds	r3, #4
 800711e:	2201      	movs	r2, #1
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f91a 	bl	800735c <USBD_CtlSendData>
        break;
 8007128:	e004      	b.n	8007134 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8aa 	bl	8007286 <USBD_CtlError>
        break;
 8007132:	bf00      	nop
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714c:	3b01      	subs	r3, #1
 800714e:	2b02      	cmp	r3, #2
 8007150:	d81e      	bhi.n	8007190 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d004      	beq.n	8007164 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f892 	bl	8007286 <USBD_CtlError>
        break;
 8007162:	e01a      	b.n	800719a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d005      	beq.n	8007180 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f043 0202 	orr.w	r2, r3, #2
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	330c      	adds	r3, #12
 8007184:	2202      	movs	r2, #2
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8e7 	bl	800735c <USBD_CtlSendData>
      break;
 800718e:	e004      	b.n	800719a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f877 	bl	8007286 <USBD_CtlError>
      break;
 8007198:	bf00      	nop
  }
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	885b      	ldrh	r3, [r3, #2]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d106      	bne.n	80071c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f92b 	bl	8007418 <USBD_CtlSendStatus>
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d80b      	bhi.n	80071f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10c      	bne.n	8007202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f911 	bl	8007418 <USBD_CtlSendStatus>
      }
      break;
 80071f6:	e004      	b.n	8007202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f843 	bl	8007286 <USBD_CtlError>
      break;
 8007200:	e000      	b.n	8007204 <USBD_ClrFeature+0x3a>
      break;
 8007202:	bf00      	nop
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785a      	ldrb	r2, [r3, #1]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	3302      	adds	r3, #2
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b29a      	uxth	r2, r3
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	3303      	adds	r3, #3
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	b29b      	uxth	r3, r3
 800723a:	4413      	add	r3, r2
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	3304      	adds	r3, #4
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b29a      	uxth	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	3305      	adds	r3, #5
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	b29b      	uxth	r3, r3
 8007256:	4413      	add	r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	3306      	adds	r3, #6
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b29a      	uxth	r2, r3
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3307      	adds	r3, #7
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b29b      	uxth	r3, r3
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	b29b      	uxth	r3, r3
 8007272:	4413      	add	r3, r2
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	80da      	strh	r2, [r3, #6]

}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007290:	2180      	movs	r1, #128	; 0x80
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc5e 	bl	8007b54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fc5a 	bl	8007b54 <USBD_LL_StallEP>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d032      	beq.n	8007324 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f834 	bl	800732c <USBD_GetLen>
 80072c4:	4603      	mov	r3, r0
 80072c6:	3301      	adds	r3, #1
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	75fa      	strb	r2, [r7, #23]
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4413      	add	r3, r2
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	75fa      	strb	r2, [r7, #23]
 80072ea:	461a      	mov	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4413      	add	r3, r2
 80072f0:	2203      	movs	r2, #3
 80072f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80072f4:	e012      	b.n	800731c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	60fa      	str	r2, [r7, #12]
 80072fc:	7dfa      	ldrb	r2, [r7, #23]
 80072fe:	1c51      	adds	r1, r2, #1
 8007300:	75f9      	strb	r1, [r7, #23]
 8007302:	4611      	mov	r1, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	440a      	add	r2, r1
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	75fa      	strb	r2, [r7, #23]
 8007312:	461a      	mov	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4413      	add	r3, r2
 8007318:	2200      	movs	r2, #0
 800731a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e8      	bne.n	80072f6 <USBD_GetString+0x4e>
    }
  }
}
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007338:	e005      	b.n	8007346 <USBD_GetLen+0x1a>
  {
    len++;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
 800733c:	3301      	adds	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3301      	adds	r3, #1
 8007344:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f5      	bne.n	800733a <USBD_GetLen+0xe>
  }

  return len;
 800734e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	4613      	mov	r3, r2
 8007368:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2202      	movs	r2, #2
 800736e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007372:	88fa      	ldrh	r2, [r7, #6]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007378:	88fa      	ldrh	r2, [r7, #6]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	2100      	movs	r1, #0
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fc68 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073a2:	88fb      	ldrh	r3, [r7, #6]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	2100      	movs	r1, #0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fc56 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2203      	movs	r2, #3
 80073ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	2100      	movs	r1, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fc5b 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fc49 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2204      	movs	r2, #4
 8007424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fc13 	bl	8007c5a <USBD_LL_Transmit>

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2205      	movs	r2, #5
 800744a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fc23 	bl	8007ca0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007468:	2200      	movs	r2, #0
 800746a:	4912      	ldr	r1, [pc, #72]	; (80074b4 <MX_USB_Device_Init+0x50>)
 800746c:	4812      	ldr	r0, [pc, #72]	; (80074b8 <MX_USB_Device_Init+0x54>)
 800746e:	f7fe ff3c 	bl	80062ea <USBD_Init>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007478:	f7f9 f9d9 	bl	800082e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800747c:	490f      	ldr	r1, [pc, #60]	; (80074bc <MX_USB_Device_Init+0x58>)
 800747e:	480e      	ldr	r0, [pc, #56]	; (80074b8 <MX_USB_Device_Init+0x54>)
 8007480:	f7fe ff5e 	bl	8006340 <USBD_RegisterClass>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800748a:	f7f9 f9d0 	bl	800082e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800748e:	490c      	ldr	r1, [pc, #48]	; (80074c0 <MX_USB_Device_Init+0x5c>)
 8007490:	4809      	ldr	r0, [pc, #36]	; (80074b8 <MX_USB_Device_Init+0x54>)
 8007492:	f7fe febb 	bl	800620c <USBD_CDC_RegisterInterface>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800749c:	f7f9 f9c7 	bl	800082e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <MX_USB_Device_Init+0x54>)
 80074a2:	f7fe ff67 	bl	8006374 <USBD_Start>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80074ac:	f7f9 f9bf 	bl	800082e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	2000012c 	.word	0x2000012c
 80074b8:	20000c78 	.word	0x20000c78
 80074bc:	20000018 	.word	0x20000018
 80074c0:	2000011c 	.word	0x2000011c

080074c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074c8:	2200      	movs	r2, #0
 80074ca:	4905      	ldr	r1, [pc, #20]	; (80074e0 <CDC_Init_FS+0x1c>)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <CDC_Init_FS+0x20>)
 80074ce:	f7fe feb4 	bl	800623a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <CDC_Init_FS+0x24>)
 80074d4:	4803      	ldr	r0, [pc, #12]	; (80074e4 <CDC_Init_FS+0x20>)
 80074d6:	f7fe feca 	bl	800626e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074dc:	4618      	mov	r0, r3
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001324 	.word	0x20001324
 80074e4:	20000c78 	.word	0x20000c78
 80074e8:	20000f3c 	.word	0x20000f3c

080074ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
 8007508:	4613      	mov	r3, r2
 800750a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b23      	cmp	r3, #35	; 0x23
 8007510:	d84a      	bhi.n	80075a8 <CDC_Control_FS+0xac>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <CDC_Control_FS+0x1c>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075a9 	.word	0x080075a9
 8007534:	080075a9 	.word	0x080075a9
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a9 	.word	0x080075a9
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	080075a9 	.word	0x080075a9
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075a9 	.word	0x080075a9
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	080075a9 	.word	0x080075a9
 80075a4:	080075a9 	.word	0x080075a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a8:	bf00      	nop
  }

  return (USBD_OK);
 80075aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4805      	ldr	r0, [pc, #20]	; (80075dc <CDC_Receive_FS+0x24>)
 80075c6:	f7fe fe52 	bl	800626e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ca:	4804      	ldr	r0, [pc, #16]	; (80075dc <CDC_Receive_FS+0x24>)
 80075cc:	f7fe fe63 	bl	8006296 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000c78 	.word	0x20000c78

080075e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2212      	movs	r2, #18
 80075f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80075f2:	4b03      	ldr	r3, [pc, #12]	; (8007600 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	2000014c 	.word	0x2000014c

08007604 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2204      	movs	r2, #4
 8007614:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	20000160 	.word	0x20000160

08007628 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4907      	ldr	r1, [pc, #28]	; (800765c <USBD_CDC_ProductStrDescriptor+0x34>)
 800763e:	4808      	ldr	r0, [pc, #32]	; (8007660 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007640:	f7ff fe32 	bl	80072a8 <USBD_GetString>
 8007644:	e004      	b.n	8007650 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <USBD_CDC_ProductStrDescriptor+0x34>)
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <USBD_CDC_ProductStrDescriptor+0x38>)
 800764c:	f7ff fe2c 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2000170c 	.word	0x2000170c
 8007660:	08007e7c 	.word	0x08007e7c

08007664 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	4904      	ldr	r1, [pc, #16]	; (8007684 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8007674:	4804      	ldr	r0, [pc, #16]	; (8007688 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007676:	f7ff fe17 	bl	80072a8 <USBD_GetString>
  return USBD_StrDesc;
 800767a:	4b02      	ldr	r3, [pc, #8]	; (8007684 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	2000170c 	.word	0x2000170c
 8007688:	08007e94 	.word	0x08007e94

0800768c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	221a      	movs	r2, #26
 800769c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800769e:	f000 f843 	bl	8007728 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80076a2:	4b02      	ldr	r3, [pc, #8]	; (80076ac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000164 	.word	0x20000164

080076b0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d105      	bne.n	80076ce <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4907      	ldr	r1, [pc, #28]	; (80076e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80076c6:	4808      	ldr	r0, [pc, #32]	; (80076e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80076c8:	f7ff fdee 	bl	80072a8 <USBD_GetString>
 80076cc:	e004      	b.n	80076d8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4904      	ldr	r1, [pc, #16]	; (80076e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80076d2:	4805      	ldr	r0, [pc, #20]	; (80076e8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80076d4:	f7ff fde8 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076d8:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000170c 	.word	0x2000170c
 80076e8:	08007ea8 	.word	0x08007ea8

080076ec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	4907      	ldr	r1, [pc, #28]	; (8007720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007702:	4808      	ldr	r0, [pc, #32]	; (8007724 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007704:	f7ff fdd0 	bl	80072a8 <USBD_GetString>
 8007708:	e004      	b.n	8007714 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	4904      	ldr	r1, [pc, #16]	; (8007720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800770e:	4805      	ldr	r0, [pc, #20]	; (8007724 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007710:	f7ff fdca 	bl	80072a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2000170c 	.word	0x2000170c
 8007724:	08007eb4 	.word	0x08007eb4

08007728 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <Get_SerialNum+0x44>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <Get_SerialNum+0x48>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <Get_SerialNum+0x4c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800774e:	2208      	movs	r2, #8
 8007750:	4909      	ldr	r1, [pc, #36]	; (8007778 <Get_SerialNum+0x50>)
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 f814 	bl	8007780 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007758:	2204      	movs	r2, #4
 800775a:	4908      	ldr	r1, [pc, #32]	; (800777c <Get_SerialNum+0x54>)
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f000 f80f 	bl	8007780 <IntToUnicode>
  }
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	1fff7590 	.word	0x1fff7590
 8007770:	1fff7594 	.word	0x1fff7594
 8007774:	1fff7598 	.word	0x1fff7598
 8007778:	20000166 	.word	0x20000166
 800777c:	20000176 	.word	0x20000176

08007780 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
 8007796:	e027      	b.n	80077e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	0f1b      	lsrs	r3, r3, #28
 800779c:	2b09      	cmp	r3, #9
 800779e:	d80b      	bhi.n	80077b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	0f1b      	lsrs	r3, r3, #28
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	7dfb      	ldrb	r3, [r7, #23]
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4619      	mov	r1, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	440b      	add	r3, r1
 80077b0:	3230      	adds	r2, #48	; 0x30
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	701a      	strb	r2, [r3, #0]
 80077b6:	e00a      	b.n	80077ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	0f1b      	lsrs	r3, r3, #28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4619      	mov	r1, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	440b      	add	r3, r1
 80077c8:	3237      	adds	r2, #55	; 0x37
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	3301      	adds	r3, #1
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	3301      	adds	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
 80077e8:	7dfa      	ldrb	r2, [r7, #23]
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d3d3      	bcc.n	8007798 <IntToUnicode+0x18>
  }
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	2200      	movs	r2, #0
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	605a      	str	r2, [r3, #4]
 800780e:	609a      	str	r2, [r3, #8]
 8007810:	60da      	str	r2, [r3, #12]
 8007812:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <HAL_PCD_MspInit+0x88>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d12d      	bne.n	800787a <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800781e:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 8007820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007822:	4a19      	ldr	r2, [pc, #100]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 8007824:	f043 0301 	orr.w	r3, r3, #1
 8007828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	613b      	str	r3, [r7, #16]
 8007834:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007836:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800783a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800783c:	2303      	movs	r3, #3
 800783e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007844:	f107 0314 	add.w	r3, r7, #20
 8007848:	4619      	mov	r1, r3
 800784a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800784e:	f7f9 ff3b 	bl	80016c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 8007854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007856:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 8007858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800785c:	6593      	str	r3, [r2, #88]	; 0x58
 800785e:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <HAL_PCD_MspInit+0x8c>)
 8007860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800786a:	2200      	movs	r2, #0
 800786c:	2100      	movs	r1, #0
 800786e:	2014      	movs	r0, #20
 8007870:	f7f9 fc83 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007874:	2014      	movs	r0, #20
 8007876:	f7f9 fc9a 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800787a:	bf00      	nop
 800787c:	3728      	adds	r7, #40	; 0x28
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	40005c00 	.word	0x40005c00
 8007888:	40021000 	.word	0x40021000

0800788c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f7fe fdaf 	bl	8006406 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	015b      	lsls	r3, r3, #5
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	4619      	mov	r1, r3
 80078d4:	f7fe fde2 	bl	800649c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	015b      	lsls	r3, r3, #5
 80078f8:	4413      	add	r3, r2
 80078fa:	333c      	adds	r3, #60	; 0x3c
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	4619      	mov	r1, r3
 8007902:	f7fe fe3c 	bl	800657e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe ff4f 	bl	80067c0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d001      	beq.n	8007942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800793e:	f7f8 ff76 	bl	800082e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007948:	7bfa      	ldrb	r2, [r7, #15]
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fefc 	bl	800674a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe feb5 	bl	80066c8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800795e:	bf00      	nop
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fef7 	bl	800676a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007984:	4b04      	ldr	r3, [pc, #16]	; (8007998 <HAL_PCD_SuspendCallback+0x30>)
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	4a03      	ldr	r2, [pc, #12]	; (8007998 <HAL_PCD_SuspendCallback+0x30>)
 800798a:	f043 0306 	orr.w	r3, r3, #6
 800798e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	e000ed00 	.word	0xe000ed00

0800799c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079ac:	4b08      	ldr	r3, [pc, #32]	; (80079d0 <HAL_PCD_ResumeCallback+0x34>)
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	4a07      	ldr	r2, [pc, #28]	; (80079d0 <HAL_PCD_ResumeCallback+0x34>)
 80079b2:	f023 0306 	bic.w	r3, r3, #6
 80079b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80079b8:	f000 f9f6 	bl	8007da8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fee6 	bl	8006794 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	e000ed00 	.word	0xe000ed00

080079d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80079dc:	4a2b      	ldr	r2, [pc, #172]	; (8007a8c <USBD_LL_Init+0xb8>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <USBD_LL_Init+0xb8>)
 80079e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80079ec:	4b27      	ldr	r3, [pc, #156]	; (8007a8c <USBD_LL_Init+0xb8>)
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <USBD_LL_Init+0xbc>)
 80079f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80079f2:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <USBD_LL_Init+0xb8>)
 80079f4:	2208      	movs	r2, #8
 80079f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079f8:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <USBD_LL_Init+0xb8>)
 80079fa:	2202      	movs	r2, #2
 80079fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079fe:	4b23      	ldr	r3, [pc, #140]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a00:	2202      	movs	r2, #2
 8007a02:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007a04:	4b21      	ldr	r3, [pc, #132]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a0a:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a10:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a16:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a1c:	481b      	ldr	r0, [pc, #108]	; (8007a8c <USBD_LL_Init+0xb8>)
 8007a1e:	f7f9 ffed 	bl	80019fc <HAL_PCD_Init>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007a28:	f7f8 ff01 	bl	800082e <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a32:	2318      	movs	r3, #24
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	f7fa fe8e 	bl	8002758 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a42:	2358      	movs	r3, #88	; 0x58
 8007a44:	2200      	movs	r2, #0
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	f7fa fe86 	bl	8002758 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a52:	23c0      	movs	r3, #192	; 0xc0
 8007a54:	2200      	movs	r2, #0
 8007a56:	2181      	movs	r1, #129	; 0x81
 8007a58:	f7fa fe7e 	bl	8002758 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a62:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a66:	2200      	movs	r2, #0
 8007a68:	2101      	movs	r1, #1
 8007a6a:	f7fa fe75 	bl	8002758 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2182      	movs	r1, #130	; 0x82
 8007a7c:	f7fa fe6c 	bl	8002758 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	2000190c 	.word	0x2000190c
 8007a90:	40005c00 	.word	0x40005c00

08007a94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fa f861 	bl	8001b72 <HAL_PCD_Start>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f97c 	bl	8007db4 <USBD_Get_USB_Status>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	4603      	mov	r3, r0
 8007ada:	70fb      	strb	r3, [r7, #3]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70bb      	strb	r3, [r7, #2]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007af2:	78bb      	ldrb	r3, [r7, #2]
 8007af4:	883a      	ldrh	r2, [r7, #0]
 8007af6:	78f9      	ldrb	r1, [r7, #3]
 8007af8:	f7fa f9d0 	bl	8001e9c <HAL_PCD_EP_Open>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f956 	bl	8007db4 <USBD_Get_USB_Status>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fa fa11 	bl	8001f5c <HAL_PCD_EP_Close>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f937 	bl	8007db4 <USBD_Get_USB_Status>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	4611      	mov	r1, r2
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fa fabc 	bl	80020f0 <HAL_PCD_EP_SetStall>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f918 	bl	8007db4 <USBD_Get_USB_Status>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fa faf7 	bl	80021a4 <HAL_PCD_EP_ClrStall>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f8f9 	bl	8007db4 <USBD_Get_USB_Status>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007be2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	da08      	bge.n	8007bfe <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	015b      	lsls	r3, r3, #5
 8007bf6:	4413      	add	r3, r2
 8007bf8:	332a      	adds	r3, #42	; 0x2a
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	e008      	b.n	8007c10 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	015b      	lsls	r3, r3, #5
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007c0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c36:	78fa      	ldrb	r2, [r7, #3]
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fa f909 	bl	8001e52 <HAL_PCD_SetAddress>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f8b4 	bl	8007db4 <USBD_Get_USB_Status>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	461a      	mov	r2, r3
 8007c66:	460b      	mov	r3, r1
 8007c68:	72fb      	strb	r3, [r7, #11]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c7c:	893b      	ldrh	r3, [r7, #8]
 8007c7e:	7af9      	ldrb	r1, [r7, #11]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	f7fa f9fc 	bl	800207e <HAL_PCD_EP_Transmit>
 8007c86:	4603      	mov	r3, r0
 8007c88:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f891 	bl	8007db4 <USBD_Get_USB_Status>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007c96:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	461a      	mov	r2, r3
 8007cac:	460b      	mov	r3, r1
 8007cae:	72fb      	strb	r3, [r7, #11]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cc2:	893b      	ldrh	r3, [r7, #8]
 8007cc4:	7af9      	ldrb	r1, [r7, #11]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	f7fa f98a 	bl	8001fe0 <HAL_PCD_EP_Receive>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f86e 	bl	8007db4 <USBD_Get_USB_Status>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007cdc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fa f9a9 	bl	8002054 <HAL_PCD_EP_GetRxCount>
 8007d02:	4603      	mov	r3, r0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_PCDEx_LPM_Callback+0x18>
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d013      	beq.n	8007d4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8007d22:	e023      	b.n	8007d6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d007      	beq.n	8007d3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d2c:	f000 f83c 	bl	8007da8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d30:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	4a0f      	ldr	r2, [pc, #60]	; (8007d74 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d36:	f023 0306 	bic.w	r3, r3, #6
 8007d3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fd26 	bl	8006794 <USBD_LL_Resume>
    break;
 8007d48:	e010      	b.n	8007d6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fd0a 	bl	800676a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d64:	f043 0306 	orr.w	r3, r3, #6
 8007d68:	6113      	str	r3, [r2, #16]
    break;   
 8007d6a:	bf00      	nop
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000ed00 	.word	0xe000ed00

08007d78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d80:	4b03      	ldr	r3, [pc, #12]	; (8007d90 <USBD_static_malloc+0x18>)
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	200007d4 	.word	0x200007d4

08007d94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007dac:	f7f8 fac3 	bl	8000336 <SystemClock_Config>
}
 8007db0:	bf00      	nop
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d817      	bhi.n	8007df8 <USBD_Get_USB_Status+0x44>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <USBD_Get_USB_Status+0x1c>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007de1 	.word	0x08007de1
 8007dd4:	08007de7 	.word	0x08007de7
 8007dd8:	08007ded 	.word	0x08007ded
 8007ddc:	08007df3 	.word	0x08007df3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
    break;
 8007de4:	e00b      	b.n	8007dfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007de6:	2302      	movs	r3, #2
 8007de8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dea:	e008      	b.n	8007dfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
    break;
 8007df0:	e005      	b.n	8007dfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007df2:	2302      	movs	r3, #2
 8007df4:	73fb      	strb	r3, [r7, #15]
    break;
 8007df6:	e002      	b.n	8007dfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfc:	bf00      	nop
  }
  return usb_status;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	4e0d      	ldr	r6, [pc, #52]	; (8007e44 <__libc_init_array+0x38>)
 8007e10:	4c0d      	ldr	r4, [pc, #52]	; (8007e48 <__libc_init_array+0x3c>)
 8007e12:	1ba4      	subs	r4, r4, r6
 8007e14:	10a4      	asrs	r4, r4, #2
 8007e16:	2500      	movs	r5, #0
 8007e18:	42a5      	cmp	r5, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	4e0b      	ldr	r6, [pc, #44]	; (8007e4c <__libc_init_array+0x40>)
 8007e1e:	4c0c      	ldr	r4, [pc, #48]	; (8007e50 <__libc_init_array+0x44>)
 8007e20:	f000 f820 	bl	8007e64 <_init>
 8007e24:	1ba4      	subs	r4, r4, r6
 8007e26:	10a4      	asrs	r4, r4, #2
 8007e28:	2500      	movs	r5, #0
 8007e2a:	42a5      	cmp	r5, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e34:	4798      	blx	r3
 8007e36:	3501      	adds	r5, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e3e:	4798      	blx	r3
 8007e40:	3501      	adds	r5, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	08007ed4 	.word	0x08007ed4
 8007e48:	08007ed4 	.word	0x08007ed4
 8007e4c:	08007ed4 	.word	0x08007ed4
 8007e50:	08007ed8 	.word	0x08007ed8

08007e54 <memset>:
 8007e54:	4402      	add	r2, r0
 8007e56:	4603      	mov	r3, r0
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d100      	bne.n	8007e5e <memset+0xa>
 8007e5c:	4770      	bx	lr
 8007e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e62:	e7f9      	b.n	8007e58 <memset+0x4>

08007e64 <_init>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr

08007e70 <_fini>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr
