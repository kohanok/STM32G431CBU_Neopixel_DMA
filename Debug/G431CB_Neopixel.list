
G431CB_Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008008  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08008238  08008238  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008238  08008238  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002048  20000180  080083c0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c8  080083c0  000221c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcae  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a96  00000000  00000000  0003de5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001650  00000000  00000000  000418f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00042f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002144f  00000000  00000000  000443f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001443a  00000000  00000000  0006583f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7df9  00000000  00000000  00079c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  00141af0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080081c8 	.word	0x080081c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	080081c8 	.word	0x080081c8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b092      	sub	sp, #72	; 0x48
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f001 f812 	bl	8001246 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8c2 	bl	80003aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 fa81 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 800022a:	f000 fa31 	bl	8000690 <MX_DMA_Init>
  MX_TIM2_Init();
 800022e:	f000 f95f 	bl	80004f0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000232:	f007 fac9 	bl	80077c8 <MX_USB_Device_Init>
  MX_SPI1_Init();
 8000236:	f000 f91d 	bl	8000474 <MX_SPI1_Init>
  MX_TIM17_Init();
 800023a:	f000 f9b1 	bl	80005a0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  ws2812Init();
 800023e:	f000 fd91 	bl	8000d64 <ws2812Init>
  ws2812Begin(LED_CNT);
 8000242:	2010      	movs	r0, #16
 8000244:	f000 fda0 	bl	8000d88 <ws2812Begin>

  uint32_t pre_time=0;
 8000248:	2300      	movs	r3, #0
 800024a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t rainbow_pre_time=0;
 800024c:	2300      	movs	r3, #0
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t led_time=200;
 8000250:	23c8      	movs	r3, #200	; 0xc8
 8000252:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t rainbow_led_time=20;
 8000254:	2314      	movs	r3, #20
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t led_count=10;
 8000258:	230a      	movs	r3, #10
 800025a:	627b      	str	r3, [r7, #36]	; 0x24
	bool led_flg=false;
 800025c:	2300      	movs	r3, #0
 800025e:	623b      	str	r3, [r7, #32]

	uint32_t test_count = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]

  uint32_t led_index = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  int32_t  led_index_pre = -1;
 8000268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800026c:	61bb      	str	r3, [r7, #24]
  uint8_t led_color = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	75fb      	strb	r3, [r7, #23]

	uint32_t led_mask= 0b1110000111;
 8000272:	f240 3387 	movw	r3, #903	; 0x387
 8000276:	613b      	str	r3, [r7, #16]
	uint32_t current_led=0;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	uint32_t test2=0;
 800027c:	2300      	movs	r3, #0
 800027e:	60bb      	str	r3, [r7, #8]
	uint32_t test1=0;
 8000280:	2300      	movs	r3, #0
 8000282:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint16_t i, j;
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 8000284:	2300      	movs	r3, #0
 8000286:	873b      	strh	r3, [r7, #56]	; 0x38
 8000288:	e089      	b.n	800039e <main+0x186>
			if(millis()-rainbow_pre_time >= rainbow_led_time)
 800028a:	f000 fabf 	bl	800080c <millis>
 800028e:	4602      	mov	r2, r0
 8000290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000292:	1ad3      	subs	r3, r2, r3
 8000294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000296:	429a      	cmp	r2, r3
 8000298:	f200 8081 	bhi.w	800039e <main+0x186>
			{
				rainbow_pre_time = millis();
 800029c:	f000 fab6 	bl	800080c <millis>
 80002a0:	6438      	str	r0, [r7, #64]	; 0x40
				j++;
 80002a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002a4:	3301      	adds	r3, #1
 80002a6:	873b      	strh	r3, [r7, #56]	; 0x38
				for(i=0; i< LED_CNT; i++) {
 80002a8:	2300      	movs	r3, #0
 80002aa:	877b      	strh	r3, [r7, #58]	; 0x3a
 80002ac:	e016      	b.n	80002dc <main+0xc4>
						setPixelColor(i, Wheel(((i * 256 / LED_CNT) + j) & 255));
 80002ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80002b0:	021b      	lsls	r3, r3, #8
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	da00      	bge.n	80002b8 <main+0xa0>
 80002b6:	330f      	adds	r3, #15
 80002b8:	111b      	asrs	r3, r3, #4
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	4413      	add	r3, r2
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 ff31 	bl	800112c <Wheel>
 80002ca:	4602      	mov	r2, r0
 80002cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80002ce:	4611      	mov	r1, r2
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fea7 	bl	8001024 <setPixelColor>
				for(i=0; i< LED_CNT; i++) {
 80002d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80002d8:	3301      	adds	r3, #1
 80002da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80002dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80002de:	2b0f      	cmp	r3, #15
 80002e0:	d9e5      	bls.n	80002ae <main+0x96>
				}


				if(millis()-pre_time >= led_time)
 80002e2:	f000 fa93 	bl	800080c <millis>
 80002e6:	4602      	mov	r2, r0
 80002e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d855      	bhi.n	800039e <main+0x186>
				{
					pre_time = millis();
 80002f2:	f000 fa8b 	bl	800080c <millis>
 80002f6:	6478      	str	r0, [r7, #68]	; 0x44
					test2 = rotateLeft(led_mask, led_index%LED_CNT);
 80002f8:	693a      	ldr	r2, [r7, #16]
 80002fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	4619      	mov	r1, r3
 8000302:	4610      	mov	r0, r2
 8000304:	f000 fa89 	bl	800081a <rotateLeft>
 8000308:	4603      	mov	r3, r0
 800030a:	60bb      	str	r3, [r7, #8]
					test1 = rotateRight(led_mask, led_index%LED_CNT);
 800030c:	693a      	ldr	r2, [r7, #16]
 800030e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000310:	f003 030f 	and.w	r3, r3, #15
 8000314:	4619      	mov	r1, r3
 8000316:	4610      	mov	r0, r2
 8000318:	f000 fa9f 	bl	800085a <rotateRight>
 800031c:	4603      	mov	r3, r0
 800031e:	607b      	str	r3, [r7, #4]

					led_index++;
 8000320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000322:	3301      	adds	r3, #1
 8000324:	63fb      	str	r3, [r7, #60]	; 0x3c
					for(uint32_t j=0; j<12; j++) {
 8000326:	2300      	movs	r3, #0
 8000328:	637b      	str	r3, [r7, #52]	; 0x34
 800032a:	e017      	b.n	800035c <main+0x144>
						if( test2 >> j & 0x01){
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000330:	fa22 f303 	lsr.w	r3, r2, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d006      	beq.n	800034a <main+0x132>
								ws2812SetColor(j, 255, 255, 255);
 800033c:	23ff      	movs	r3, #255	; 0xff
 800033e:	22ff      	movs	r2, #255	; 0xff
 8000340:	21ff      	movs	r1, #255	; 0xff
 8000342:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000344:	f000 fd52 	bl	8000dec <ws2812SetColor>
 8000348:	e005      	b.n	8000356 <main+0x13e>
						}else {
							ws2812SetColor(j, 0, 0, 0);
 800034a:	2300      	movs	r3, #0
 800034c:	2200      	movs	r2, #0
 800034e:	2100      	movs	r1, #0
 8000350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000352:	f000 fd4b 	bl	8000dec <ws2812SetColor>
					for(uint32_t j=0; j<12; j++) {
 8000356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000358:	3301      	adds	r3, #1
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
 800035c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800035e:	2b0b      	cmp	r3, #11
 8000360:	d9e4      	bls.n	800032c <main+0x114>
						}
					}
					for(uint32_t j=20; j>11; j--) {
 8000362:	2314      	movs	r3, #20
 8000364:	633b      	str	r3, [r7, #48]	; 0x30
 8000366:	e017      	b.n	8000398 <main+0x180>
						if( test1 >> j & 0x01){
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800036c:	fa22 f303 	lsr.w	r3, r2, r3
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d006      	beq.n	8000386 <main+0x16e>
								ws2812SetColor(j, 255, 255, 255);
 8000378:	23ff      	movs	r3, #255	; 0xff
 800037a:	22ff      	movs	r2, #255	; 0xff
 800037c:	21ff      	movs	r1, #255	; 0xff
 800037e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000380:	f000 fd34 	bl	8000dec <ws2812SetColor>
 8000384:	e005      	b.n	8000392 <main+0x17a>
						}else {
							ws2812SetColor(j, 0, 0, 0);
 8000386:	2300      	movs	r3, #0
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800038e:	f000 fd2d 	bl	8000dec <ws2812SetColor>
					for(uint32_t j=20; j>11; j--) {
 8000392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000394:	3b01      	subs	r3, #1
 8000396:	633b      	str	r3, [r7, #48]	; 0x30
 8000398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800039a:	2b0b      	cmp	r3, #11
 800039c:	d8e4      	bhi.n	8000368 <main+0x150>
		for(j=0; j<256*5;) { // 5 cycles of all colors on wheel
 800039e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80003a0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80003a4:	f4ff af71 	bcc.w	800028a <main+0x72>
  {
 80003a8:	e76c      	b.n	8000284 <main+0x6c>

080003aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b0a4      	sub	sp, #144	; 0x90
 80003ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003b4:	2238      	movs	r2, #56	; 0x38
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f007 fefd 	bl	80081b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ce:	463b      	mov	r3, r7
 80003d0:	2244      	movs	r2, #68	; 0x44
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f007 feef 	bl	80081b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003da:	2000      	movs	r0, #0
 80003dc:	f002 fbd6 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003e0:	2321      	movs	r3, #33	; 0x21
 80003e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f2:	2303      	movs	r3, #3
 80003f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003f6:	2304      	movs	r3, #4
 80003f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003fa:	2355      	movs	r3, #85	; 0x55
 80003fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000400:	2302      	movs	r3, #2
 8000402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000406:	2302      	movs	r3, #2
 8000408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fc5c 	bl	8002cd4 <HAL_RCC_OscConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000422:	f000 fa3e 	bl	80008a2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000426:	230f      	movs	r3, #15
 8000428:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800042a:	2303      	movs	r3, #3
 800042c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800043a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800043e:	2108      	movs	r1, #8
 8000440:	4618      	mov	r0, r3
 8000442:	f002 ff5f 	bl	8003304 <HAL_RCC_ClockConfig>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800044c:	f000 fa29 	bl	80008a2 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000454:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000456:	2300      	movs	r3, #0
 8000458:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	4618      	mov	r0, r3
 800045e:	f003 f931 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000468:	f000 fa1b 	bl	80008a2 <Error_Handler>
  }
}
 800046c:	bf00      	nop
 800046e:	3790      	adds	r7, #144	; 0x90
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <MX_SPI1_Init+0x74>)
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <MX_SPI1_Init+0x78>)
 800047c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <MX_SPI1_Init+0x74>)
 800048e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000492:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <MX_SPI1_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004aa:	2218      	movs	r2, #24
 80004ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c2:	2207      	movs	r2, #7
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004ce:	2208      	movs	r2, #8
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_SPI1_Init+0x74>)
 80004d4:	f003 fae6 	bl	8003aa4 <HAL_SPI_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004de:	f000 f9e0 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200010e0 	.word	0x200010e0
 80004ec:	40013000 	.word	0x40013000

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]
 8000512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_TIM2_Init+0xac>)
 8000516:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_TIM2_Init+0xac>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_TIM2_Init+0xac>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 212;
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <MX_TIM2_Init+0xac>)
 800052a:	22d4      	movs	r2, #212	; 0xd4
 800052c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_TIM2_Init+0xac>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <MX_TIM2_Init+0xac>)
 8000536:	2200      	movs	r2, #0
 8000538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800053a:	4818      	ldr	r0, [pc, #96]	; (800059c <MX_TIM2_Init+0xac>)
 800053c:	f003 fb9b 	bl	8003c76 <HAL_TIM_PWM_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000546:	f000 f9ac 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	4619      	mov	r1, r3
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <MX_TIM2_Init+0xac>)
 800055a:	f004 fb73 	bl	8004c44 <HAL_TIMEx_MasterConfigSynchronization>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000564:	f000 f99d 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4807      	ldr	r0, [pc, #28]	; (800059c <MX_TIM2_Init+0xac>)
 8000580:	f003 fdb4 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800058a:	f000 f98a 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_TIM2_Init+0xac>)
 8000590:	f000 fb18 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 8000594:	bf00      	nop
 8000596:	3728      	adds	r7, #40	; 0x28
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20001144 	.word	0x20001144

080005a0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2234      	movs	r2, #52	; 0x34
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f007 fdf9 	bl	80081b8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005c8:	4a30      	ldr	r2, [pc, #192]	; (800068c <MX_TIM17_Init+0xec>)
 80005ca:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80005cc:	4b2e      	ldr	r3, [pc, #184]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d2:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 212;
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005da:	22d4      	movs	r2, #212	; 0xd4
 80005dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <MX_TIM17_Init+0xe8>)
 80005f2:	f003 fae9 	bl	8003bc8 <HAL_TIM_Base_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80005fc:	f000 f951 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <MX_TIM17_Init+0xe8>)
 8000602:	f003 fb38 	bl	8003c76 <HAL_TIM_PWM_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 800060c:	f000 f949 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800061c:	2300      	movs	r3, #0
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <MX_TIM17_Init+0xe8>)
 8000636:	f003 fd59 	bl	80040ec <HAL_TIM_PWM_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8000640:	f000 f92f 	bl	80008a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <MX_TIM17_Init+0xe8>)
 800066c:	f004 fb6c 	bl	8004d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8000676:	f000 f914 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <MX_TIM17_Init+0xe8>)
 800067c:	f000 faa2 	bl	8000bc4 <HAL_TIM_MspPostInit>

}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	; 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000108c 	.word	0x2000108c
 800068c:	40014800 	.word	0x40014800

08000690 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000696:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_DMA_Init+0x98>)
 8000698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <MX_DMA_Init+0x98>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6493      	str	r3, [r2, #72]	; 0x48
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_DMA_Init+0x98>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_DMA_Init+0x98>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <MX_DMA_Init+0x98>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6493      	str	r3, [r2, #72]	; 0x48
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_DMA_Init+0x98>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_DMA_Init+0x98>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <MX_DMA_Init+0x98>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6493      	str	r3, [r2, #72]	; 0x48
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_DMA_Init+0x98>)
 80006d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	200b      	movs	r0, #11
 80006e4:	f000 fefb 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006e8:	200b      	movs	r0, #11
 80006ea:	f000 ff12 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	200c      	movs	r0, #12
 80006f4:	f000 fef3 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006f8:	200c      	movs	r0, #12
 80006fa:	f000 ff0a 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2038      	movs	r0, #56	; 0x38
 8000704:	f000 feeb 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000708:	2038      	movs	r0, #56	; 0x38
 800070a:	f000 ff02 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2039      	movs	r0, #57	; 0x39
 8000714:	f000 fee3 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000718:	2039      	movs	r0, #57	; 0x39
 800071a:	f000 fefa 	bl	8001512 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_GPIO_Init+0xd4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000760:	f043 0320 	orr.w	r3, r3, #32
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a22      	ldr	r2, [pc, #136]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4816      	ldr	r0, [pc, #88]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007aa:	f001 fac1 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_GPIO_Init+0xdc>)
 80007b6:	f001 fabb 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0xd8>)
 80007d4:	f001 f92a 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 80007d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0xdc>)
 80007f2:	f001 f91b 	bl	8001a2c <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	48000800 	.word	0x48000800
 8000808:	48000400 	.word	0x48000400

0800080c <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000810:	f000 fd7e 	bl	8001310 <HAL_GetTick>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}

0800081a <rotateLeft>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate left.
 */
int rotateLeft(int num, unsigned int rotation)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
    int DROPPED_MSB;

    // The effective rotation
    rotation %= INT_BITS;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 800082c:	e009      	b.n	8000842 <rotateLeft+0x28>
    {
        // Get MSB of num before it gets dropped
        DROPPED_MSB = (num >> INT_BITS) & 1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	141b      	asrs	r3, r3, #16
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]

        // Left rotate num by 1 and
        // Set its dropped MSB as new LSB
        num = (num << 1) | DROPPED_MSB;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	68fa      	ldr	r2, [r7, #12]
 800083e:	4313      	orrs	r3, r2
 8000840:	607b      	str	r3, [r7, #4]
    while(rotation--)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	603a      	str	r2, [r7, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1f0      	bne.n	800082e <rotateLeft+0x14>
    }

    return num;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <rotateRight>:
 *
 * @num         Number to rotate.
 * @rotation    Number of times to rotate right.
 */
int rotateRight(int num, unsigned int rotation)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
    int DROPPED_LSB;

    // The effective rotation
    rotation %= INT_BITS;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	603b      	str	r3, [r7, #0]


    // Loop till rotation becomes 0
    while(rotation--)
 800086c:	e00d      	b.n	800088a <rotateRight+0x30>
    {
        // Get LSB of num before it gets dropped
        DROPPED_LSB = num & 1;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60fb      	str	r3, [r7, #12]

        // Right shift num by 1 and
        // Clear its MSB
        num = (num >> 1) & (~(1 << INT_BITS));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	105b      	asrs	r3, r3, #1
 800087a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800087e:	607b      	str	r3, [r7, #4]

        // Set its dropped LSB as new MSB
        num = num | (DROPPED_LSB << INT_BITS);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4313      	orrs	r3, r2
 8000888:	607b      	str	r3, [r7, #4]
    while(rotation--)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	1e5a      	subs	r2, r3, #1
 800088e:	603a      	str	r2, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ec      	bne.n	800086e <rotateRight+0x14>
    }

    return num;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6093      	str	r3, [r2, #8]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40007000 	.word	0x40007000

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6593      	str	r3, [r2, #88]	; 0x58
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000906:	f7ff ffd3 	bl	80008b0 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <HAL_SPI_MspInit+0x164>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f040 809b 	bne.w	8000a72 <HAL_SPI_MspInit+0x15a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800093c:	4b50      	ldr	r3, [pc, #320]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000940:	4a4f      	ldr	r2, [pc, #316]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 8000942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000946:	6613      	str	r3, [r2, #96]	; 0x60
 8000948:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	4a49      	ldr	r2, [pc, #292]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_SPI_MspInit+0x168>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000984:	2360      	movs	r3, #96	; 0x60
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000994:	2305      	movs	r3, #5
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f001 f843 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009a6:	2320      	movs	r3, #32
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b6:	2305      	movs	r3, #5
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4830      	ldr	r0, [pc, #192]	; (8000a84 <HAL_SPI_MspInit+0x16c>)
 80009c2:	f001 f833 	bl	8001a2c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Channel1;
 80009c6:	4b30      	ldr	r3, [pc, #192]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009c8:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <HAL_SPI_MspInit+0x174>)
 80009ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009ce:	220a      	movs	r2, #10
 80009d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a00:	4821      	ldr	r0, [pc, #132]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 8000a02:	f000 fda1 	bl	8001548 <HAL_DMA_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8000a0c:	f7ff ff49 	bl	80008a2 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 8000a14:	659a      	str	r2, [r3, #88]	; 0x58
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <HAL_SPI_MspInit+0x170>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel2;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_SPI_MspInit+0x17c>)
 8000a20:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a24:	220b      	movs	r2, #11
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a40:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a48:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a58:	f000 fd76 	bl	8001548 <HAL_DMA_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_SPI_MspInit+0x14e>
    {
      Error_Handler();
 8000a62:	f7ff ff1e 	bl	80008a2 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a6a:	655a      	str	r2, [r3, #84]	; 0x54
 8000a6c:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_SPI_MspInit+0x178>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40013000 	.word	0x40013000
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	20001190 	.word	0x20001190
 8000a8c:	40020408 	.word	0x40020408
 8000a90:	20001254 	.word	0x20001254
 8000a94:	4002041c 	.word	0x4002041c

08000a98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa8:	d135      	bne.n	8000b16 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <HAL_TIM_PWM_MspInit+0x88>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_TIM_PWM_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_TIM_PWM_MspInit+0x88>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <HAL_TIM_PWM_MspInit+0x90>)
 8000ac6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000aca:	2238      	movs	r2, #56	; 0x38
 8000acc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000af0:	2220      	movs	r2, #32
 8000af2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000afc:	f000 fd24 	bl	8001548 <HAL_DMA_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 8000b06:	f7ff fecc 	bl	80008a2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PWM_MspInit+0x8c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	2000102c 	.word	0x2000102c
 8000b28:	40020008 	.word	0x40020008

08000b2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1e      	ldr	r2, [pc, #120]	; (8000bb4 <HAL_TIM_Base_MspInit+0x88>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d135      	bne.n	8000baa <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_TIM_Base_MspInit+0x8c>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_TIM_Base_MspInit+0x8c>)
 8000b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_TIM_Base_MspInit+0x8c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM17 DMA Init */
    /* TIM17_CH1 Init */
    hdma_tim17_ch1.Instance = DMA1_Channel2;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_TIM_Base_MspInit+0x94>)
 8000b5a:	601a      	str	r2, [r3, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b5e:	2254      	movs	r2, #84	; 0x54
 8000b60:	605a      	str	r2, [r3, #4]
    hdma_tim17_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	609a      	str	r2, [r3, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	611a      	str	r2, [r3, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b84:	2220      	movs	r2, #32
 8000b86:	61da      	str	r2, [r3, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000b90:	f000 fcda 	bl	8001548 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 8000b9a:	f7ff fe82 	bl	80008a2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8000ba4:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_TIM_Base_MspInit+0x90>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40014800 	.word	0x40014800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	200011f4 	.word	0x200011f4
 8000bc0:	4002001c 	.word	0x4002001c

08000bc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d11d      	bne.n	8000c22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f000 ff06 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000c20:	e021      	b.n	8000c66 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <HAL_TIM_MspPostInit+0xb0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d11c      	bne.n	8000c66 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_MspPostInit+0xac>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000c54:	2301      	movs	r3, #1
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 fee3 	bl	8001a2c <HAL_GPIO_Init>
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40014800 	.word	0x40014800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 fb0e 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cda:	f000 fd58 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000102c 	.word	0x2000102c

08000ce8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Channel2_IRQHandler+0x10>)
 8000cee:	f000 fd4e 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200011f4 	.word	0x200011f4

08000cfc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <USB_LP_IRQHandler+0x10>)
 8000d02:	f001 f90a 	bl	8001f1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20001f54 	.word	0x20001f54

08000d10 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA2_Channel1_IRQHandler+0x10>)
 8000d16:	f000 fd3a 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20001190 	.word	0x20001190

08000d24 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA2_Channel2_IRQHandler+0x10>)
 8000d2a:	f000 fd30 	bl	800178e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001254 	.word	0x20001254

08000d38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SystemInit+0x28>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <SystemInit+0x28>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SystemInit+0x28>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	609a      	str	r2, [r3, #8]
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <ws2812Init>:
extern TIM_HandleTypeDef htim17;



bool ws2812Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 8000d68:	f240 6232 	movw	r2, #1586	; 0x632
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4804      	ldr	r0, [pc, #16]	; (8000d80 <ws2812Init+0x1c>)
 8000d70:	f007 fa22 	bl	80081b8 <memset>
  is_init = true;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <ws2812Init+0x20>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

  return true;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001a0 	.word	0x200001a0
 8000d84:	2000019c 	.word	0x2000019c

08000d88 <ws2812Begin>:

void ws2812Begin(uint32_t led_cnt)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  ws2812.led_cnt = led_cnt;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <ws2812Begin+0x50>)
 8000d96:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)led_buf, (50 + 24 *  ws2812.led_cnt) * 1);
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <ws2812Begin+0x50>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	0052      	lsls	r2, r2, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3332      	adds	r3, #50	; 0x32
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <ws2812Begin+0x54>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <ws2812Begin+0x58>)
 8000db0:	f002 ffb8 	bl	8003d24 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim17, TIM_CHANNEL_1, (uint32_t *)led_buf_rainbow, (50 + 24 *  ws2812.led_cnt) * 1);
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ws2812Begin+0x50>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	0052      	lsls	r2, r2, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3332      	adds	r3, #50	; 0x32
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <ws2812Begin+0x5c>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <ws2812Begin+0x60>)
 8000dcc:	f002 ffaa 	bl	8003d24 <HAL_TIM_PWM_Start_DMA>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200012b8 	.word	0x200012b8
 8000ddc:	200001a0 	.word	0x200001a0
 8000de0:	20001144 	.word	0x20001144
 8000de4:	200007d4 	.word	0x200007d4
 8000de8:	2000108c 	.word	0x2000108c

08000dec <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b08b      	sub	sp, #44	; 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	4608      	mov	r0, r1
 8000df6:	4611      	mov	r1, r2
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	70fb      	strb	r3, [r7, #3]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70bb      	strb	r3, [r7, #2]
 8000e02:	4613      	mov	r3, r2
 8000e04:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0a:	e03e      	b.n	8000e8a <ws2812SetColor+0x9e>
  {
    if (red & (1<<7))
 8000e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	da06      	bge.n	8000e22 <ws2812SetColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8000e14:	f107 0218 	add.w	r2, r7, #24
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	4413      	add	r3, r2
 8000e1c:	2287      	movs	r2, #135	; 0x87
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e005      	b.n	8000e2e <ws2812SetColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8000e22:	f107 0218 	add.w	r2, r7, #24
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	4413      	add	r3, r2
 8000e2a:	2243      	movs	r2, #67	; 0x43
 8000e2c:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8000e34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da06      	bge.n	8000e4a <ws2812SetColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8000e3c:	f107 0210 	add.w	r2, r7, #16
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	4413      	add	r3, r2
 8000e44:	2287      	movs	r2, #135	; 0x87
 8000e46:	701a      	strb	r2, [r3, #0]
 8000e48:	e005      	b.n	8000e56 <ws2812SetColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8000e4a:	f107 0210 	add.w	r2, r7, #16
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	4413      	add	r3, r2
 8000e52:	2243      	movs	r2, #67	; 0x43
 8000e54:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8000e56:	78bb      	ldrb	r3, [r7, #2]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8000e5c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da06      	bge.n	8000e72 <ws2812SetColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8000e64:	f107 0208 	add.w	r2, r7, #8
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2287      	movs	r2, #135	; 0x87
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e005      	b.n	8000e7e <ws2812SetColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8000e72:	f107 0208 	add.w	r2, r7, #8
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	4413      	add	r3, r2
 8000e7a:	2243      	movs	r2, #67	; 0x43
 8000e7c:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8000e7e:	787b      	ldrb	r3, [r7, #1]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3301      	adds	r3, #1
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	2b07      	cmp	r3, #7
 8000e8e:	ddbd      	ble.n	8000e0c <ws2812SetColor+0x20>
  }

  offset = 50;
 8000e90:	2332      	movs	r3, #50	; 0x32
 8000e92:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <ws2812SetColor+0x118>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	cb03      	ldmia	r3!, {r0, r1}
 8000eb0:	6010      	str	r0, [r2, #0]
 8000eb2:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3308      	adds	r3, #8
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <ws2812SetColor+0x118>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	cb03      	ldmia	r3!, {r0, r1}
 8000ed2:	6010      	str	r0, [r2, #0]
 8000ed4:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3310      	adds	r3, #16
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <ws2812SetColor+0x118>)
 8000eea:	4413      	add	r3, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	cb03      	ldmia	r3!, {r0, r1}
 8000ef4:	6010      	str	r0, [r2, #0]
 8000ef6:	6051      	str	r1, [r2, #4]
}
 8000ef8:	bf00      	nop
 8000efa:	372c      	adds	r7, #44	; 0x2c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	200001a0 	.word	0x200001a0

08000f08 <ws2812SetRanbowColor>:

void ws2812SetRanbowColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b08b      	sub	sp, #44	; 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	70fb      	strb	r3, [r7, #3]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	70bb      	strb	r3, [r7, #2]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	707b      	strb	r3, [r7, #1]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
 8000f26:	e03e      	b.n	8000fa6 <ws2812SetRanbowColor+0x9e>
  {
    if (red & (1<<7))
 8000f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	da06      	bge.n	8000f3e <ws2812SetRanbowColor+0x36>
    {
      r_bit[i] = BIT_HIGH;
 8000f30:	f107 0218 	add.w	r2, r7, #24
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	4413      	add	r3, r2
 8000f38:	2287      	movs	r2, #135	; 0x87
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e005      	b.n	8000f4a <ws2812SetRanbowColor+0x42>
    }
    else
    {
      r_bit[i] = BIT_LOW;
 8000f3e:	f107 0218 	add.w	r2, r7, #24
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	4413      	add	r3, r2
 8000f46:	2243      	movs	r2, #67	; 0x43
 8000f48:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	70fb      	strb	r3, [r7, #3]

    if (green & (1<<7))
 8000f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da06      	bge.n	8000f66 <ws2812SetRanbowColor+0x5e>
    {
      g_bit[i] = BIT_HIGH;
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	4413      	add	r3, r2
 8000f60:	2287      	movs	r2, #135	; 0x87
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e005      	b.n	8000f72 <ws2812SetRanbowColor+0x6a>
    }
    else
    {
      g_bit[i] = BIT_LOW;
 8000f66:	f107 0210 	add.w	r2, r7, #16
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2243      	movs	r2, #67	; 0x43
 8000f70:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 8000f72:	78bb      	ldrb	r3, [r7, #2]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	70bb      	strb	r3, [r7, #2]

    if (blue & (1<<7))
 8000f78:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da06      	bge.n	8000f8e <ws2812SetRanbowColor+0x86>
    {
      b_bit[i] = BIT_HIGH;
 8000f80:	f107 0208 	add.w	r2, r7, #8
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	4413      	add	r3, r2
 8000f88:	2287      	movs	r2, #135	; 0x87
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e005      	b.n	8000f9a <ws2812SetRanbowColor+0x92>
    }
    else
    {
      b_bit[i] = BIT_LOW;
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	4413      	add	r3, r2
 8000f96:	2243      	movs	r2, #67	; 0x43
 8000f98:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 8000f9a:	787b      	ldrb	r3, [r7, #1]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	707b      	strb	r3, [r7, #1]
  for (int i=0; i<8; i++)
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	ddbd      	ble.n	8000f28 <ws2812SetRanbowColor+0x20>
  }

  offset = 50;
 8000fac:	2332      	movs	r3, #50	; 0x32
 8000fae:	623b      	str	r3, [r7, #32]

  memcpy(&led_buf_rainbow[offset + index*24 + 8*0], g_bit, 8*1);
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <ws2812SetRanbowColor+0x118>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	cb03      	ldmia	r3!, {r0, r1}
 8000fcc:	6010      	str	r0, [r2, #0]
 8000fce:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*1], r_bit, 8*1);
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <ws2812SetRanbowColor+0x118>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f107 0318 	add.w	r3, r7, #24
 8000fec:	cb03      	ldmia	r3!, {r0, r1}
 8000fee:	6010      	str	r0, [r2, #0]
 8000ff0:	6051      	str	r1, [r2, #4]
  memcpy(&led_buf_rainbow[offset + index*24 + 8*2], b_bit, 8*1);
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	4413      	add	r3, r2
 8001002:	3310      	adds	r3, #16
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <ws2812SetRanbowColor+0x118>)
 8001006:	4413      	add	r3, r2
 8001008:	461a      	mov	r2, r3
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	cb03      	ldmia	r3!, {r0, r1}
 8001010:	6010      	str	r0, [r2, #0]
 8001012:	6051      	str	r1, [r2, #4]
}
 8001014:	bf00      	nop
 8001016:	372c      	adds	r7, #44	; 0x2c
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	200007d4 	.word	0x200007d4

08001024 <setPixelColor>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is white (for RGBW
              pixels) or ignored (for RGB pixels), next is red, then green,
              and least significant byte is blue.
*/
void setPixelColor(uint16_t n, uint32_t c) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	80fb      	strh	r3, [r7, #6]
  if(n < ws2812.led_cnt) {
 8001030:	4b37      	ldr	r3, [pc, #220]	; (8001110 <setPixelColor+0xec>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	88fa      	ldrh	r2, [r7, #6]
 8001036:	429a      	cmp	r2, r3
 8001038:	d266      	bcs.n	8001108 <setPixelColor+0xe4>
    uint8_t *p,
      r = (uint8_t)(c >> 16),
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	0c1b      	lsrs	r3, r3, #16
 800103e:	72fb      	strb	r3, [r7, #11]
      g = (uint8_t)(c >>  8),
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	72bb      	strb	r3, [r7, #10]
      b = (uint8_t)c;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	727b      	strb	r3, [r7, #9]
    if(brightness) { // See notes in setBrightness()
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <setPixelColor+0xf0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d014      	beq.n	800107c <setPixelColor+0x58>
      r = (r * brightness) >> 8;
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	4a2f      	ldr	r2, [pc, #188]	; (8001114 <setPixelColor+0xf0>)
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	121b      	asrs	r3, r3, #8
 800105e:	72fb      	strb	r3, [r7, #11]
      g = (g * brightness) >> 8;
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <setPixelColor+0xf0>)
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	121b      	asrs	r3, r3, #8
 800106c:	72bb      	strb	r3, [r7, #10]
      b = (b * brightness) >> 8;
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	4a28      	ldr	r2, [pc, #160]	; (8001114 <setPixelColor+0xf0>)
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	121b      	asrs	r3, r3, #8
 800107a:	727b      	strb	r3, [r7, #9]
    }
    if(wOffset == rOffset) {
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <setPixelColor+0xf4>)
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <setPixelColor+0xf8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d108      	bne.n	800109a <setPixelColor+0x76>
      p = &pixels[n * 3];
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <setPixelColor+0xfc>)
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	440b      	add	r3, r1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e01b      	b.n	80010d2 <setPixelColor+0xae>
    } else {
      p = &pixels[n * 4];
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <setPixelColor+0xfc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
      uint8_t w = (uint8_t)(c >> 24);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	0e1b      	lsrs	r3, r3, #24
 80010aa:	723b      	strb	r3, [r7, #8]
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <setPixelColor+0xf0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <setPixelColor+0xa0>
 80010b4:	7a3b      	ldrb	r3, [r7, #8]
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <setPixelColor+0xf0>)
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	fb02 f303 	mul.w	r3, r2, r3
 80010be:	121b      	asrs	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	e000      	b.n	80010c6 <setPixelColor+0xa2>
 80010c4:	7a3b      	ldrb	r3, [r7, #8]
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <setPixelColor+0xf4>)
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	4611      	mov	r1, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	440a      	add	r2, r1
 80010d0:	7013      	strb	r3, [r2, #0]
    }
    p[rOffset] = r;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <setPixelColor+0xf8>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	7afa      	ldrb	r2, [r7, #11]
 80010de:	701a      	strb	r2, [r3, #0]
    p[gOffset] = g;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <setPixelColor+0x100>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	7aba      	ldrb	r2, [r7, #10]
 80010ec:	701a      	strb	r2, [r3, #0]
    p[bOffset] = b;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <setPixelColor+0x104>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	7a7a      	ldrb	r2, [r7, #9]
 80010fa:	701a      	strb	r2, [r3, #0]
    ws2812SetRanbowColor(n, r, g , b);
 80010fc:	88f8      	ldrh	r0, [r7, #6]
 80010fe:	7a7b      	ldrb	r3, [r7, #9]
 8001100:	7aba      	ldrb	r2, [r7, #10]
 8001102:	7af9      	ldrb	r1, [r7, #11]
 8001104:	f7ff ff00 	bl	8000f08 <ws2812SetRanbowColor>
  }

}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200012b8 	.word	0x200012b8
 8001114:	200011f0 	.word	0x200011f0
 8001118:	200010d8 	.word	0x200010d8
 800111c:	200012b4 	.word	0x200012b4
 8001120:	20001028 	.word	0x20001028
 8001124:	200010dc 	.word	0x200010dc
 8001128:	200011f1 	.word	0x200011f1

0800112c <Wheel>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(uint8_t WheelPos) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	43db      	mvns	r3, r3
 800113a:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b54      	cmp	r3, #84	; 0x54
 8001140:	d811      	bhi.n	8001166 <Wheel+0x3a>
    return Color(255 - WheelPos * 3, 0, WheelPos * 3);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	461a      	mov	r2, r3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3b01      	subs	r3, #1
 800114e:	b2d8      	uxtb	r0, r3
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	461a      	mov	r2, r3
 8001154:	0052      	lsls	r2, r2, #1
 8001156:	4413      	add	r3, r2
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	2100      	movs	r1, #0
 800115e:	f000 f832 	bl	80011c6 <Color>
 8001162:	4603      	mov	r3, r0
 8001164:	e02b      	b.n	80011be <Wheel+0x92>
  }
  if(WheelPos < 170) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2ba9      	cmp	r3, #169	; 0xa9
 800116a:	d814      	bhi.n	8001196 <Wheel+0x6a>
  		WheelPos -= 85;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	3b55      	subs	r3, #85	; 0x55
 8001170:	71fb      	strb	r3, [r7, #7]
    return Color(0, WheelPos * 3, 255 - WheelPos * 3);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	461a      	mov	r2, r3
 8001176:	0052      	lsls	r2, r2, #1
 8001178:	4413      	add	r3, r2
 800117a:	b2d9      	uxtb	r1, r3
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	461a      	mov	r2, r3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	3b01      	subs	r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f81a 	bl	80011c6 <Color>
 8001192:	4603      	mov	r3, r0
 8001194:	e013      	b.n	80011be <Wheel+0x92>
  }
  WheelPos -= 170;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	3356      	adds	r3, #86	; 0x56
 800119a:	71fb      	strb	r3, [r7, #7]
  return Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	461a      	mov	r2, r3
 80011a0:	0052      	lsls	r2, r2, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	b2d8      	uxtb	r0, r3
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	461a      	mov	r2, r3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f000 f805 	bl	80011c6 <Color>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <Color>:

uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	041a      	lsls	r2, r3, #16
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	431a      	orrs	r2, r3
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	4313      	orrs	r3, r2
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800121e:	f7ff fd8b 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f006 ffa5 	bl	8008170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001226:	f7fe fff7 	bl	8000218 <main>

0800122a <LoopForever>:

LoopForever:
    b LoopForever
 800122a:	e7fe      	b.n	800122a <LoopForever>
  ldr   r0, =_estack
 800122c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001238:	08008240 	.word	0x08008240
  ldr r2, =_sbss
 800123c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001240:	200021c8 	.word	0x200021c8

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>

08001246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f939 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f80e 	bl	8001278 <HAL_InitTick>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e001      	b.n	800126c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001268:	f7ff fb32 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800126c:	79fb      	ldrb	r3, [r7, #7]

}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_InitTick+0x68>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d022      	beq.n	80012d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_InitTick+0x6c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_InitTick+0x68>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001298:	fbb1 f3f3 	udiv	r3, r1, r3
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 f944 	bl	800152e <HAL_SYSTICK_Config>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10f      	bne.n	80012cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	d809      	bhi.n	80012c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b2:	2200      	movs	r2, #0
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ba:	f000 f910 	bl	80014de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_InitTick+0x70>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e007      	b.n	80012d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e004      	b.n	80012d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e001      	b.n	80012d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_IncTick+0x1c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_IncTick+0x20>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_IncTick+0x1c>)
 80012fc:	6013      	str	r3, [r2, #0]
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	200012bc 	.word	0x200012bc
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200012bc 	.word	0x200012bc

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff29 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff40 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff33 	bl	800138c <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa4 	bl	8001484 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e08d      	b.n	8001676 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_DMA_Init+0x138>)
 8001562:	429a      	cmp	r2, r3
 8001564:	d80f      	bhi.n	8001586 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_DMA_Init+0x13c>)
 800156e:	4413      	add	r3, r2
 8001570:	4a45      	ldr	r2, [pc, #276]	; (8001688 <HAL_DMA_Init+0x140>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	009a      	lsls	r2, r3, #2
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a42      	ldr	r2, [pc, #264]	; (800168c <HAL_DMA_Init+0x144>)
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
 8001584:	e00e      	b.n	80015a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_DMA_Init+0x148>)
 800158e:	4413      	add	r3, r2
 8001590:	4a3d      	ldr	r2, [pc, #244]	; (8001688 <HAL_DMA_Init+0x140>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	009a      	lsls	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a3c      	ldr	r2, [pc, #240]	; (8001694 <HAL_DMA_Init+0x14c>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f9b6 	bl	8001968 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001604:	d102      	bne.n	800160c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001620:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_DMA_Init+0x104>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d80c      	bhi.n	800164c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f9d6 	bl	80019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e008      	b.n	800165e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40020407 	.word	0x40020407
 8001684:	bffdfff8 	.word	0xbffdfff8
 8001688:	cccccccd 	.word	0xcccccccd
 800168c:	40020000 	.word	0x40020000
 8001690:	bffdfbf8 	.word	0xbffdfbf8
 8001694:	40020400 	.word	0x40020400

08001698 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_DMA_Start_IT+0x20>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e066      	b.n	8001786 <HAL_DMA_Start_IT+0xee>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d155      	bne.n	8001778 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 f8fb 	bl	80018ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 020e 	orr.w	r2, r2, #14
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e00f      	b.n	8001730 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 020a 	orr.w	r2, r2, #10
 800172e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001764:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e005      	b.n	8001784 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001780:	2302      	movs	r3, #2
 8001782:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001784:	7dfb      	ldrb	r3, [r7, #23]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	2204      	movs	r2, #4
 80017b0:	409a      	lsls	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d026      	beq.n	8001808 <HAL_DMA_IRQHandler+0x7a>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d021      	beq.n	8001808 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0204 	bic.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 021f 	and.w	r2, r3, #31
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2104      	movs	r1, #4
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d071      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001806:	e06c      	b.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2202      	movs	r2, #2
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d02e      	beq.n	800187a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d029      	beq.n	800187a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0320 	and.w	r3, r3, #32
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 020a 	bic.w	r2, r2, #10
 8001842:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	2102      	movs	r1, #2
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d038      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001878:	e033      	b.n	80018e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2208      	movs	r2, #8
 8001884:	409a      	lsls	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d025      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020e 	bic.w	r2, r2, #14
 80018a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
}
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001902:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001914:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d108      	bne.n	800194c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800194a:	e007      	b.n	800195c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d802      	bhi.n	8001982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e001      	b.n	8001986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001984:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	3b08      	subs	r3, #8
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	009a      	lsls	r2, r3, #2
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2201      	movs	r2, #1
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40020407 	.word	0x40020407
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020820 	.word	0x40020820
 80019dc:	cccccccd 	.word	0xcccccccd
 80019e0:	40020880 	.word	0x40020880

080019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	1000823f 	.word	0x1000823f
 8001a28:	40020940 	.word	0x40020940

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3a:	e15a      	b.n	8001cf2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 814c 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d00b      	beq.n	8001a74 <HAL_GPIO_Init+0x48>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d007      	beq.n	8001a74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a68:	2b11      	cmp	r3, #17
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b12      	cmp	r3, #18
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0xea>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d123      	bne.n	8001b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	6939      	ldr	r1, [r7, #16]
 8001b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0203 	and.w	r2, r3, #3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a6 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6613      	str	r3, [r2, #96]	; 0x60
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb8:	4a56      	ldr	r2, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001be2:	d01f      	beq.n	8001c24 <HAL_GPIO_Init+0x1f8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <HAL_GPIO_Init+0x2ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x1f4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x2f0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x1f0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1ec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1e8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1e4>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e00a      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c68:	4a30      	ldr	r2, [pc, #192]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c92:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ce6:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_GPIO_Init+0x300>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f ae9d 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	48001000 	.word	0x48001000
 8001d28:	48001400 	.word	0x48001400
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af06      	add	r7, sp, #24
 8001d66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0ad      	b.n	8001ece <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f005 feea 	bl	8007b60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 f88e 	bl	8004eba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e035      	b.n	8001e10 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4413      	add	r3, r2
 8001dac:	3329      	adds	r3, #41	; 0x29
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	015b      	lsls	r3, r3, #5
 8001db8:	4413      	add	r3, r2
 8001dba:	3328      	adds	r3, #40	; 0x28
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	b291      	uxth	r1, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	4413      	add	r3, r2
 8001dcc:	3336      	adds	r3, #54	; 0x36
 8001dce:	460a      	mov	r2, r1
 8001dd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	015b      	lsls	r3, r3, #5
 8001dd8:	4413      	add	r3, r2
 8001dda:	332b      	adds	r3, #43	; 0x2b
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	4413      	add	r3, r2
 8001de8:	3338      	adds	r3, #56	; 0x38
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	015b      	lsls	r3, r3, #5
 8001df4:	4413      	add	r3, r2
 8001df6:	333c      	adds	r3, #60	; 0x3c
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	3302      	adds	r3, #2
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	4413      	add	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3c4      	bcc.n	8001da4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	e031      	b.n	8001e84 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	4413      	add	r3, r2
 8001e28:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	015b      	lsls	r3, r3, #5
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	015b      	lsls	r3, r3, #5
 8001e46:	4413      	add	r3, r2
 8001e48:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	015b      	lsls	r3, r3, #5
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	330a      	adds	r3, #10
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	4413      	add	r3, r2
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3c8      	bcc.n	8001e20 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	687e      	ldr	r6, [r7, #4]
 8001e96:	466d      	mov	r5, sp
 8001e98:	f106 0410 	add.w	r4, r6, #16
 8001e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	602b      	str	r3, [r5, #0]
 8001ea4:	1d33      	adds	r3, r6, #4
 8001ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ea8:	6838      	ldr	r0, [r7, #0]
 8001eaa:	f003 f821 	bl	8004ef0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fe35 	bl	8002b36 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_Start+0x16>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e012      	b.n	8001f12 <HAL_PCD_Start+0x3c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 f845 	bl	8005f88 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f002 ffc0 	bl	8004e88 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f845 	bl	8005fb6 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f36:	d102      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb33 	bl	80025a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 f837 	bl	8005fb6 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d112      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f66:	b292      	uxth	r2, r2
 8001f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f005 fe8e 	bl	8007c8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f91e 	bl	80021b6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f819 	bl	8005fb6 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 f802 	bl	8005fb6 <USB_ReadInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 ffeb 	bl	8005fb6 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fea:	d133      	bne.n	8002054 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	b292      	uxth	r2, r2
 8002000:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0208 	bic.w	r2, r2, #8
 8002016:	b292      	uxth	r2, r2
 8002018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f006 f81d 	bl	8008070 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f005 fe62 	bl	8007d00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800204e:	b292      	uxth	r2, r2
 8002050:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 ffac 	bl	8005fb6 <USB_ReadInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002068:	d126      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0208 	orr.w	r2, r2, #8
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002094:	b292      	uxth	r2, r2
 8002096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0204 	orr.w	r2, r2, #4
 80020ac:	b292      	uxth	r2, r2
 80020ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f005 fe0a 	bl	8007ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f003 ff7a 	bl	8005fb6 <USB_ReadInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	d13f      	bne.n	800214c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020de:	b292      	uxth	r2, r2
 80020e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d12b      	bne.n	8002146 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0204 	orr.w	r2, r2, #4
 8002100:	b292      	uxth	r2, r2
 8002102:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	b292      	uxth	r2, r2
 800211a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800212e:	b29b      	uxth	r3, r3
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800213c:	2101      	movs	r1, #1
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f005 ff96 	bl	8008070 <HAL_PCDEx_LPM_Callback>
 8002144:	e002      	b.n	800214c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f005 fdc0 	bl	8007ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 ff30 	bl	8005fb6 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002160:	d10e      	bne.n	8002180 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216a:	b29a      	uxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002174:	b292      	uxth	r2, r2
 8002176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f005 fd79 	bl	8007c72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 ff16 	bl	8005fb6 <USB_ReadInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002194:	d10b      	bne.n	80021ae <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	b292      	uxth	r2, r2
 80021aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_PCD_SetAddress+0x1a>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e013      	b.n	80021f8 <HAL_PCD_SetAddress+0x42>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 feb9 	bl	8005f60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	70fb      	strb	r3, [r7, #3]
 8002212:	460b      	mov	r3, r1
 8002214:	803b      	strh	r3, [r7, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800221e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da0b      	bge.n	800223e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	3328      	adds	r3, #40	; 0x28
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	705a      	strb	r2, [r3, #1]
 800223c:	e00b      	b.n	8002256 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002262:	883a      	ldrh	r2, [r7, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	78ba      	ldrb	r2, [r7, #2]
 800226c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002280:	78bb      	ldrb	r3, [r7, #2]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d102      	bne.n	800228c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_PCD_EP_Open+0x9a>
 8002296:	2302      	movs	r3, #2
 8002298:	e00e      	b.n	80022b8 <HAL_PCD_EP_Open+0xb8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f002 fe45 	bl	8004f38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80022b6:	7afb      	ldrb	r3, [r7, #11]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da0b      	bge.n	80022ec <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	3328      	adds	r3, #40	; 0x28
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	705a      	strb	r2, [r3, #1]
 80022ea:	e00b      	b.n	8002304 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002304:	78fb      	ldrb	r3, [r7, #3]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_EP_Close+0x5e>
 800231a:	2302      	movs	r3, #2
 800231c:	e00e      	b.n	800233c <HAL_PCD_EP_Close+0x7c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f8f3 	bl	8005518 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002354:	7afb      	ldrb	r3, [r7, #11]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	015b      	lsls	r3, r3, #5
 800235c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	b2da      	uxtb	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800238a:	7afb      	ldrb	r3, [r7, #11]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	2b00      	cmp	r3, #0
 8002392:	d106      	bne.n	80023a2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6979      	ldr	r1, [r7, #20]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fa52 	bl	8005844 <USB_EPStartXfer>
 80023a0:	e005      	b.n	80023ae <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6979      	ldr	r1, [r7, #20]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fa4b 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	330a      	adds	r3, #10
 80023ce:	015b      	lsls	r3, r3, #5
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	460b      	mov	r3, r1
 80023f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f2:	7afb      	ldrb	r3, [r7, #11]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	015b      	lsls	r3, r3, #5
 80023fa:	3328      	adds	r3, #40	; 0x28
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2201      	movs	r2, #1
 8002418:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	b2da      	uxtb	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	2b00      	cmp	r3, #0
 800242e:	d106      	bne.n	800243e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6979      	ldr	r1, [r7, #20]
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fa04 	bl	8005844 <USB_EPStartXfer>
 800243c:	e005      	b.n	800244a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6979      	ldr	r1, [r7, #20]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f9fd 	bl	8005844 <USB_EPStartXfer>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 0207 	and.w	r2, r3, #7
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d901      	bls.n	8002472 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e046      	b.n	8002500 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	da0b      	bge.n	8002492 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	015b      	lsls	r3, r3, #5
 8002482:	3328      	adds	r3, #40	; 0x28
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	705a      	strb	r2, [r3, #1]
 8002490:	e009      	b.n	80024a6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	015b      	lsls	r3, r3, #5
 8002496:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_EP_SetStall+0x72>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e01c      	b.n	8002500 <HAL_PCD_EP_SetStall+0xac>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fc6d 	bl	8005db4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d108      	bne.n	80024f6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80024ee:	4619      	mov	r1, r3
 80024f0:	4610      	mov	r0, r2
 80024f2:	f003 fd70 	bl	8005fd6 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 020f 	and.w	r2, r3, #15
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d901      	bls.n	8002526 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e03a      	b.n	800259c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0b      	bge.n	8002546 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	015b      	lsls	r3, r3, #5
 8002536:	3328      	adds	r3, #40	; 0x28
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	705a      	strb	r2, [r3, #1]
 8002544:	e00b      	b.n	800255e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	015b      	lsls	r3, r3, #5
 800254e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_PCD_EP_ClrStall+0x76>
 800257a:	2302      	movs	r3, #2
 800257c:	e00e      	b.n	800259c <HAL_PCD_EP_ClrStall+0x94>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fc53 	bl	8005e38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025ac:	e274      	b.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025b6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80025b8:	8afb      	ldrh	r3, [r7, #22]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80025c2:	7d7b      	ldrb	r3, [r7, #21]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 813c 	bne.w	8002842 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80025ca:	8afb      	ldrh	r3, [r7, #22]
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d14f      	bne.n	8002674 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	b29c      	uxth	r4, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80025ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3328      	adds	r3, #40	; 0x28
 80025fa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002604:	b29b      	uxth	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4413      	add	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4413      	add	r3, r2
 8002616:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	441a      	add	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002632:	2100      	movs	r1, #0
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f005 fb05 	bl	8007c44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8228 	beq.w	8002a98 <PCD_EP_ISR_Handler+0x4f4>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 8223 	bne.w	8002a98 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b292      	uxth	r2, r2
 8002666:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002672:	e211      	b.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800267a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002684:	8a7b      	ldrh	r3, [r7, #18]
 8002686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268a:	2b00      	cmp	r3, #0
 800268c:	d031      	beq.n	80026f2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4413      	add	r3, r2
 80026a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f003 fcd1 	bl	8006070 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026da:	4013      	ands	r3, r2
 80026dc:	b29c      	uxth	r4, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80026e6:	b292      	uxth	r2, r2
 80026e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f005 fa80 	bl	8007bf0 <HAL_PCD_SetupStageCallback>
 80026f0:	e1d2      	b.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f280 81ce 	bge.w	8002a98 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29a      	uxth	r2, r3
 8002704:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002708:	4013      	ands	r3, r2
 800270a:	b29c      	uxth	r4, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002714:	b292      	uxth	r2, r2
 8002716:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002720:	b29b      	uxth	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4413      	add	r3, r2
 8002732:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d019      	beq.n	800277c <PCD_EP_ISR_Handler+0x1d8>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002760:	b29b      	uxth	r3, r3
 8002762:	f003 fc85 	bl	8006070 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	441a      	add	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f005 fa4c 	bl	8007c14 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461c      	mov	r4, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278a:	b29b      	uxth	r3, r3
 800278c:	441c      	add	r4, r3
 800278e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002792:	461c      	mov	r4, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10e      	bne.n	80027ba <PCD_EP_ISR_Handler+0x216>
 800279c:	8823      	ldrh	r3, [r4, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8023      	strh	r3, [r4, #0]
 80027a8:	8823      	ldrh	r3, [r4, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	8023      	strh	r3, [r4, #0]
 80027b8:	e02d      	b.n	8002816 <PCD_EP_ISR_Handler+0x272>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b3e      	cmp	r3, #62	; 0x3e
 80027c0:	d812      	bhi.n	80027e8 <PCD_EP_ISR_Handler+0x244>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	085b      	lsrs	r3, r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <PCD_EP_ISR_Handler+0x238>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3301      	adds	r3, #1
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	8023      	strh	r3, [r4, #0]
 80027e6:	e016      	b.n	8002816 <PCD_EP_ISR_Handler+0x272>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <PCD_EP_ISR_Handler+0x25e>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	3b01      	subs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	b29b      	uxth	r3, r3
 8002806:	029b      	lsls	r3, r3, #10
 8002808:	b29b      	uxth	r3, r3
 800280a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800280e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002812:	b29b      	uxth	r3, r3
 8002814:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	b29c      	uxth	r4, r3
 8002828:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800282c:	b29c      	uxth	r4, r3
 800282e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002832:	b29c      	uxth	r4, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <PCD_EP_ISR_Handler+0x510>)
 800283a:	4323      	orrs	r3, r4
 800283c:	b29b      	uxth	r3, r3
 800283e:	8013      	strh	r3, [r2, #0]
 8002840:	e12a      	b.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	7d7b      	ldrb	r3, [r7, #21]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002852:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f280 80cb 	bge.w	80029f2 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	7d7b      	ldrb	r3, [r7, #21]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002870:	4013      	ands	r3, r2
 8002872:	b29c      	uxth	r4, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	7d7b      	ldrb	r3, [r7, #21]
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002884:	b292      	uxth	r2, r2
 8002886:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002888:	7d7b      	ldrb	r3, [r7, #21]
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	7b1b      	ldrb	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80028c4:	8bfb      	ldrh	r3, [r7, #30]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d06e      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6959      	ldr	r1, [r3, #20]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88da      	ldrh	r2, [r3, #6]
 80028d6:	8bfb      	ldrh	r3, [r7, #30]
 80028d8:	f003 fbca 	bl	8006070 <USB_ReadPMA>
 80028dc:	e064      	b.n	80029a8 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	b29c      	uxth	r4, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	441a      	add	r2, r3
 8002908:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <PCD_EP_ISR_Handler+0x514>)
 800290a:	4323      	orrs	r3, r4
 800290c:	b29b      	uxth	r3, r3
 800290e:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01f      	beq.n	800296a <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4413      	add	r3, r2
 8002944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6959      	ldr	r1, [r3, #20]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	891a      	ldrh	r2, [r3, #8]
 8002962:	8bfb      	ldrh	r3, [r7, #30]
 8002964:	f003 fb84 	bl	8006070 <USB_ReadPMA>
 8002968:	e01e      	b.n	80029a8 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	4413      	add	r3, r2
 8002984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6959      	ldr	r1, [r3, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	895a      	ldrh	r2, [r3, #10]
 80029a2:	8bfb      	ldrh	r3, [r7, #30]
 80029a4:	f003 fb64 	bl	8006070 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	8bfb      	ldrh	r3, [r7, #30]
 80029ae:	441a      	add	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	8bfb      	ldrh	r3, [r7, #30]
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <PCD_EP_ISR_Handler+0x42e>
 80029c8:	8bfa      	ldrh	r2, [r7, #30]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d206      	bcs.n	80029e0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f005 f91b 	bl	8007c14 <HAL_PCD_DataOutStageCallback>
 80029de:	e008      	b.n	80029f2 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	7819      	ldrb	r1, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fca9 	bl	8002344 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d04d      	beq.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80029fc:	7d7b      	ldrb	r3, [r7, #21]
 80029fe:	015b      	lsls	r3, r3, #5
 8002a00:	3328      	adds	r3, #40	; 0x28
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	7d7b      	ldrb	r3, [r7, #21]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	b29c      	uxth	r4, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	7d7b      	ldrb	r3, [r7, #21]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f005 f8e0 	bl	8007c44 <HAL_PCD_DataInStageCallback>
 8002a84:	e008      	b.n	8002a98 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	7819      	ldrb	r1, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fca5 	bl	80023e2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f6ff ad82 	blt.w	80025ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3724      	adds	r7, #36	; 0x24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd90      	pop	{r4, r7, pc}
 8002ab4:	ffff8080 	.word	0xffff8080
 8002ab8:	ffff80c0 	.word	0xffff80c0

08002abc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	4613      	mov	r3, r2
 8002acc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	015b      	lsls	r3, r3, #5
 8002ae2:	3328      	adds	r3, #40	; 0x28
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e006      	b.n	8002afa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	015b      	lsls	r3, r3, #5
 8002af0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	80da      	strh	r2, [r3, #6]
 8002b0e:	e00b      	b.n	8002b28 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2201      	movs	r2, #1
 8002b14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d141      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d131      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2232      	movs	r2, #50	; 0x32
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bde:	e002      	b.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d102      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f2      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d158      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e057      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c1c:	e04d      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d141      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d131      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2232      	movs	r2, #50	; 0x32
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	e002      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d102      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d112      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e011      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca8:	e007      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e308      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4ba3      	ldr	r3, [pc, #652]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	4ba0      	ldr	r3, [pc, #640]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3e>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_OscConfig+0x44>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b99      	ldr	r3, [pc, #612]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d157      	bne.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2e3      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x74>
 8002d3a:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a90      	ldr	r2, [pc, #576]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8a      	ldr	r2, [pc, #552]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a87      	ldr	r2, [pc, #540]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a83      	ldr	r2, [pc, #524]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a80      	ldr	r2, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fac0 	bl	8001310 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fabc 	bl	8001310 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e2a8      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xc0>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe faac 	bl	8001310 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe faa8 	bl	8001310 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e294      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0xe8>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dea:	4b65      	ldr	r3, [pc, #404]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df4:	4b62      	ldr	r3, [pc, #392]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x136>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_OscConfig+0x13c>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11f      	bne.n	8002e50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e10:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_OscConfig+0x154>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e267      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	4952      	ldr	r1, [pc, #328]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e3c:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_RCC_OscConfig+0x2b0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe fa19 	bl	8001278 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d043      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e253      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a48      	ldr	r2, [pc, #288]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fa54 	bl	8001310 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fa50 	bl	8001310 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e23c      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	4939      	ldr	r1, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e01a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea0:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a36      	ldr	r2, [pc, #216]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fa30 	bl	8001310 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fa2c 	bl	8001310 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e218      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1e0>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef0:	4a23      	ldr	r2, [pc, #140]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fe fa09 	bl	8001310 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fe fa05 	bl	8001310 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1f1      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ef      	beq.n	8002f02 <HAL_RCC_OscConfig+0x22e>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe f9ec 	bl	8001310 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe f9e8 	bl	8001310 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1d4      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ef      	bne.n	8002f3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80ab 	beq.w	80030c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f6e:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2b4>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e005      	b.n	8002f8a <HAL_RCC_OscConfig+0x2b6>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	20000004 	.word	0x20000004
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4baf      	ldr	r3, [pc, #700]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	4aae      	ldr	r2, [pc, #696]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9a:	4bac      	ldr	r3, [pc, #688]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4ba9      	ldr	r3, [pc, #676]	; (8003250 <HAL_RCC_OscConfig+0x57c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb6:	4ba6      	ldr	r3, [pc, #664]	; (8003250 <HAL_RCC_OscConfig+0x57c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4aa5      	ldr	r2, [pc, #660]	; (8003250 <HAL_RCC_OscConfig+0x57c>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f9a5 	bl	8001310 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe f9a1 	bl	8001310 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e18d      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b9c      	ldr	r3, [pc, #624]	; (8003250 <HAL_RCC_OscConfig+0x57c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_RCC_OscConfig+0x32e>
 8002ff0:	4b96      	ldr	r3, [pc, #600]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a95      	ldr	r2, [pc, #596]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003000:	e024      	b.n	800304c <HAL_RCC_OscConfig+0x378>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d110      	bne.n	800302c <HAL_RCC_OscConfig+0x358>
 800300a:	4b90      	ldr	r3, [pc, #576]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a8e      	ldr	r2, [pc, #568]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301a:	4b8c      	ldr	r3, [pc, #560]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a8a      	ldr	r2, [pc, #552]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302a:	e00f      	b.n	800304c <HAL_RCC_OscConfig+0x378>
 800302c:	4b87      	ldr	r3, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a86      	ldr	r2, [pc, #536]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a82      	ldr	r2, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe f95c 	bl	8001310 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fe f958 	bl	8001310 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e142      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ed      	beq.n	800305c <HAL_RCC_OscConfig+0x388>
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe f945 	bl	8001310 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f941 	bl	8001310 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e12b      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a0:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ed      	bne.n	800308a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b65      	ldr	r3, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	4a64      	ldr	r2, [pc, #400]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03c      	beq.n	8003146 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01c      	beq.n	800310e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d4:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80030d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe f914 	bl	8001310 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ec:	f7fe f910 	bl	8001310 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0fc      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030fe:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x418>
 800310c:	e01b      	b.n	8003146 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800310e:	4b4f      	ldr	r3, [pc, #316]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003114:	4a4d      	ldr	r2, [pc, #308]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fe f8f7 	bl	8001310 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003126:	f7fe f8f3 	bl	8001310 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0df      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003138:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800313a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ef      	bne.n	8003126 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d3 	beq.w	80032f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003150:	4b3e      	ldr	r3, [pc, #248]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b0c      	cmp	r3, #12
 800315a:	f000 808d 	beq.w	8003278 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d15a      	bne.n	800321c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a38      	ldr	r2, [pc, #224]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800316c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe f8cd 	bl	8001310 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe f8c9 	bl	8001310 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b5      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_RCC_OscConfig+0x580>)
 800319e:	4013      	ands	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a11      	ldr	r1, [r2, #32]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a8:	3a01      	subs	r2, #1
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	4311      	orrs	r1, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031b2:	0212      	lsls	r2, r2, #8
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	3a01      	subs	r2, #1
 80031be:	0552      	lsls	r2, r2, #21
 80031c0:	4311      	orrs	r1, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c6:	0852      	lsrs	r2, r2, #1
 80031c8:	3a01      	subs	r2, #1
 80031ca:	0652      	lsls	r2, r2, #25
 80031cc:	4311      	orrs	r1, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031d2:	06d2      	lsls	r2, r2, #27
 80031d4:	430a      	orrs	r2, r1
 80031d6:	491d      	ldr	r1, [pc, #116]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80031e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_RCC_OscConfig+0x578>)
 80031ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fe f88c 	bl	8001310 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe f888 	bl	8001310 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e074      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0f0      	beq.n	80031fc <HAL_RCC_OscConfig+0x528>
 800321a:	e06c      	b.n	80032f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003226:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_OscConfig+0x578>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a04      	ldr	r2, [pc, #16]	; (800324c <HAL_RCC_OscConfig+0x578>)
 800323a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe f864 	bl	8001310 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800324a:	e00e      	b.n	800326a <HAL_RCC_OscConfig+0x596>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe f85a 	bl	8001310 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e046      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_RCC_OscConfig+0x62c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x584>
 8003276:	e03e      	b.n	80032f6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e039      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_OscConfig+0x62c>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0203 	and.w	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	429a      	cmp	r2, r3
 8003296:	d12c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	3b01      	subs	r3, #1
 80032a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d123      	bne.n	80032f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d11b      	bne.n	80032f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d113      	bne.n	80032f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e11e      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	498c      	ldr	r1, [pc, #560]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b8a      	ldr	r3, [pc, #552]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e106      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d073      	beq.n	8003440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d129      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0f4      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003370:	f000 f964 	bl	800363c <RCC_GetSysClockFreqFromPLLSource>
 8003374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_ClockConfig+0x268>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d93f      	bls.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337e:	4b7a      	ldr	r3, [pc, #488]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	d033      	beq.n	80033fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d12f      	bne.n	80033fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e024      	b.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0c6      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0be      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033dc:	f000 f8ce 	bl	800357c <HAL_RCC_GetSysClockFreq>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4a61      	ldr	r2, [pc, #388]	; (800356c <HAL_RCC_ClockConfig+0x268>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d909      	bls.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4957      	ldr	r1, [pc, #348]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fd ff7e 	bl	8001310 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fd ff7a 	bl	8001310 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e095      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a42      	ldr	r2, [pc, #264]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003470:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003478:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800347a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4936      	ldr	r1, [pc, #216]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
 8003492:	e008      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d105      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d21d      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 020f 	bic.w	r2, r3, #15
 80034bc:	4929      	ldr	r1, [pc, #164]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c4:	f7fd ff24 	bl	8001310 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd ff20 	bl	8001310 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e03b      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1ed      	bne.n	80034cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4917      	ldr	r1, [pc, #92]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490f      	ldr	r1, [pc, #60]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352e:	f000 f825 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8003532:	4601      	mov	r1, r0
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <HAL_RCC_ClockConfig+0x26c>)
 8003540:	5cd3      	ldrb	r3, [r2, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa21 f303 	lsr.w	r3, r1, r3
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x270>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fe90 	bl	8001278 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40022000 	.word	0x40022000
 8003568:	40021000 	.word	0x40021000
 800356c:	04c4b400 	.word	0x04c4b400
 8003570:	08008228 	.word	0x08008228
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b04      	cmp	r3, #4
 800358c:	d102      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e047      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e03e      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d136      	bne.n	8003620 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035da:	68d2      	ldr	r2, [r2, #12]
 80035dc:	0a12      	lsrs	r2, r2, #8
 80035de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
      break;
 80035e8:	e00c      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	0a12      	lsrs	r2, r2, #8
 80035f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      break;
 8003602:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0e5b      	lsrs	r3, r3, #25
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	e001      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003624:	693b      	ldr	r3, [r7, #16]
}
 8003626:	4618      	mov	r0, r3
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	00f42400 	.word	0x00f42400

0800363c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d10c      	bne.n	800367a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a14      	ldr	r2, [pc, #80]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800366a:	68d2      	ldr	r2, [r2, #12]
 800366c:	0a12      	lsrs	r2, r2, #8
 800366e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
    break;
 8003678:	e00c      	b.n	8003694 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4a0e      	ldr	r2, [pc, #56]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003684:	68d2      	ldr	r2, [r2, #12]
 8003686:	0a12      	lsrs	r2, r2, #8
 8003688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    break;
 8003692:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0e5b      	lsrs	r3, r3, #25
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	3301      	adds	r3, #1
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036ae:	687b      	ldr	r3, [r7, #4]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	371c      	adds	r7, #28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40021000 	.word	0x40021000
 80036c0:	00f42400 	.word	0x00f42400

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036cc:	2300      	movs	r3, #0
 80036ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d0:	2300      	movs	r3, #0
 80036d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8098 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a3f      	ldr	r2, [pc, #252]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370e:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800371a:	f7fd fdf9 	bl	8001310 <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003720:	e009      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fd fdf5 	bl	8001310 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	74fb      	strb	r3, [r7, #19]
        break;
 8003734:	e005      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ef      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d159      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01e      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d019      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003770:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	4b1c      	ldr	r3, [pc, #112]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a1b      	ldr	r2, [pc, #108]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003790:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fd fdb5 	bl	8001310 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd fdb1 	bl	8001310 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
            break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ec      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	4903      	ldr	r1, [pc, #12]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	74bb      	strb	r3, [r7, #18]
 80037f2:	e005      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	7cfb      	ldrb	r3, [r7, #19]
 80037fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003800:	7c7b      	ldrb	r3, [r7, #17]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d105      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4ba6      	ldr	r3, [pc, #664]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	4aa5      	ldr	r2, [pc, #660]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800381e:	4ba0      	ldr	r3, [pc, #640]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f023 0203 	bic.w	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	499c      	ldr	r1, [pc, #624]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003840:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 020c 	bic.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4994      	ldr	r1, [pc, #592]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003862:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	498b      	ldr	r1, [pc, #556]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003884:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4983      	ldr	r1, [pc, #524]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a6:	4b7e      	ldr	r3, [pc, #504]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	497a      	ldr	r1, [pc, #488]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c8:	4b75      	ldr	r3, [pc, #468]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4972      	ldr	r1, [pc, #456]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ea:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4969      	ldr	r1, [pc, #420]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4961      	ldr	r1, [pc, #388]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800392e:	4b5c      	ldr	r3, [pc, #368]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	4958      	ldr	r1, [pc, #352]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	4950      	ldr	r1, [pc, #320]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396e:	d105      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003970:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800397a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003988:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4942      	ldr	r1, [pc, #264]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a6:	d105      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a8:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a3c      	ldr	r2, [pc, #240]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039c0:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039de:	d105      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a2e      	ldr	r2, [pc, #184]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d015      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	4926      	ldr	r1, [pc, #152]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4918      	ldr	r1, [pc, #96]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a86:	d105      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a88:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a94:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000

08003aa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e084      	b.n	8003bc0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7fc ff21 	bl	8000918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003af6:	d902      	bls.n	8003afe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e002      	b.n	8003b04 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b0c:	d007      	beq.n	8003b1e <HAL_SPI_Init+0x7a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b16:	d002      	beq.n	8003b1e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b2e:	d903      	bls.n	8003b38 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
 8003b36:	e002      	b.n	8003b3e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f003 0204 	and.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	ea42 0103 	orr.w	r1, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e049      	b.n	8003c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc ff9c 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 fc70 	bl	80044ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e049      	b.n	8003d1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7fc fefb 	bl	8000a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 fc19 	bl	80044ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_TIM_PWM_Start_DMA+0x28>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	bf0c      	ite	eq
 8003d44:	2301      	moveq	r3, #1
 8003d46:	2300      	movne	r3, #0
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	e03c      	b.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d109      	bne.n	8003d66 <HAL_TIM_PWM_Start_DMA+0x42>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	bf0c      	ite	eq
 8003d5e:	2301      	moveq	r3, #1
 8003d60:	2300      	movne	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e02f      	b.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d109      	bne.n	8003d80 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e022      	b.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d109      	bne.n	8003d9a <HAL_TIM_PWM_Start_DMA+0x76>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e015      	b.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d109      	bne.n	8003db4 <HAL_TIM_PWM_Start_DMA+0x90>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e008      	b.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e178      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e03c      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d109      	bne.n	8003e02 <HAL_TIM_PWM_Start_DMA+0xde>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e02f      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d109      	bne.n	8003e1c <HAL_TIM_PWM_Start_DMA+0xf8>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e022      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d109      	bne.n	8003e36 <HAL_TIM_PWM_Start_DMA+0x112>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e015      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d109      	bne.n	8003e50 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e008      	b.n	8003e62 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d034      	beq.n	8003ed0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x152>
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e124      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x162>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	e026      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x172>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e94:	e01e      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_PWM_Start_DMA+0x182>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea4:	e016      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x192>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb4:	e00e      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b10      	cmp	r3, #16
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	e006      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ece:	e001      	b.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0f5      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
  }

  switch (Channel)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	f200 80ae 	bhi.w	8004038 <HAL_TIM_PWM_Start_DMA+0x314>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08004039 	.word	0x08004039
 8003eec:	08004039 	.word	0x08004039
 8003ef0:	08004039 	.word	0x08004039
 8003ef4:	08003f61 	.word	0x08003f61
 8003ef8:	08004039 	.word	0x08004039
 8003efc:	08004039 	.word	0x08004039
 8003f00:	08004039 	.word	0x08004039
 8003f04:	08003fa9 	.word	0x08003fa9
 8003f08:	08004039 	.word	0x08004039
 8003f0c:	08004039 	.word	0x08004039
 8003f10:	08004039 	.word	0x08004039
 8003f14:	08003ff1 	.word	0x08003ff1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	4a6a      	ldr	r2, [pc, #424]	; (80040c8 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	4a69      	ldr	r2, [pc, #420]	; (80040cc <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a68      	ldr	r2, [pc, #416]	; (80040d0 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3334      	adds	r3, #52	; 0x34
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	f7fd fbaa 	bl	8001698 <HAL_DMA_Start_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0b8      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5c:	60da      	str	r2, [r3, #12]
      break;
 8003f5e:	e06c      	b.n	800403a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	4a56      	ldr	r2, [pc, #344]	; (80040d0 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3338      	adds	r3, #56	; 0x38
 8003f84:	461a      	mov	r2, r3
 8003f86:	887b      	ldrh	r3, [r7, #2]
 8003f88:	f7fd fb86 	bl	8001698 <HAL_DMA_Start_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e094      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa4:	60da      	str	r2, [r3, #12]
      break;
 8003fa6:	e048      	b.n	800403a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a46      	ldr	r2, [pc, #280]	; (80040c8 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a45      	ldr	r2, [pc, #276]	; (80040cc <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a44      	ldr	r2, [pc, #272]	; (80040d0 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	333c      	adds	r3, #60	; 0x3c
 8003fcc:	461a      	mov	r2, r3
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	f7fd fb62 	bl	8001698 <HAL_DMA_Start_IT>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e070      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fec:	60da      	str	r2, [r3, #12]
      break;
 8003fee:	e024      	b.n	800403a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	4a34      	ldr	r2, [pc, #208]	; (80040c8 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4a33      	ldr	r2, [pc, #204]	; (80040cc <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004006:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3340      	adds	r3, #64	; 0x40
 8004014:	461a      	mov	r2, r3
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	f7fd fb3e 	bl	8001698 <HAL_DMA_Start_IT>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e04c      	b.n	80040c0 <HAL_TIM_PWM_Start_DMA+0x39c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004034:	60da      	str	r2, [r3, #12]
      break;
 8004036:	e000      	b.n	800403a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004038:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fdd8 	bl	8004bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_TIM_PWM_Start_DMA+0x356>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIM_PWM_Start_DMA+0x356>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_TIM_PWM_Start_DMA+0x3b8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIM_PWM_Start_DMA+0x356>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIM_PWM_Start_DMA+0x356>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_Start_DMA+0x35a>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_TIM_PWM_Start_DMA+0x35c>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d007      	beq.n	8004094 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800409c:	4013      	ands	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d00b      	beq.n	80040be <HAL_TIM_PWM_Start_DMA+0x39a>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d007      	beq.n	80040be <HAL_TIM_PWM_Start_DMA+0x39a>
  {
    __HAL_TIM_ENABLE(htim);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	080043db 	.word	0x080043db
 80040cc:	08004483 	.word	0x08004483
 80040d0:	08004349 	.word	0x08004349
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	00010007 	.word	0x00010007

080040ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004102:	2302      	movs	r3, #2
 8004104:	e0fd      	b.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b14      	cmp	r3, #20
 8004112:	f200 80f0 	bhi.w	80042f6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004171 	.word	0x08004171
 8004120:	080042f7 	.word	0x080042f7
 8004124:	080042f7 	.word	0x080042f7
 8004128:	080042f7 	.word	0x080042f7
 800412c:	080041b1 	.word	0x080041b1
 8004130:	080042f7 	.word	0x080042f7
 8004134:	080042f7 	.word	0x080042f7
 8004138:	080042f7 	.word	0x080042f7
 800413c:	080041f3 	.word	0x080041f3
 8004140:	080042f7 	.word	0x080042f7
 8004144:	080042f7 	.word	0x080042f7
 8004148:	080042f7 	.word	0x080042f7
 800414c:	08004233 	.word	0x08004233
 8004150:	080042f7 	.word	0x080042f7
 8004154:	080042f7 	.word	0x080042f7
 8004158:	080042f7 	.word	0x080042f7
 800415c:	08004275 	.word	0x08004275
 8004160:	080042f7 	.word	0x080042f7
 8004164:	080042f7 	.word	0x080042f7
 8004168:	080042f7 	.word	0x080042f7
 800416c:	080042b5 	.word	0x080042b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa48 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0208 	orr.w	r2, r2, #8
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0204 	bic.w	r2, r2, #4
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	619a      	str	r2, [r3, #24]
      break;
 80041ae:	e0a3      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fab8 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6999      	ldr	r1, [r3, #24]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	021a      	lsls	r2, r3, #8
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	619a      	str	r2, [r3, #24]
      break;
 80041f0:	e082      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fb21 	bl	8004840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0208 	orr.w	r2, r2, #8
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0204 	bic.w	r2, r2, #4
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	61da      	str	r2, [r3, #28]
      break;
 8004230:	e062      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fb89 	bl	8004950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69d9      	ldr	r1, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	021a      	lsls	r2, r3, #8
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	61da      	str	r2, [r3, #28]
      break;
 8004272:	e041      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fbf2 	bl	8004a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042b2:	e021      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc36 	bl	8004b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80042f4:	e000      	b.n	80042f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80042f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop

0800430c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d107      	bne.n	8004370 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436e:	e02a      	b.n	80043c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d107      	bne.n	800438a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2202      	movs	r2, #2
 800437e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004388:	e01d      	b.n	80043c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	d107      	bne.n	80043a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2204      	movs	r2, #4
 8004398:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a2:	e010      	b.n	80043c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d107      	bne.n	80043be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2208      	movs	r2, #8
 80043b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043bc:	e003      	b.n	80043c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff ffb4 	bl	8004334 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	771a      	strb	r2, [r3, #28]
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10b      	bne.n	800440a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d136      	bne.n	800446e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	e031      	b.n	800446e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d10b      	bne.n	800442c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2202      	movs	r2, #2
 8004418:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d125      	bne.n	800446e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800442a:	e020      	b.n	800446e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d10b      	bne.n	800444e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2204      	movs	r2, #4
 800443a:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d114      	bne.n	800446e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800444c:	e00f      	b.n	800446e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d10a      	bne.n	800446e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2208      	movs	r2, #8
 800445c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ff4c 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	771a      	strb	r2, [r3, #28]
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d103      	bne.n	80044a2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	771a      	strb	r2, [r3, #28]
 80044a0:	e019      	b.n	80044d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d103      	bne.n	80044b4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2202      	movs	r2, #2
 80044b0:	771a      	strb	r2, [r3, #28]
 80044b2:	e010      	b.n	80044d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d103      	bne.n	80044c6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
 80044c4:	e007      	b.n	80044d6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d102      	bne.n	80044d6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2208      	movs	r2, #8
 80044d4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff22 	bl	8004320 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	771a      	strb	r2, [r3, #28]
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <TIM_Base_SetConfig+0x104>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a39      	ldr	r2, [pc, #228]	; (80045f4 <TIM_Base_SetConfig+0x108>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0x38>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <TIM_Base_SetConfig+0x10c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a37      	ldr	r2, [pc, #220]	; (80045fc <TIM_Base_SetConfig+0x110>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d108      	bne.n	8004536 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2d      	ldr	r2, [pc, #180]	; (80045f0 <TIM_Base_SetConfig+0x104>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <TIM_Base_SetConfig+0x108>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <TIM_Base_SetConfig+0x10c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a28      	ldr	r2, [pc, #160]	; (80045fc <TIM_Base_SetConfig+0x110>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <TIM_Base_SetConfig+0x114>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0x118>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x8a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0x11c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <TIM_Base_SetConfig+0x104>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0xe8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a11      	ldr	r2, [pc, #68]	; (80045fc <TIM_Base_SetConfig+0x110>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0xe8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <TIM_Base_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0xe8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <TIM_Base_SetConfig+0x118>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xe8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <TIM_Base_SetConfig+0x11c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40013400 	.word	0x40013400
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 0302 	bic.w	r3, r3, #2
 8004658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <TIM_OC1_SetConfig+0x10c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2b      	ldr	r2, [pc, #172]	; (800471c <TIM_OC1_SetConfig+0x110>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <TIM_OC1_SetConfig+0x114>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_OC1_SetConfig+0x118>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC1_SetConfig+0x80>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_OC1_SetConfig+0x11c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10c      	bne.n	80046a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0308 	bic.w	r3, r3, #8
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <TIM_OC1_SetConfig+0x10c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1a      	ldr	r2, [pc, #104]	; (800471c <TIM_OC1_SetConfig+0x110>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <TIM_OC1_SetConfig+0x114>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <TIM_OC1_SetConfig+0x118>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC1_SetConfig+0xc2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <TIM_OC1_SetConfig+0x11c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d111      	bne.n	80046f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <TIM_OC2_SetConfig+0x100>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_OC2_SetConfig+0x6c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a27      	ldr	r2, [pc, #156]	; (8004830 <TIM_OC2_SetConfig+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <TIM_OC2_SetConfig+0x100>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <TIM_OC2_SetConfig+0x104>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <TIM_OC2_SetConfig+0x108>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <TIM_OC2_SetConfig+0x10c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC2_SetConfig+0xb0>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <TIM_OC2_SetConfig+0x110>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d113      	bne.n	8004804 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <TIM_OC3_SetConfig+0xfc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC3_SetConfig+0x6a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a26      	ldr	r2, [pc, #152]	; (8004940 <TIM_OC3_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10d      	bne.n	80048c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <TIM_OC3_SetConfig+0xfc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <TIM_OC3_SetConfig+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <TIM_OC3_SetConfig+0x104>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <TIM_OC3_SetConfig+0x108>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC3_SetConfig+0xae>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <TIM_OC3_SetConfig+0x10c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40014000 	.word	0x40014000
 8004948:	40014400 	.word	0x40014400
 800494c:	40014800 	.word	0x40014800

08004950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800499e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	031b      	lsls	r3, r3, #12
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <TIM_OC4_SetConfig+0x100>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_OC4_SetConfig+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a27      	ldr	r2, [pc, #156]	; (8004a54 <TIM_OC4_SetConfig+0x104>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	031b      	lsls	r3, r3, #12
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_OC4_SetConfig+0x100>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00f      	beq.n	8004a00 <TIM_OC4_SetConfig+0xb0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <TIM_OC4_SetConfig+0x104>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <TIM_OC4_SetConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <TIM_OC4_SetConfig+0x108>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d007      	beq.n	8004a00 <TIM_OC4_SetConfig+0xb0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <TIM_OC4_SetConfig+0x10c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d003      	beq.n	8004a00 <TIM_OC4_SetConfig+0xb0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC4_SetConfig+0x110>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d113      	bne.n	8004a28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800

08004a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <TIM_OC5_SetConfig+0xb4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_OC5_SetConfig+0x7a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <TIM_OC5_SetConfig+0xb8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_OC5_SetConfig+0x7a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <TIM_OC5_SetConfig+0xbc>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_OC5_SetConfig+0x7a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <TIM_OC5_SetConfig+0xc0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_OC5_SetConfig+0x7a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <TIM_OC5_SetConfig+0xc4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d109      	bne.n	8004af2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40013400 	.word	0x40013400
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	051b      	lsls	r3, r3, #20
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <TIM_OC6_SetConfig+0xb8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_OC6_SetConfig+0x7c>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <TIM_OC6_SetConfig+0xbc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_OC6_SetConfig+0x7c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <TIM_OC6_SetConfig+0xc0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_OC6_SetConfig+0x7c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <TIM_OC6_SetConfig+0xc4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC6_SetConfig+0x7c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <TIM_OC6_SetConfig+0xc8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d109      	bne.n	8004bbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40013400 	.word	0x40013400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1a      	ldr	r2, [r3, #32]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
	...

08004c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e065      	b.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d013      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d10c      	bne.n	8004d16 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40014000 	.word	0x40014000

08004d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e087      	b.n	8004e74 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	041b      	lsls	r3, r3, #16
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d106      	bne.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d126      	bne.n	8004e62 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	051b      	lsls	r3, r3, #20
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d106      	bne.n	8004e62 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40013400 	.word	0x40013400

08004e88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e90:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ec2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004ec6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4013      	ands	r3, r2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	f107 0014 	add.w	r0, r7, #20
 8004efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ffb0 	bl	8004e88 <USB_EnableGlobalInt>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f34:	b004      	add	sp, #16
 8004f36:	4770      	bx	lr

08004f38 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f38:	b490      	push	{r4, r7}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d819      	bhi.n	8004f9a <USB_ActivateEndpoint+0x62>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <USB_ActivateEndpoint+0x34>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f91 	.word	0x08004f91
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004f87 	.word	0x08004f87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f7c:	89bb      	ldrh	r3, [r7, #12]
 8004f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f82:	81bb      	strh	r3, [r7, #12]
      break;
 8004f84:	e00d      	b.n	8004fa2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f86:	89bb      	ldrh	r3, [r7, #12]
 8004f88:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004f8c:	81bb      	strh	r3, [r7, #12]
      break;
 8004f8e:	e008      	b.n	8004fa2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f90:	89bb      	ldrh	r3, [r7, #12]
 8004f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f96:	81bb      	strh	r3, [r7, #12]
      break;
 8004f98:	e003      	b.n	8004fa2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9e:	e000      	b.n	8004fa2 <USB_ActivateEndpoint+0x6a>
      break;
 8004fa0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	89bb      	ldrh	r3, [r7, #12]
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	b21b      	sxth	r3, r3
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b21b      	sxth	r3, r3
 8004fe6:	b29c      	uxth	r4, r3
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	4b8a      	ldr	r3, [pc, #552]	; (800521c <USB_ActivateEndpoint+0x2e4>)
 8004ff4:	4323      	orrs	r3, r4
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	7b1b      	ldrb	r3, [r3, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 8112 	bne.w	8005228 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d067      	beq.n	80050dc <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800500c:	687c      	ldr	r4, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005014:	b29b      	uxth	r3, r3
 8005016:	441c      	add	r4, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4423      	add	r3, r4
 8005020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005024:	461c      	mov	r4, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	88db      	ldrh	r3, [r3, #6]
 800502a:	085b      	lsrs	r3, r3, #1
 800502c:	b29b      	uxth	r3, r3
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29c      	uxth	r4, r3
 8005042:	4623      	mov	r3, r4
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d014      	beq.n	8005076 <USB_ActivateEndpoint+0x13e>
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	b29c      	uxth	r4, r3
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	4b6c      	ldr	r3, [pc, #432]	; (8005220 <USB_ActivateEndpoint+0x2e8>)
 8005070:	4323      	orrs	r3, r4
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	78db      	ldrb	r3, [r3, #3]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d018      	beq.n	80050b0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	b29c      	uxth	r4, r3
 8005096:	f084 0320 	eor.w	r3, r4, #32
 800509a:	b29c      	uxth	r4, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <USB_ActivateEndpoint+0x2e4>)
 80050a8:	4323      	orrs	r3, r4
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
 80050ae:	e22b      	b.n	8005508 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c6:	b29c      	uxth	r4, r3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	441a      	add	r2, r3
 80050d2:	4b52      	ldr	r3, [pc, #328]	; (800521c <USB_ActivateEndpoint+0x2e4>)
 80050d4:	4323      	orrs	r3, r4
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]
 80050da:	e215      	b.n	8005508 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050dc:	687c      	ldr	r4, [r7, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	441c      	add	r4, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4423      	add	r3, r4
 80050f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050f4:	461c      	mov	r4, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	88db      	ldrh	r3, [r3, #6]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	b29b      	uxth	r3, r3
 8005102:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005104:	687c      	ldr	r4, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	441c      	add	r4, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4423      	add	r3, r4
 8005118:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800511c:	461c      	mov	r4, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10e      	bne.n	8005144 <USB_ActivateEndpoint+0x20c>
 8005126:	8823      	ldrh	r3, [r4, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800512e:	b29b      	uxth	r3, r3
 8005130:	8023      	strh	r3, [r4, #0]
 8005132:	8823      	ldrh	r3, [r4, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513e:	b29b      	uxth	r3, r3
 8005140:	8023      	strh	r3, [r4, #0]
 8005142:	e02d      	b.n	80051a0 <USB_ActivateEndpoint+0x268>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b3e      	cmp	r3, #62	; 0x3e
 800514a:	d812      	bhi.n	8005172 <USB_ActivateEndpoint+0x23a>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <USB_ActivateEndpoint+0x22e>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	b29b      	uxth	r3, r3
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	b29b      	uxth	r3, r3
 800516e:	8023      	strh	r3, [r4, #0]
 8005170:	e016      	b.n	80051a0 <USB_ActivateEndpoint+0x268>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <USB_ActivateEndpoint+0x254>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	3b01      	subs	r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29b      	uxth	r3, r3
 800519e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29c      	uxth	r4, r3
 80051ae:	4623      	mov	r3, r4
 80051b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d014      	beq.n	80051e2 <USB_ActivateEndpoint+0x2aa>
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	b29c      	uxth	r4, r3
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <USB_ActivateEndpoint+0x2ec>)
 80051dc:	4323      	orrs	r3, r4
 80051de:	b29b      	uxth	r3, r3
 80051e0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f8:	b29c      	uxth	r4, r3
 80051fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80051fe:	b29c      	uxth	r4, r3
 8005200:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005204:	b29c      	uxth	r4, r3
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	441a      	add	r2, r3
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <USB_ActivateEndpoint+0x2e4>)
 8005212:	4323      	orrs	r3, r4
 8005214:	b29b      	uxth	r3, r3
 8005216:	8013      	strh	r3, [r2, #0]
 8005218:	e176      	b.n	8005508 <USB_ActivateEndpoint+0x5d0>
 800521a:	bf00      	nop
 800521c:	ffff8080 	.word	0xffff8080
 8005220:	ffff80c0 	.word	0xffff80c0
 8005224:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523e:	b29c      	uxth	r4, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	441a      	add	r2, r3
 800524a:	4b96      	ldr	r3, [pc, #600]	; (80054a4 <USB_ActivateEndpoint+0x56c>)
 800524c:	4323      	orrs	r3, r4
 800524e:	b29b      	uxth	r3, r3
 8005250:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005252:	687c      	ldr	r4, [r7, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525a:	b29b      	uxth	r3, r3
 800525c:	441c      	add	r4, r3
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4423      	add	r3, r4
 8005266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526a:	461c      	mov	r4, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	8023      	strh	r3, [r4, #0]
 800527a:	687c      	ldr	r4, [r7, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	441c      	add	r4, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4423      	add	r3, r4
 800528e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005292:	461c      	mov	r4, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	895b      	ldrh	r3, [r3, #10]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 8088 	bne.w	80053bc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	4623      	mov	r3, r4
 80052bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d014      	beq.n	80052ee <USB_ActivateEndpoint+0x3b6>
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	b29c      	uxth	r4, r3
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <USB_ActivateEndpoint+0x570>)
 80052e8:	4323      	orrs	r3, r4
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	b29c      	uxth	r4, r3
 80052fc:	4623      	mov	r3, r4
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d014      	beq.n	8005330 <USB_ActivateEndpoint+0x3f8>
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	b29c      	uxth	r4, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	4b60      	ldr	r3, [pc, #384]	; (80054ac <USB_ActivateEndpoint+0x574>)
 800532a:	4323      	orrs	r3, r4
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	b29c      	uxth	r4, r3
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	441a      	add	r2, r3
 8005352:	4b56      	ldr	r3, [pc, #344]	; (80054ac <USB_ActivateEndpoint+0x574>)
 8005354:	4323      	orrs	r3, r4
 8005356:	b29b      	uxth	r3, r3
 8005358:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	b29c      	uxth	r4, r3
 8005372:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005376:	b29c      	uxth	r4, r3
 8005378:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800537c:	b29c      	uxth	r4, r3
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <USB_ActivateEndpoint+0x578>)
 800538a:	4323      	orrs	r3, r4
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	b29c      	uxth	r4, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <USB_ActivateEndpoint+0x578>)
 80053b4:	4323      	orrs	r3, r4
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	8013      	strh	r3, [r2, #0]
 80053ba:	e0a5      	b.n	8005508 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29c      	uxth	r4, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d014      	beq.n	80053fe <USB_ActivateEndpoint+0x4c6>
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	b29c      	uxth	r4, r3
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	441a      	add	r2, r3
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <USB_ActivateEndpoint+0x570>)
 80053f8:	4323      	orrs	r3, r4
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29c      	uxth	r4, r3
 800540c:	4623      	mov	r3, r4
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d014      	beq.n	8005440 <USB_ActivateEndpoint+0x508>
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	b29c      	uxth	r4, r3
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	441a      	add	r2, r3
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <USB_ActivateEndpoint+0x574>)
 800543a:	4323      	orrs	r3, r4
 800543c:	b29b      	uxth	r3, r3
 800543e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	b29c      	uxth	r4, r3
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <USB_ActivateEndpoint+0x570>)
 8005464:	4323      	orrs	r3, r4
 8005466:	b29b      	uxth	r3, r3
 8005468:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	78db      	ldrb	r3, [r3, #3]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d020      	beq.n	80054b4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	b29c      	uxth	r4, r3
 800548a:	f084 0320 	eor.w	r3, r4, #32
 800548e:	b29c      	uxth	r4, r3
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <USB_ActivateEndpoint+0x578>)
 800549c:	4323      	orrs	r3, r4
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]
 80054a2:	e01c      	b.n	80054de <USB_ActivateEndpoint+0x5a6>
 80054a4:	ffff8180 	.word	0xffff8180
 80054a8:	ffffc080 	.word	0xffffc080
 80054ac:	ffff80c0 	.word	0xffff80c0
 80054b0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	b29c      	uxth	r4, r3
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <USB_ActivateEndpoint+0x5dc>)
 80054d8:	4323      	orrs	r3, r4
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f4:	b29c      	uxth	r4, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	441a      	add	r2, r3
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <USB_ActivateEndpoint+0x5dc>)
 8005502:	4323      	orrs	r3, r4
 8005504:	b29b      	uxth	r3, r3
 8005506:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bc90      	pop	{r4, r7}
 8005512:	4770      	bx	lr
 8005514:	ffff8080 	.word	0xffff8080

08005518 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005518:	b490      	push	{r4, r7}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	7b1b      	ldrb	r3, [r3, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d171      	bne.n	800560e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d036      	beq.n	80055a0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29c      	uxth	r4, r3
 8005540:	4623      	mov	r3, r4
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <USB_DeactivateEndpoint+0x5c>
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	b29c      	uxth	r4, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	441a      	add	r2, r3
 800556c:	4b6b      	ldr	r3, [pc, #428]	; (800571c <USB_DeactivateEndpoint+0x204>)
 800556e:	4323      	orrs	r3, r4
 8005570:	b29b      	uxth	r3, r3
 8005572:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558a:	b29c      	uxth	r4, r3
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	4b62      	ldr	r3, [pc, #392]	; (8005720 <USB_DeactivateEndpoint+0x208>)
 8005598:	4323      	orrs	r3, r4
 800559a:	b29b      	uxth	r3, r3
 800559c:	8013      	strh	r3, [r2, #0]
 800559e:	e144      	b.n	800582a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29c      	uxth	r4, r3
 80055ae:	4623      	mov	r3, r4
 80055b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <USB_DeactivateEndpoint+0xca>
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	b29c      	uxth	r4, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	441a      	add	r2, r3
 80055da:	4b52      	ldr	r3, [pc, #328]	; (8005724 <USB_DeactivateEndpoint+0x20c>)
 80055dc:	4323      	orrs	r3, r4
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	b29c      	uxth	r4, r3
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	441a      	add	r2, r3
 8005604:	4b46      	ldr	r3, [pc, #280]	; (8005720 <USB_DeactivateEndpoint+0x208>)
 8005606:	4323      	orrs	r3, r4
 8005608:	b29b      	uxth	r3, r3
 800560a:	8013      	strh	r3, [r2, #0]
 800560c:	e10d      	b.n	800582a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 8088 	bne.w	8005728 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29c      	uxth	r4, r3
 8005626:	4623      	mov	r3, r4
 8005628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d014      	beq.n	800565a <USB_DeactivateEndpoint+0x142>
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005646:	b29c      	uxth	r4, r3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <USB_DeactivateEndpoint+0x20c>)
 8005654:	4323      	orrs	r3, r4
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29c      	uxth	r4, r3
 8005668:	4623      	mov	r3, r4
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d014      	beq.n	800569c <USB_DeactivateEndpoint+0x184>
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	b29c      	uxth	r4, r3
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <USB_DeactivateEndpoint+0x204>)
 8005696:	4323      	orrs	r3, r4
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	b29c      	uxth	r4, r3
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <USB_DeactivateEndpoint+0x204>)
 80056c0:	4323      	orrs	r3, r4
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056dc:	b29c      	uxth	r4, r3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	441a      	add	r2, r3
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <USB_DeactivateEndpoint+0x208>)
 80056ea:	4323      	orrs	r3, r4
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005706:	b29c      	uxth	r4, r3
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	4b03      	ldr	r3, [pc, #12]	; (8005720 <USB_DeactivateEndpoint+0x208>)
 8005714:	4323      	orrs	r3, r4
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
 800571a:	e086      	b.n	800582a <USB_DeactivateEndpoint+0x312>
 800571c:	ffff80c0 	.word	0xffff80c0
 8005720:	ffff8080 	.word	0xffff8080
 8005724:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	b29c      	uxth	r4, r3
 8005736:	4623      	mov	r3, r4
 8005738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <USB_DeactivateEndpoint+0x252>
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	b29c      	uxth	r4, r3
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	4b35      	ldr	r3, [pc, #212]	; (8005838 <USB_DeactivateEndpoint+0x320>)
 8005764:	4323      	orrs	r3, r4
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29c      	uxth	r4, r3
 8005778:	4623      	mov	r3, r4
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d014      	beq.n	80057ac <USB_DeactivateEndpoint+0x294>
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005798:	b29c      	uxth	r4, r3
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	441a      	add	r2, r3
 80057a4:	4b25      	ldr	r3, [pc, #148]	; (800583c <USB_DeactivateEndpoint+0x324>)
 80057a6:	4323      	orrs	r3, r4
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	b29c      	uxth	r4, r3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <USB_DeactivateEndpoint+0x320>)
 80057d0:	4323      	orrs	r3, r4
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	b29c      	uxth	r4, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	441a      	add	r2, r3
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <USB_DeactivateEndpoint+0x328>)
 80057fa:	4323      	orrs	r3, r4
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4413      	add	r3, r2
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005816:	b29c      	uxth	r4, r3
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	441a      	add	r2, r3
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <USB_DeactivateEndpoint+0x328>)
 8005824:	4323      	orrs	r3, r4
 8005826:	b29b      	uxth	r3, r3
 8005828:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bc90      	pop	{r4, r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	ffffc080 	.word	0xffffc080
 800583c:	ffff80c0 	.word	0xffff80c0
 8005840:	ffff8080 	.word	0xffff8080

08005844 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b08d      	sub	sp, #52	; 0x34
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b01      	cmp	r3, #1
 8005854:	f040 8160 	bne.w	8005b18 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d909      	bls.n	8005878 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	1ad2      	subs	r2, r2, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	619a      	str	r2, [r3, #24]
 8005876:	e005      	b.n	8005884 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	7b1b      	ldrb	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d119      	bne.n	80058c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6959      	ldr	r1, [r3, #20]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	88da      	ldrh	r2, [r3, #6]
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	b29b      	uxth	r3, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fba8 	bl	8005fee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800589e:	687c      	ldr	r4, [r7, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	441c      	add	r4, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4423      	add	r3, r4
 80058b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058b6:	461c      	mov	r4, r3
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8023      	strh	r3, [r4, #0]
 80058be:	e10f      	b.n	8005ae0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d065      	beq.n	80059a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058d6:	687c      	ldr	r4, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d148      	bne.n	8005972 <USB_EPStartXfer+0x12e>
 80058e0:	687c      	ldr	r4, [r7, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	441c      	add	r4, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4423      	add	r3, r4
 80058f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058f8:	461c      	mov	r4, r3
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10e      	bne.n	800591e <USB_EPStartXfer+0xda>
 8005900:	8823      	ldrh	r3, [r4, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005908:	b29b      	uxth	r3, r3
 800590a:	8023      	strh	r3, [r4, #0]
 800590c:	8823      	ldrh	r3, [r4, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005918:	b29b      	uxth	r3, r3
 800591a:	8023      	strh	r3, [r4, #0]
 800591c:	e03d      	b.n	800599a <USB_EPStartXfer+0x156>
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	2b3e      	cmp	r3, #62	; 0x3e
 8005922:	d810      	bhi.n	8005946 <USB_EPStartXfer+0x102>
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <USB_EPStartXfer+0xf6>
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	3301      	adds	r3, #1
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29b      	uxth	r3, r3
 8005942:	8023      	strh	r3, [r4, #0]
 8005944:	e029      	b.n	800599a <USB_EPStartXfer+0x156>
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <USB_EPStartXfer+0x118>
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	3b01      	subs	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	b29b      	uxth	r3, r3
 8005960:	029b      	lsls	r3, r3, #10
 8005962:	b29b      	uxth	r3, r3
 8005964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596c:	b29b      	uxth	r3, r3
 800596e:	8023      	strh	r3, [r4, #0]
 8005970:	e013      	b.n	800599a <USB_EPStartXfer+0x156>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10f      	bne.n	800599a <USB_EPStartXfer+0x156>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005980:	b29b      	uxth	r3, r3
 8005982:	441c      	add	r4, r3
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4423      	add	r3, r4
 800598c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	895b      	ldrh	r3, [r3, #10]
 800599e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059a0:	e063      	b.n	8005a6a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d148      	bne.n	8005a3c <USB_EPStartXfer+0x1f8>
 80059aa:	687c      	ldr	r4, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	441c      	add	r4, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4423      	add	r3, r4
 80059be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059c2:	461c      	mov	r4, r3
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10e      	bne.n	80059e8 <USB_EPStartXfer+0x1a4>
 80059ca:	8823      	ldrh	r3, [r4, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8023      	strh	r3, [r4, #0]
 80059d6:	8823      	ldrh	r3, [r4, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8023      	strh	r3, [r4, #0]
 80059e6:	e03d      	b.n	8005a64 <USB_EPStartXfer+0x220>
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b3e      	cmp	r3, #62	; 0x3e
 80059ec:	d810      	bhi.n	8005a10 <USB_EPStartXfer+0x1cc>
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <USB_EPStartXfer+0x1c0>
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	3301      	adds	r3, #1
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8023      	strh	r3, [r4, #0]
 8005a0e:	e029      	b.n	8005a64 <USB_EPStartXfer+0x220>
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <USB_EPStartXfer+0x1e2>
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	623b      	str	r3, [r7, #32]
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8023      	strh	r3, [r4, #0]
 8005a3a:	e013      	b.n	8005a64 <USB_EPStartXfer+0x220>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10f      	bne.n	8005a64 <USB_EPStartXfer+0x220>
 8005a44:	687c      	ldr	r4, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	441c      	add	r4, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4423      	add	r3, r4
 8005a58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a5c:	461c      	mov	r4, r3
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	891b      	ldrh	r3, [r3, #8]
 8005a68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faba 	bl	8005fee <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d115      	bne.n	8005aae <USB_EPStartXfer+0x26a>
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	b29c      	uxth	r4, r3
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	441a      	add	r2, r3
 8005aa4:	4b9a      	ldr	r3, [pc, #616]	; (8005d10 <USB_EPStartXfer+0x4cc>)
 8005aa6:	4323      	orrs	r3, r4
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8013      	strh	r3, [r2, #0]
 8005aac:	e018      	b.n	8005ae0 <USB_EPStartXfer+0x29c>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d114      	bne.n	8005ae0 <USB_EPStartXfer+0x29c>
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	b29c      	uxth	r4, r3
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	441a      	add	r2, r3
 8005ad8:	4b8e      	ldr	r3, [pc, #568]	; (8005d14 <USB_EPStartXfer+0x4d0>)
 8005ada:	4323      	orrs	r3, r4
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af6:	b29c      	uxth	r4, r3
 8005af8:	f084 0310 	eor.w	r3, r4, #16
 8005afc:	b29c      	uxth	r4, r3
 8005afe:	f084 0320 	eor.w	r3, r4, #32
 8005b02:	b29c      	uxth	r4, r3
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	4b82      	ldr	r3, [pc, #520]	; (8005d18 <USB_EPStartXfer+0x4d4>)
 8005b10:	4323      	orrs	r3, r4
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]
 8005b16:	e146      	b.n	8005da6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d909      	bls.n	8005b38 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	1ad2      	subs	r2, r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	e005      	b.n	8005b44 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	7b1b      	ldrb	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d148      	bne.n	8005bde <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b4c:	687c      	ldr	r4, [r7, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	441c      	add	r4, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4423      	add	r3, r4
 8005b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b64:	461c      	mov	r4, r3
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10e      	bne.n	8005b8a <USB_EPStartXfer+0x346>
 8005b6c:	8823      	ldrh	r3, [r4, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8023      	strh	r3, [r4, #0]
 8005b78:	8823      	ldrh	r3, [r4, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8023      	strh	r3, [r4, #0]
 8005b88:	e0f2      	b.n	8005d70 <USB_EPStartXfer+0x52c>
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b8e:	d810      	bhi.n	8005bb2 <USB_EPStartXfer+0x36e>
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <USB_EPStartXfer+0x362>
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	61fb      	str	r3, [r7, #28]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	029b      	lsls	r3, r3, #10
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	8023      	strh	r3, [r4, #0]
 8005bb0:	e0de      	b.n	8005d70 <USB_EPStartXfer+0x52c>
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <USB_EPStartXfer+0x384>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8023      	strh	r3, [r4, #0]
 8005bdc:	e0c8      	b.n	8005d70 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d148      	bne.n	8005c78 <USB_EPStartXfer+0x434>
 8005be6:	687c      	ldr	r4, [r7, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	441c      	add	r4, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4423      	add	r3, r4
 8005bfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bfe:	461c      	mov	r4, r3
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10e      	bne.n	8005c24 <USB_EPStartXfer+0x3e0>
 8005c06:	8823      	ldrh	r3, [r4, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8023      	strh	r3, [r4, #0]
 8005c12:	8823      	ldrh	r3, [r4, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	8023      	strh	r3, [r4, #0]
 8005c22:	e03d      	b.n	8005ca0 <USB_EPStartXfer+0x45c>
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	2b3e      	cmp	r3, #62	; 0x3e
 8005c28:	d810      	bhi.n	8005c4c <USB_EPStartXfer+0x408>
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <USB_EPStartXfer+0x3fc>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	029b      	lsls	r3, r3, #10
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	8023      	strh	r3, [r4, #0]
 8005c4a:	e029      	b.n	8005ca0 <USB_EPStartXfer+0x45c>
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <USB_EPStartXfer+0x41e>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	029b      	lsls	r3, r3, #10
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	8023      	strh	r3, [r4, #0]
 8005c76:	e013      	b.n	8005ca0 <USB_EPStartXfer+0x45c>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10f      	bne.n	8005ca0 <USB_EPStartXfer+0x45c>
 8005c80:	687c      	ldr	r4, [r7, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	441c      	add	r4, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	4423      	add	r3, r4
 8005c94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c98:	461c      	mov	r4, r3
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8023      	strh	r3, [r4, #0]
 8005ca0:	687c      	ldr	r4, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d14e      	bne.n	8005d48 <USB_EPStartXfer+0x504>
 8005caa:	687c      	ldr	r4, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	441c      	add	r4, r3
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	4423      	add	r3, r4
 8005cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10e      	bne.n	8005ce8 <USB_EPStartXfer+0x4a4>
 8005cca:	8823      	ldrh	r3, [r4, #0]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8023      	strh	r3, [r4, #0]
 8005cd6:	8823      	ldrh	r3, [r4, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8023      	strh	r3, [r4, #0]
 8005ce6:	e043      	b.n	8005d70 <USB_EPStartXfer+0x52c>
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	2b3e      	cmp	r3, #62	; 0x3e
 8005cec:	d816      	bhi.n	8005d1c <USB_EPStartXfer+0x4d8>
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <USB_EPStartXfer+0x4c0>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	3301      	adds	r3, #1
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8023      	strh	r3, [r4, #0]
 8005d0e:	e02f      	b.n	8005d70 <USB_EPStartXfer+0x52c>
 8005d10:	ffff80c0 	.word	0xffff80c0
 8005d14:	ffffc080 	.word	0xffffc080
 8005d18:	ffff8080 	.word	0xffff8080
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <USB_EPStartXfer+0x4ee>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	8023      	strh	r3, [r4, #0]
 8005d46:	e013      	b.n	8005d70 <USB_EPStartXfer+0x52c>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <USB_EPStartXfer+0x52c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	441c      	add	r4, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4423      	add	r3, r4
 8005d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d86:	b29c      	uxth	r4, r3
 8005d88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005d8c:	b29c      	uxth	r4, r3
 8005d8e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005d92:	b29c      	uxth	r4, r3
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	441a      	add	r2, r3
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <USB_EPStartXfer+0x56c>)
 8005da0:	4323      	orrs	r3, r4
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3734      	adds	r7, #52	; 0x34
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd90      	pop	{r4, r7, pc}
 8005db0:	ffff8080 	.word	0xffff8080

08005db4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005db4:	b490      	push	{r4, r7}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d018      	beq.n	8005df8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ddc:	b29c      	uxth	r4, r3
 8005dde:	f084 0310 	eor.w	r3, r4, #16
 8005de2:	b29c      	uxth	r4, r3
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <USB_EPSetStall+0x80>)
 8005df0:	4323      	orrs	r3, r4
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	8013      	strh	r3, [r2, #0]
 8005df6:	e017      	b.n	8005e28 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	b29c      	uxth	r4, r3
 8005e10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005e14:	b29c      	uxth	r4, r3
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <USB_EPSetStall+0x80>)
 8005e22:	4323      	orrs	r3, r4
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc90      	pop	{r4, r7}
 8005e32:	4770      	bx	lr
 8005e34:	ffff8080 	.word	0xffff8080

08005e38 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e38:	b490      	push	{r4, r7}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7b1b      	ldrb	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d17d      	bne.n	8005f46 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d03d      	beq.n	8005ece <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29c      	uxth	r4, r3
 8005e60:	4623      	mov	r3, r4
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d014      	beq.n	8005e94 <USB_EPClearStall+0x5c>
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e80:	b29c      	uxth	r4, r3
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <USB_EPClearStall+0x11c>)
 8005e8e:	4323      	orrs	r3, r4
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	78db      	ldrb	r3, [r3, #3]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d054      	beq.n	8005f46 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	b29c      	uxth	r4, r3
 8005eb4:	f084 0320 	eor.w	r3, r4, #32
 8005eb8:	b29c      	uxth	r4, r3
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	441a      	add	r2, r3
 8005ec4:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <USB_EPClearStall+0x120>)
 8005ec6:	4323      	orrs	r3, r4
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	8013      	strh	r3, [r2, #0]
 8005ecc:	e03b      	b.n	8005f46 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29c      	uxth	r4, r3
 8005edc:	4623      	mov	r3, r4
 8005ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d014      	beq.n	8005f10 <USB_EPClearStall+0xd8>
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efc:	b29c      	uxth	r4, r3
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	441a      	add	r2, r3
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <USB_EPClearStall+0x124>)
 8005f0a:	4323      	orrs	r3, r4
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	b29c      	uxth	r4, r3
 8005f28:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f2c:	b29c      	uxth	r4, r3
 8005f2e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005f32:	b29c      	uxth	r4, r3
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <USB_EPClearStall+0x120>)
 8005f40:	4323      	orrs	r3, r4
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc90      	pop	{r4, r7}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	ffff80c0 	.word	0xffff80c0
 8005f58:	ffff8080 	.word	0xffff8080
 8005f5c:	ffffc080 	.word	0xffffc080

08005f60 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2280      	movs	r2, #128	; 0x80
 8005f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b08d      	sub	sp, #52	; 0x34
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	80fb      	strh	r3, [r7, #6]
 8006000:	4613      	mov	r3, r2
 8006002:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006004:	88bb      	ldrh	r3, [r7, #4]
 8006006:	3301      	adds	r3, #1
 8006008:	085b      	lsrs	r3, r3, #1
 800600a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006014:	88fa      	ldrh	r2, [r7, #6]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	e01b      	b.n	800605e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	3301      	adds	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	b29a      	uxth	r2, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	3302      	adds	r3, #2
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	3301      	adds	r3, #1
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	3b01      	subs	r3, #1
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e0      	bne.n	8006026 <USB_WritePMA+0x38>
  }
}
 8006064:	bf00      	nop
 8006066:	3734      	adds	r7, #52	; 0x34
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006070:	b480      	push	{r7}
 8006072:	b08b      	sub	sp, #44	; 0x2c
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4611      	mov	r1, r2
 800607c:	461a      	mov	r2, r3
 800607e:	460b      	mov	r3, r1
 8006080:	80fb      	strh	r3, [r7, #6]
 8006082:	4613      	mov	r3, r2
 8006084:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006086:	88bb      	ldrh	r3, [r7, #4]
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	b29b      	uxth	r3, r3
 800608c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	e018      	b.n	80060da <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	3302      	adds	r3, #2
 80060b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	3301      	adds	r3, #1
 80060c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	3301      	adds	r3, #1
 80060d2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	3b01      	subs	r3, #1
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e3      	bne.n	80060a8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80060e0:	88bb      	ldrh	r3, [r7, #4]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	701a      	strb	r2, [r3, #0]
  }
}
 80060fc:	bf00      	nop
 80060fe:	372c      	adds	r7, #44	; 0x2c
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7c1b      	ldrb	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d115      	bne.n	800614c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006124:	2202      	movs	r2, #2
 8006126:	2181      	movs	r1, #129	; 0x81
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fe80 	bl	8007e2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006138:	2202      	movs	r2, #2
 800613a:	2101      	movs	r1, #1
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 fe76 	bl	8007e2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800614a:	e012      	b.n	8006172 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800614c:	2340      	movs	r3, #64	; 0x40
 800614e:	2202      	movs	r2, #2
 8006150:	2181      	movs	r1, #129	; 0x81
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fe6b 	bl	8007e2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	2202      	movs	r2, #2
 8006162:	2101      	movs	r1, #1
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fe62 	bl	8007e2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006172:	2308      	movs	r3, #8
 8006174:	2203      	movs	r2, #3
 8006176:	2182      	movs	r1, #130	; 0x82
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fe58 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006188:	f001 ffa8 	bl	80080dc <USBD_static_malloc>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800619e:	2301      	movs	r3, #1
 80061a0:	73fb      	strb	r3, [r7, #15]
 80061a2:	e026      	b.n	80061f2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7c1b      	ldrb	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d8:	2101      	movs	r1, #1
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 ff12 	bl	8008004 <USBD_LL_PrepareReceive>
 80061e0:	e007      	b.n	80061f2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	2101      	movs	r1, #1
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 ff09 	bl	8008004 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800620c:	2181      	movs	r1, #129	; 0x81
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fe33 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800621a:	2101      	movs	r1, #1
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 fe2c 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800622a:	2182      	movs	r1, #130	; 0x82
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fe24 	bl	8007e7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00e      	beq.n	8006260 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006252:	4618      	mov	r0, r3
 8006254:	f001 ff50 	bl	80080f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006290:	2b00      	cmp	r3, #0
 8006292:	d039      	beq.n	8006308 <USBD_CDC_Setup+0x9e>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d17c      	bne.n	8006392 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	88db      	ldrh	r3, [r3, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d029      	beq.n	80062f4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da11      	bge.n	80062ce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80062b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	88d2      	ldrh	r2, [r2, #6]
 80062bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062be:	6939      	ldr	r1, [r7, #16]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	88db      	ldrh	r3, [r3, #6]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 f9fa 	bl	80076c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80062cc:	e068      	b.n	80063a0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785a      	ldrb	r2, [r3, #1]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	88db      	ldrh	r3, [r3, #6]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 fa15 	bl	800771c <USBD_CtlPrepareRx>
      break;
 80062f2:	e055      	b.n	80063a0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	7850      	ldrb	r0, [r2, #1]
 8006300:	2200      	movs	r2, #0
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	4798      	blx	r3
      break;
 8006306:	e04b      	b.n	80063a0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	785b      	ldrb	r3, [r3, #1]
 800630c:	2b0a      	cmp	r3, #10
 800630e:	d017      	beq.n	8006340 <USBD_CDC_Setup+0xd6>
 8006310:	2b0b      	cmp	r3, #11
 8006312:	d029      	beq.n	8006368 <USBD_CDC_Setup+0xfe>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d133      	bne.n	8006380 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	2b03      	cmp	r3, #3
 8006320:	d107      	bne.n	8006332 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006322:	f107 030c 	add.w	r3, r7, #12
 8006326:	2202      	movs	r2, #2
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 f9c8 	bl	80076c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006330:	e02e      	b.n	8006390 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f958 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 800633a:	2302      	movs	r3, #2
 800633c:	75fb      	strb	r3, [r7, #23]
          break;
 800633e:	e027      	b.n	8006390 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006346:	2b03      	cmp	r3, #3
 8006348:	d107      	bne.n	800635a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800634a:	f107 030f 	add.w	r3, r7, #15
 800634e:	2201      	movs	r2, #1
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 f9b4 	bl	80076c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006358:	e01a      	b.n	8006390 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f944 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006362:	2302      	movs	r3, #2
 8006364:	75fb      	strb	r3, [r7, #23]
          break;
 8006366:	e013      	b.n	8006390 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636e:	2b03      	cmp	r3, #3
 8006370:	d00d      	beq.n	800638e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f938 	bl	80075ea <USBD_CtlError>
            ret = USBD_FAIL;
 800637a:	2302      	movs	r3, #2
 800637c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800637e:	e006      	b.n	800638e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 f931 	bl	80075ea <USBD_CtlError>
          ret = USBD_FAIL;
 8006388:	2302      	movs	r3, #2
 800638a:	75fb      	strb	r3, [r7, #23]
          break;
 800638c:	e000      	b.n	8006390 <USBD_CDC_Setup+0x126>
          break;
 800638e:	bf00      	nop
      }
      break;
 8006390:	e006      	b.n	80063a0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f928 	bl	80075ea <USBD_CtlError>
      ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	bf00      	nop
  }

  return ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d037      	beq.n	8006440 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	331c      	adds	r3, #28
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d026      	beq.n	8006434 <USBD_CDC_DataIn+0x8a>
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	331c      	adds	r3, #28
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	0152      	lsls	r2, r2, #5
 80063fe:	440a      	add	r2, r1
 8006400:	3238      	adds	r2, #56	; 0x38
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	fbb3 f1f2 	udiv	r1, r3, r2
 8006408:	fb02 f201 	mul.w	r2, r2, r1
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d110      	bne.n	8006434 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	331c      	adds	r3, #28
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006426:	78f9      	ldrb	r1, [r7, #3]
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fdc6 	bl	8007fbe <USBD_LL_Transmit>
 8006432:	e003      	b.n	800643c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fdf1 	bl	800804a <USBD_LL_GetRxDataSize>
 8006468:	4602      	mov	r2, r0
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800648e:	4611      	mov	r1, r2
 8006490:	4798      	blx	r3

    return USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	e000      	b.n	8006498 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d015      	beq.n	80064e6 <USBD_CDC_EP0_RxReady+0x46>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064c0:	2bff      	cmp	r3, #255	; 0xff
 80064c2:	d010      	beq.n	80064e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80064d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064da:	b292      	uxth	r2, r2
 80064dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	22ff      	movs	r2, #255	; 0xff
 80064e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2243      	movs	r2, #67	; 0x43
 80064fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80064fe:	4b03      	ldr	r3, [pc, #12]	; (800650c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000094 	.word	0x20000094

08006510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2243      	movs	r2, #67	; 0x43
 800651c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800651e:	4b03      	ldr	r3, [pc, #12]	; (800652c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000050 	.word	0x20000050

08006530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2243      	movs	r2, #67	; 0x43
 800653c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	200000d8 	.word	0x200000d8

08006550 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	220a      	movs	r2, #10
 800655c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	2000000c 	.word	0x2000000c

08006570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800657a:	2302      	movs	r3, #2
 800657c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800659e:	b480      	push	{r7}
 80065a0:	b087      	sub	sp, #28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	4613      	mov	r3, r2
 80065aa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006608:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	7c1b      	ldrb	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006626:	2101      	movs	r1, #1
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fceb 	bl	8008004 <USBD_LL_PrepareReceive>
 800662e:	e007      	b.n	8006640 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fce2 	bl	8008004 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	4613      	mov	r3, r2
 800665a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006662:	2302      	movs	r3, #2
 8006664:	e01a      	b.n	800669c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	79fa      	ldrb	r2, [r7, #7]
 8006692:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fb4f 	bl	8007d38 <USBD_LL_Init>

  return USBD_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d006      	beq.n	80066c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e001      	b.n	80066ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066c6:	2302      	movs	r3, #2
 80066c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fb89 	bl	8007df8 <USBD_LL_Start>

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006712:	2302      	movs	r3, #2
 8006714:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	4611      	mov	r1, r2
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	4611      	mov	r1, r2
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3

  return USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fef7 	bl	8007570 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800679e:	f003 031f 	and.w	r3, r3, #31
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d00c      	beq.n	80067c0 <USBD_LL_SetupStage+0x56>
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d302      	bcc.n	80067b0 <USBD_LL_SetupStage+0x46>
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d010      	beq.n	80067d0 <USBD_LL_SetupStage+0x66>
 80067ae:	e017      	b.n	80067e0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9cd 	bl	8006b58 <USBD_StdDevReq>
      break;
 80067be:	e01a      	b.n	80067f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa2f 	bl	8006c2c <USBD_StdItfReq>
      break;
 80067ce:	e012      	b.n	80067f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa6d 	bl	8006cb8 <USBD_StdEPReq>
      break;
 80067de:	e00a      	b.n	80067f6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	4619      	mov	r1, r3
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fb62 	bl	8007eb8 <USBD_LL_StallEP>
      break;
 80067f4:	bf00      	nop
  }

  return USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	460b      	mov	r3, r1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d14b      	bne.n	80068ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800681a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006822:	2b03      	cmp	r3, #3
 8006824:	d134      	bne.n	8006890 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	429a      	cmp	r2, r3
 8006830:	d919      	bls.n	8006866 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006848:	429a      	cmp	r2, r3
 800684a:	d203      	bcs.n	8006854 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006850:	b29b      	uxth	r3, r3
 8006852:	e002      	b.n	800685a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006858:	b29b      	uxth	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 ff7a 	bl	8007758 <USBD_CtlContinueRx>
 8006864:	e038      	b.n	80068d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006878:	2b03      	cmp	r3, #3
 800687a:	d105      	bne.n	8006888 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 ff77 	bl	800777c <USBD_CtlSendStatus>
 800688e:	e023      	b.n	80068d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006896:	2b05      	cmp	r3, #5
 8006898:	d11e      	bne.n	80068d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068a2:	2100      	movs	r1, #0
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f001 fb07 	bl	8007eb8 <USBD_LL_StallEP>
 80068aa:	e015      	b.n	80068d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d108      	bne.n	80068d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	7afa      	ldrb	r2, [r7, #11]
 80068cc:	4611      	mov	r1, r2
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	4798      	blx	r3
 80068d2:	e001      	b.n	80068d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068d4:	2302      	movs	r3, #2
 80068d6:	e000      	b.n	80068da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	460b      	mov	r3, r1
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d17f      	bne.n	80069f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3314      	adds	r3, #20
 80068fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006902:	2b02      	cmp	r3, #2
 8006904:	d15c      	bne.n	80069c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	429a      	cmp	r2, r3
 8006910:	d915      	bls.n	800693e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 fee4 	bl	80076f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006930:	2300      	movs	r3, #0
 8006932:	2200      	movs	r2, #0
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f001 fb64 	bl	8008004 <USBD_LL_PrepareReceive>
 800693c:	e04e      	b.n	80069dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	6912      	ldr	r2, [r2, #16]
 8006946:	fbb3 f1f2 	udiv	r1, r3, r2
 800694a:	fb02 f201 	mul.w	r2, r2, r1
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11c      	bne.n	800698e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800695c:	429a      	cmp	r2, r3
 800695e:	d316      	bcc.n	800698e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d20f      	bcs.n	800698e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fec0 	bl	80076f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006980:	2300      	movs	r3, #0
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f001 fb3c 	bl	8008004 <USBD_LL_PrepareReceive>
 800698c:	e026      	b.n	80069dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d105      	bne.n	80069b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069b0:	2180      	movs	r1, #128	; 0x80
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 fa80 	bl	8007eb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fef2 	bl	80077a2 <USBD_CtlReceiveStatus>
 80069be:	e00d      	b.n	80069dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d004      	beq.n	80069d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d103      	bne.n	80069dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069d4:	2180      	movs	r1, #128	; 0x80
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f001 fa6e 	bl	8007eb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d11d      	bne.n	8006a22 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f7ff fe82 	bl	80066f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069f4:	e015      	b.n	8006a22 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d108      	bne.n	8006a1e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	7afa      	ldrb	r2, [r7, #11]
 8006a16:	4611      	mov	r1, r2
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	4798      	blx	r3
 8006a1c:	e001      	b.n	8006a22 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e000      	b.n	8006a24 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	2200      	movs	r2, #0
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f9f7 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2240      	movs	r2, #64	; 0x40
 8006a4c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	2200      	movs	r2, #0
 8006a54:	2180      	movs	r1, #128	; 0x80
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f9e9 	bl	8007e2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2240      	movs	r2, #64	; 0x40
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
  }

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d105      	bne.n	8006b16 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d10b      	bne.n	8006b4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d004      	beq.n	8006b7c <USBD_StdDevReq+0x24>
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d002      	beq.n	8006b7c <USBD_StdDevReq+0x24>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <USBD_StdDevReq+0x34>
 8006b7a:	e04c      	b.n	8006c16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
      break;
 8006b8a:	e049      	b.n	8006c20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b09      	cmp	r3, #9
 8006b92:	d83a      	bhi.n	8006c0a <USBD_StdDevReq+0xb2>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <USBD_StdDevReq+0x44>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bed 	.word	0x08006bed
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006c0b 	.word	0x08006c0b
 8006ba8:	08006bf7 	.word	0x08006bf7
 8006bac:	08006c0b 	.word	0x08006c0b
 8006bb0:	08006bcf 	.word	0x08006bcf
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006c0b 	.word	0x08006c0b
 8006bbc:	08006be3 	.word	0x08006be3
 8006bc0:	08006bd9 	.word	0x08006bd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9d4 	bl	8006f74 <USBD_GetDescriptor>
          break;
 8006bcc:	e022      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fb61 	bl	8007298 <USBD_SetAddress>
          break;
 8006bd6:	e01d      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb9e 	bl	800731c <USBD_SetConfig>
          break;
 8006be0:	e018      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc27 	bl	8007438 <USBD_GetConfig>
          break;
 8006bea:	e013      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fc56 	bl	80074a0 <USBD_GetStatus>
          break;
 8006bf4:	e00e      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc84 	bl	8007506 <USBD_SetFeature>
          break;
 8006bfe:	e009      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fc93 	bl	800752e <USBD_ClrFeature>
          break;
 8006c08:	e004      	b.n	8006c14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fcec 	bl	80075ea <USBD_CtlError>
          break;
 8006c12:	bf00      	nop
      }
      break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fce6 	bl	80075ea <USBD_CtlError>
      break;
 8006c1e:	bf00      	nop
  }

  return ret;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop

08006c2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d003      	beq.n	8006c4e <USBD_StdItfReq+0x22>
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d001      	beq.n	8006c4e <USBD_StdItfReq+0x22>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d12a      	bne.n	8006ca4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c54:	3b01      	subs	r3, #1
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d81d      	bhi.n	8006c96 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	889b      	ldrh	r3, [r3, #4]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d813      	bhi.n	8006c8c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	88db      	ldrh	r3, [r3, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d110      	bne.n	8006ca0 <USBD_StdItfReq+0x74>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fd79 	bl	800777c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c8a:	e009      	b.n	8006ca0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fcab 	bl	80075ea <USBD_CtlError>
          break;
 8006c94:	e004      	b.n	8006ca0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fca6 	bl	80075ea <USBD_CtlError>
          break;
 8006c9e:	e000      	b.n	8006ca2 <USBD_StdItfReq+0x76>
          break;
 8006ca0:	bf00      	nop
      }
      break;
 8006ca2:	e004      	b.n	8006cae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fc9f 	bl	80075ea <USBD_CtlError>
      break;
 8006cac:	bf00      	nop
  }

  return USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	889b      	ldrh	r3, [r3, #4]
 8006cca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d004      	beq.n	8006ce2 <USBD_StdEPReq+0x2a>
 8006cd8:	2b40      	cmp	r3, #64	; 0x40
 8006cda:	d002      	beq.n	8006ce2 <USBD_StdEPReq+0x2a>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <USBD_StdEPReq+0x3a>
 8006ce0:	e13d      	b.n	8006f5e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
      break;
 8006cf0:	e13a      	b.n	8006f68 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cfa:	2b20      	cmp	r3, #32
 8006cfc:	d10a      	bne.n	8006d14 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	e12a      	b.n	8006f6a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d03e      	beq.n	8006d9a <USBD_StdEPReq+0xe2>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d002      	beq.n	8006d26 <USBD_StdEPReq+0x6e>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d070      	beq.n	8006e06 <USBD_StdEPReq+0x14e>
 8006d24:	e115      	b.n	8006f52 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d002      	beq.n	8006d36 <USBD_StdEPReq+0x7e>
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d015      	beq.n	8006d60 <USBD_StdEPReq+0xa8>
 8006d34:	e02b      	b.n	8006d8e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00c      	beq.n	8006d56 <USBD_StdEPReq+0x9e>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b80      	cmp	r3, #128	; 0x80
 8006d40:	d009      	beq.n	8006d56 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 f8b6 	bl	8007eb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 f8b2 	bl	8007eb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d54:	e020      	b.n	8006d98 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc46 	bl	80075ea <USBD_CtlError>
              break;
 8006d5e:	e01b      	b.n	8006d98 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	885b      	ldrh	r3, [r3, #2]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10e      	bne.n	8006d86 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <USBD_StdEPReq+0xce>
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b80      	cmp	r3, #128	; 0x80
 8006d72:	d008      	beq.n	8006d86 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	88db      	ldrh	r3, [r3, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f899 	bl	8007eb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fcf8 	bl	800777c <USBD_CtlSendStatus>

              break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fc2a 	bl	80075ea <USBD_CtlError>
              break;
 8006d96:	bf00      	nop
          }
          break;
 8006d98:	e0e0      	b.n	8006f5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d002      	beq.n	8006daa <USBD_StdEPReq+0xf2>
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d015      	beq.n	8006dd4 <USBD_StdEPReq+0x11c>
 8006da8:	e026      	b.n	8006df8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <USBD_StdEPReq+0x112>
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d009      	beq.n	8006dca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 f87c 	bl	8007eb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dc0:	2180      	movs	r1, #128	; 0x80
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f878 	bl	8007eb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dc8:	e01c      	b.n	8006e04 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fc0c 	bl	80075ea <USBD_CtlError>
              break;
 8006dd2:	e017      	b.n	8006e04 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d112      	bne.n	8006e02 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 f883 	bl	8007ef6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fcc3 	bl	800777c <USBD_CtlSendStatus>
              }
              break;
 8006df6:	e004      	b.n	8006e02 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fbf5 	bl	80075ea <USBD_CtlError>
              break;
 8006e00:	e000      	b.n	8006e04 <USBD_StdEPReq+0x14c>
              break;
 8006e02:	bf00      	nop
          }
          break;
 8006e04:	e0aa      	b.n	8006f5c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d002      	beq.n	8006e16 <USBD_StdEPReq+0x15e>
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d032      	beq.n	8006e7a <USBD_StdEPReq+0x1c2>
 8006e14:	e097      	b.n	8006f46 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <USBD_StdEPReq+0x174>
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b80      	cmp	r3, #128	; 0x80
 8006e20:	d004      	beq.n	8006e2c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fbe0 	bl	80075ea <USBD_CtlError>
                break;
 8006e2a:	e091      	b.n	8006f50 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da0b      	bge.n	8006e4c <USBD_StdEPReq+0x194>
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	3310      	adds	r3, #16
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4413      	add	r3, r2
 8006e48:	3304      	adds	r3, #4
 8006e4a:	e00b      	b.n	8006e64 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	4413      	add	r3, r2
 8006e62:	3304      	adds	r3, #4
 8006e64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fc24 	bl	80076c0 <USBD_CtlSendData>
              break;
 8006e78:	e06a      	b.n	8006f50 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da11      	bge.n	8006ea6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	3318      	adds	r3, #24
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d117      	bne.n	8006ecc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fba3 	bl	80075ea <USBD_CtlError>
                  break;
 8006ea4:	e054      	b.n	8006f50 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fb90 	bl	80075ea <USBD_CtlError>
                  break;
 8006eca:	e041      	b.n	8006f50 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da0b      	bge.n	8006eec <USBD_StdEPReq+0x234>
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3310      	adds	r3, #16
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	e00b      	b.n	8006f04 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4413      	add	r3, r2
 8006f02:	3304      	adds	r3, #4
 8006f04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <USBD_StdEPReq+0x25a>
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b80      	cmp	r3, #128	; 0x80
 8006f10:	d103      	bne.n	8006f1a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	e00e      	b.n	8006f38 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 f808 	bl	8007f34 <USBD_LL_IsStallEP>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e002      	b.n	8006f38 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fbbe 	bl	80076c0 <USBD_CtlSendData>
              break;
 8006f44:	e004      	b.n	8006f50 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fb4e 	bl	80075ea <USBD_CtlError>
              break;
 8006f4e:	bf00      	nop
          }
          break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb48 	bl	80075ea <USBD_CtlError>
          break;
 8006f5a:	bf00      	nop
      }
      break;
 8006f5c:	e004      	b.n	8006f68 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb42 	bl	80075ea <USBD_CtlError>
      break;
 8006f66:	bf00      	nop
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	885b      	ldrh	r3, [r3, #2]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	2b0e      	cmp	r3, #14
 8006f96:	f200 8152 	bhi.w	800723e <USBD_GetDescriptor+0x2ca>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_GetDescriptor+0x2c>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08007011 	.word	0x08007011
 8006fa4:	08007029 	.word	0x08007029
 8006fa8:	08007069 	.word	0x08007069
 8006fac:	0800723f 	.word	0x0800723f
 8006fb0:	0800723f 	.word	0x0800723f
 8006fb4:	080071df 	.word	0x080071df
 8006fb8:	0800720b 	.word	0x0800720b
 8006fbc:	0800723f 	.word	0x0800723f
 8006fc0:	0800723f 	.word	0x0800723f
 8006fc4:	0800723f 	.word	0x0800723f
 8006fc8:	0800723f 	.word	0x0800723f
 8006fcc:	0800723f 	.word	0x0800723f
 8006fd0:	0800723f 	.word	0x0800723f
 8006fd4:	0800723f 	.word	0x0800723f
 8006fd8:	08006fdd 	.word	0x08006fdd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ffe:	e126      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 faf1 	bl	80075ea <USBD_CtlError>
        err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
      break;
 800700e:	e11e      	b.n	800724e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	7c12      	ldrb	r2, [r2, #16]
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
      break;
 8007026:	e112      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7c1b      	ldrb	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800704a:	e100      	b.n	800724e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e0f2      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b05      	cmp	r3, #5
 8007070:	f200 80ac 	bhi.w	80071cc <USBD_GetDescriptor+0x258>
 8007074:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBD_GetDescriptor+0x108>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	08007095 	.word	0x08007095
 8007080:	080070c9 	.word	0x080070c9
 8007084:	080070fd 	.word	0x080070fd
 8007088:	08007131 	.word	0x08007131
 800708c:	08007165 	.word	0x08007165
 8007090:	08007199 	.word	0x08007199
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b6:	e091      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fa95 	bl	80075ea <USBD_CtlError>
            err++;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	3301      	adds	r3, #1
 80070c4:	72fb      	strb	r3, [r7, #11]
          break;
 80070c6:	e089      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ea:	e077      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa7b 	bl	80075ea <USBD_CtlError>
            err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
          break;
 80070fa:	e06f      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e05d      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa61 	bl	80075ea <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e055      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e043      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa47 	bl	80075ea <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e03b      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007186:	e029      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa2d 	bl	80075ea <USBD_CtlError>
            err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
          break;
 8007196:	e021      	b.n	80071dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e00f      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa13 	bl	80075ea <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e007      	b.n	80071dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa0b 	bl	80075ea <USBD_CtlError>
          err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80071da:	e038      	b.n	800724e <USBD_GetDescriptor+0x2da>
 80071dc:	e037      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7c1b      	ldrb	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f107 0208 	add.w	r2, r7, #8
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f8:	e029      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f9f4 	bl	80075ea <USBD_CtlError>
        err++;
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	3301      	adds	r3, #1
 8007206:	72fb      	strb	r3, [r7, #11]
      break;
 8007208:	e021      	b.n	800724e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f107 0208 	add.w	r2, r7, #8
 800721e:	4610      	mov	r0, r2
 8007220:	4798      	blx	r3
 8007222:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	2207      	movs	r2, #7
 800722a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800722c:	e00f      	b.n	800724e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9da 	bl	80075ea <USBD_CtlError>
        err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	e007      	b.n	800724e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9d2 	bl	80075ea <USBD_CtlError>
      err++;
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	3301      	adds	r3, #1
 800724a:	72fb      	strb	r3, [r7, #11]
      break;
 800724c:	bf00      	nop
  }

  if (err != 0U)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11c      	bne.n	800728e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007254:	893b      	ldrh	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <USBD_GetDescriptor+0x30a>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	88db      	ldrh	r3, [r3, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88da      	ldrh	r2, [r3, #6]
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	4293      	cmp	r3, r2
 800726a:	bf28      	it	cs
 800726c:	4613      	movcs	r3, r2
 800726e:	b29b      	uxth	r3, r3
 8007270:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	461a      	mov	r2, r3
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa21 	bl	80076c0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	88db      	ldrh	r3, [r3, #6]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa78 	bl	800777c <USBD_CtlSendStatus>
 800728c:	e000      	b.n	8007290 <USBD_GetDescriptor+0x31c>
    return;
 800728e:	bf00      	nop
    }
  }
}
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	889b      	ldrh	r3, [r3, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d130      	bne.n	800730c <USBD_SetAddress+0x74>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	88db      	ldrh	r3, [r3, #6]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d12c      	bne.n	800730c <USBD_SetAddress+0x74>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	885b      	ldrh	r3, [r3, #2]
 80072b6:	2b7f      	cmp	r3, #127	; 0x7f
 80072b8:	d828      	bhi.n	800730c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	885b      	ldrh	r3, [r3, #2]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d104      	bne.n	80072da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f989 	bl	80075ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d8:	e01c      	b.n	8007314 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	7bfa      	ldrb	r2, [r7, #15]
 80072de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fe4a 	bl	8007f80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa45 	bl	800777c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	e008      	b.n	8007314 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730a:	e003      	b.n	8007314 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f96b 	bl	80075ea <USBD_CtlError>
  }
}
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	4b41      	ldr	r3, [pc, #260]	; (8007434 <USBD_SetConfig+0x118>)
 800732e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007330:	4b40      	ldr	r3, [pc, #256]	; (8007434 <USBD_SetConfig+0x118>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d904      	bls.n	8007342 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f955 	bl	80075ea <USBD_CtlError>
 8007340:	e075      	b.n	800742e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	2b02      	cmp	r3, #2
 800734a:	d002      	beq.n	8007352 <USBD_SetConfig+0x36>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d023      	beq.n	8007398 <USBD_SetConfig+0x7c>
 8007350:	e062      	b.n	8007418 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007352:	4b38      	ldr	r3, [pc, #224]	; (8007434 <USBD_SetConfig+0x118>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01a      	beq.n	8007390 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <USBD_SetConfig+0x118>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800736c:	4b31      	ldr	r3, [pc, #196]	; (8007434 <USBD_SetConfig+0x118>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff f9c7 	bl	8006706 <USBD_SetClassConfig>
 8007378:	4603      	mov	r3, r0
 800737a:	2b02      	cmp	r3, #2
 800737c:	d104      	bne.n	8007388 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f932 	bl	80075ea <USBD_CtlError>
            return;
 8007386:	e052      	b.n	800742e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9f7 	bl	800777c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800738e:	e04e      	b.n	800742e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f9f3 	bl	800777c <USBD_CtlSendStatus>
        break;
 8007396:	e04a      	b.n	800742e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007398:	4b26      	ldr	r3, [pc, #152]	; (8007434 <USBD_SetConfig+0x118>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d112      	bne.n	80073c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80073a8:	4b22      	ldr	r3, [pc, #136]	; (8007434 <USBD_SetConfig+0x118>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80073b2:	4b20      	ldr	r3, [pc, #128]	; (8007434 <USBD_SetConfig+0x118>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff f9c3 	bl	8006744 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f9dc 	bl	800777c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073c4:	e033      	b.n	800742e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <USBD_SetConfig+0x118>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d01d      	beq.n	8007410 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff f9b1 	bl	8006744 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80073e2:	4b14      	ldr	r3, [pc, #80]	; (8007434 <USBD_SetConfig+0x118>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <USBD_SetConfig+0x118>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f987 	bl	8006706 <USBD_SetClassConfig>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d104      	bne.n	8007408 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f8f2 	bl	80075ea <USBD_CtlError>
            return;
 8007406:	e012      	b.n	800742e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f9b7 	bl	800777c <USBD_CtlSendStatus>
        break;
 800740e:	e00e      	b.n	800742e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9b3 	bl	800777c <USBD_CtlSendStatus>
        break;
 8007416:	e00a      	b.n	800742e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8e5 	bl	80075ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <USBD_SetConfig+0x118>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff f98c 	bl	8006744 <USBD_ClrClassConfig>
        break;
 800742c:	bf00      	nop
    }
  }
}
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000e06 	.word	0x20000e06

08007438 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	88db      	ldrh	r3, [r3, #6]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d004      	beq.n	8007454 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8cc 	bl	80075ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007452:	e021      	b.n	8007498 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745a:	2b01      	cmp	r3, #1
 800745c:	db17      	blt.n	800748e <USBD_GetConfig+0x56>
 800745e:	2b02      	cmp	r3, #2
 8007460:	dd02      	ble.n	8007468 <USBD_GetConfig+0x30>
 8007462:	2b03      	cmp	r3, #3
 8007464:	d00b      	beq.n	800747e <USBD_GetConfig+0x46>
 8007466:	e012      	b.n	800748e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3308      	adds	r3, #8
 8007472:	2201      	movs	r2, #1
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f922 	bl	80076c0 <USBD_CtlSendData>
        break;
 800747c:	e00c      	b.n	8007498 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	2201      	movs	r2, #1
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f91a 	bl	80076c0 <USBD_CtlSendData>
        break;
 800748c:	e004      	b.n	8007498 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8aa 	bl	80075ea <USBD_CtlError>
        break;
 8007496:	bf00      	nop
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b0:	3b01      	subs	r3, #1
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d81e      	bhi.n	80074f4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	88db      	ldrh	r3, [r3, #6]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d004      	beq.n	80074c8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f892 	bl	80075ea <USBD_CtlError>
        break;
 80074c6:	e01a      	b.n	80074fe <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f043 0202 	orr.w	r2, r3, #2
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	330c      	adds	r3, #12
 80074e8:	2202      	movs	r2, #2
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8e7 	bl	80076c0 <USBD_CtlSendData>
      break;
 80074f2:	e004      	b.n	80074fe <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f877 	bl	80075ea <USBD_CtlError>
      break;
 80074fc:	bf00      	nop
  }
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	885b      	ldrh	r3, [r3, #2]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d106      	bne.n	8007526 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f92b 	bl	800777c <USBD_CtlSendStatus>
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800753e:	3b01      	subs	r3, #1
 8007540:	2b02      	cmp	r3, #2
 8007542:	d80b      	bhi.n	800755c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	885b      	ldrh	r3, [r3, #2]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10c      	bne.n	8007566 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f911 	bl	800777c <USBD_CtlSendStatus>
      }
      break;
 800755a:	e004      	b.n	8007566 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f843 	bl	80075ea <USBD_CtlError>
      break;
 8007564:	e000      	b.n	8007568 <USBD_ClrFeature+0x3a>
      break;
 8007566:	bf00      	nop
  }
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	785a      	ldrb	r2, [r3, #1]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	3302      	adds	r3, #2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b29a      	uxth	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	3303      	adds	r3, #3
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	4413      	add	r3, r2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	3304      	adds	r3, #4
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	3305      	adds	r3, #5
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	b29a      	uxth	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	3306      	adds	r3, #6
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	3307      	adds	r3, #7
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	4413      	add	r3, r2
 80075d8:	b29a      	uxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	80da      	strh	r2, [r3, #6]

}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fc5e 	bl	8007eb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075fc:	2100      	movs	r1, #0
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fc5a 	bl	8007eb8 <USBD_LL_StallEP>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d032      	beq.n	8007688 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f834 	bl	8007690 <USBD_GetLen>
 8007628:	4603      	mov	r3, r0
 800762a:	3301      	adds	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	75fa      	strb	r2, [r7, #23]
 800763c:	461a      	mov	r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	4413      	add	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	75fa      	strb	r2, [r7, #23]
 800764e:	461a      	mov	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4413      	add	r3, r2
 8007654:	2203      	movs	r2, #3
 8007656:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007658:	e012      	b.n	8007680 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	60fa      	str	r2, [r7, #12]
 8007660:	7dfa      	ldrb	r2, [r7, #23]
 8007662:	1c51      	adds	r1, r2, #1
 8007664:	75f9      	strb	r1, [r7, #23]
 8007666:	4611      	mov	r1, r2
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	440a      	add	r2, r1
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	75fa      	strb	r2, [r7, #23]
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4413      	add	r3, r2
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e8      	bne.n	800765a <USBD_GetString+0x4e>
    }
  }
}
 8007688:	bf00      	nop
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800769c:	e005      	b.n	80076aa <USBD_GetLen+0x1a>
  {
    len++;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	3301      	adds	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3301      	adds	r3, #1
 80076a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f5      	bne.n	800769e <USBD_GetLen+0xe>
  }

  return len;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076d6:	88fa      	ldrh	r2, [r7, #6]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076dc:	88fa      	ldrh	r2, [r7, #6]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	2100      	movs	r1, #0
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fc68 	bl	8007fbe <USBD_LL_Transmit>

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	2100      	movs	r1, #0
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 fc56 	bl	8007fbe <USBD_LL_Transmit>

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2203      	movs	r2, #3
 800772e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007742:	88fb      	ldrh	r3, [r7, #6]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	2100      	movs	r1, #0
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fc5b 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	2100      	movs	r1, #0
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fc49 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2204      	movs	r2, #4
 8007788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800778c:	2300      	movs	r3, #0
 800778e:	2200      	movs	r2, #0
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fc13 	bl	8007fbe <USBD_LL_Transmit>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2205      	movs	r2, #5
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077b2:	2300      	movs	r3, #0
 80077b4:	2200      	movs	r2, #0
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc23 	bl	8008004 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80077cc:	2200      	movs	r2, #0
 80077ce:	4912      	ldr	r1, [pc, #72]	; (8007818 <MX_USB_Device_Init+0x50>)
 80077d0:	4812      	ldr	r0, [pc, #72]	; (800781c <MX_USB_Device_Init+0x54>)
 80077d2:	f7fe ff3c 	bl	800664e <USBD_Init>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80077dc:	f7f9 f861 	bl	80008a2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80077e0:	490f      	ldr	r1, [pc, #60]	; (8007820 <MX_USB_Device_Init+0x58>)
 80077e2:	480e      	ldr	r0, [pc, #56]	; (800781c <MX_USB_Device_Init+0x54>)
 80077e4:	f7fe ff5e 	bl	80066a4 <USBD_RegisterClass>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80077ee:	f7f9 f858 	bl	80008a2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80077f2:	490c      	ldr	r1, [pc, #48]	; (8007824 <MX_USB_Device_Init+0x5c>)
 80077f4:	4809      	ldr	r0, [pc, #36]	; (800781c <MX_USB_Device_Init+0x54>)
 80077f6:	f7fe febb 	bl	8006570 <USBD_CDC_RegisterInterface>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007800:	f7f9 f84f 	bl	80008a2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <MX_USB_Device_Init+0x54>)
 8007806:	f7fe ff67 	bl	80066d8 <USBD_Start>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007810:	f7f9 f847 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}
 8007818:	2000012c 	.word	0x2000012c
 800781c:	200012c0 	.word	0x200012c0
 8007820:	20000018 	.word	0x20000018
 8007824:	2000011c 	.word	0x2000011c

08007828 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800782c:	2200      	movs	r2, #0
 800782e:	4905      	ldr	r1, [pc, #20]	; (8007844 <CDC_Init_FS+0x1c>)
 8007830:	4805      	ldr	r0, [pc, #20]	; (8007848 <CDC_Init_FS+0x20>)
 8007832:	f7fe feb4 	bl	800659e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007836:	4905      	ldr	r1, [pc, #20]	; (800784c <CDC_Init_FS+0x24>)
 8007838:	4803      	ldr	r0, [pc, #12]	; (8007848 <CDC_Init_FS+0x20>)
 800783a:	f7fe feca 	bl	80065d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800783e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007840:	4618      	mov	r0, r3
 8007842:	bd80      	pop	{r7, pc}
 8007844:	2000196c 	.word	0x2000196c
 8007848:	200012c0 	.word	0x200012c0
 800784c:	20001584 	.word	0x20001584

08007850 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007854:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007856:	4618      	mov	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	71fb      	strb	r3, [r7, #7]
 800786c:	4613      	mov	r3, r2
 800786e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	2b23      	cmp	r3, #35	; 0x23
 8007874:	d84a      	bhi.n	800790c <CDC_Control_FS+0xac>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <CDC_Control_FS+0x1c>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	0800790d 	.word	0x0800790d
 8007880:	0800790d 	.word	0x0800790d
 8007884:	0800790d 	.word	0x0800790d
 8007888:	0800790d 	.word	0x0800790d
 800788c:	0800790d 	.word	0x0800790d
 8007890:	0800790d 	.word	0x0800790d
 8007894:	0800790d 	.word	0x0800790d
 8007898:	0800790d 	.word	0x0800790d
 800789c:	0800790d 	.word	0x0800790d
 80078a0:	0800790d 	.word	0x0800790d
 80078a4:	0800790d 	.word	0x0800790d
 80078a8:	0800790d 	.word	0x0800790d
 80078ac:	0800790d 	.word	0x0800790d
 80078b0:	0800790d 	.word	0x0800790d
 80078b4:	0800790d 	.word	0x0800790d
 80078b8:	0800790d 	.word	0x0800790d
 80078bc:	0800790d 	.word	0x0800790d
 80078c0:	0800790d 	.word	0x0800790d
 80078c4:	0800790d 	.word	0x0800790d
 80078c8:	0800790d 	.word	0x0800790d
 80078cc:	0800790d 	.word	0x0800790d
 80078d0:	0800790d 	.word	0x0800790d
 80078d4:	0800790d 	.word	0x0800790d
 80078d8:	0800790d 	.word	0x0800790d
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	0800790d 	.word	0x0800790d
 80078f0:	0800790d 	.word	0x0800790d
 80078f4:	0800790d 	.word	0x0800790d
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	0800790d 	.word	0x0800790d
 8007904:	0800790d 	.word	0x0800790d
 8007908:	0800790d 	.word	0x0800790d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800790c:	bf00      	nop
  }

  return (USBD_OK);
 800790e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4805      	ldr	r0, [pc, #20]	; (8007940 <CDC_Receive_FS+0x24>)
 800792a:	f7fe fe52 	bl	80065d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800792e:	4804      	ldr	r0, [pc, #16]	; (8007940 <CDC_Receive_FS+0x24>)
 8007930:	f7fe fe63 	bl	80065fa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007934:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	200012c0 	.word	0x200012c0

08007944 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2212      	movs	r2, #18
 8007954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	2000014c 	.word	0x2000014c

08007968 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000160 	.word	0x20000160

0800798c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	; (80079c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80079a4:	f7ff fe32 	bl	800760c <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	; (80079c4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80079b0:	f7ff fe2c 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20001d54 	.word	0x20001d54
 80079c4:	080081e0 	.word	0x080081e0

080079c8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80079d8:	4804      	ldr	r0, [pc, #16]	; (80079ec <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80079da:	f7ff fe17 	bl	800760c <USBD_GetString>
  return USBD_StrDesc;
 80079de:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20001d54 	.word	0x20001d54
 80079ec:	080081f8 	.word	0x080081f8

080079f0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	221a      	movs	r2, #26
 8007a00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a02:	f000 f843 	bl	8007a8c <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007a06:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000164 	.word	0x20000164

08007a14 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007a2c:	f7ff fdee 	bl	800760c <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007a38:	f7ff fde8 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20001d54 	.word	0x20001d54
 8007a4c:	0800820c 	.word	0x0800820c

08007a50 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007a68:	f7ff fdd0 	bl	800760c <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007a74:	f7ff fdca 	bl	800760c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20001d54 	.word	0x20001d54
 8007a88:	08008218 	.word	0x08008218

08007a8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <Get_SerialNum+0x44>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a98:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <Get_SerialNum+0x48>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <Get_SerialNum+0x4c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	4909      	ldr	r1, [pc, #36]	; (8007adc <Get_SerialNum+0x50>)
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f814 	bl	8007ae4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007abc:	2204      	movs	r2, #4
 8007abe:	4908      	ldr	r1, [pc, #32]	; (8007ae0 <Get_SerialNum+0x54>)
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f000 f80f 	bl	8007ae4 <IntToUnicode>
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	1fff7590 	.word	0x1fff7590
 8007ad4:	1fff7594 	.word	0x1fff7594
 8007ad8:	1fff7598 	.word	0x1fff7598
 8007adc:	20000166 	.word	0x20000166
 8007ae0:	20000176 	.word	0x20000176

08007ae4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e027      	b.n	8007b4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0f1b      	lsrs	r3, r3, #28
 8007b00:	2b09      	cmp	r3, #9
 8007b02:	d80b      	bhi.n	8007b1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	0f1b      	lsrs	r3, r3, #28
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4619      	mov	r1, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	440b      	add	r3, r1
 8007b14:	3230      	adds	r2, #48	; 0x30
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	e00a      	b.n	8007b32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0f1b      	lsrs	r3, r3, #28
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	4619      	mov	r1, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3237      	adds	r2, #55	; 0x37
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	75fb      	strb	r3, [r7, #23]
 8007b4c:	7dfa      	ldrb	r2, [r7, #23]
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3d3      	bcc.n	8007afc <IntToUnicode+0x18>
  }
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	; 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	605a      	str	r2, [r3, #4]
 8007b72:	609a      	str	r2, [r3, #8]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1a      	ldr	r2, [pc, #104]	; (8007be8 <HAL_PCD_MspInit+0x88>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d12d      	bne.n	8007bde <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b82:	4b1a      	ldr	r3, [pc, #104]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b86:	4a19      	ldr	r2, [pc, #100]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007b88:	f043 0301 	orr.w	r3, r3, #1
 8007b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b8e:	4b17      	ldr	r3, [pc, #92]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba8:	f107 0314 	add.w	r3, r7, #20
 8007bac:	4619      	mov	r1, r3
 8007bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bb2:	f7f9 ff3b 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	4a0c      	ldr	r2, [pc, #48]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007bbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_PCD_MspInit+0x8c>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	2014      	movs	r0, #20
 8007bd4:	f7f9 fc83 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007bd8:	2014      	movs	r0, #20
 8007bda:	f7f9 fc9a 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007bde:	bf00      	nop
 8007be0:	3728      	adds	r7, #40	; 0x28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40005c00 	.word	0x40005c00
 8007bec:	40021000 	.word	0x40021000

08007bf0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7fe fdaf 	bl	800676a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	015b      	lsls	r3, r3, #5
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	4619      	mov	r1, r3
 8007c38:	f7fe fde2 	bl	8006800 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007c3c:	bf00      	nop
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	015b      	lsls	r3, r3, #5
 8007c5c:	4413      	add	r3, r2
 8007c5e:	333c      	adds	r3, #60	; 0x3c
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	4619      	mov	r1, r3
 8007c66:	f7fe fe3c 	bl	80068e2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe ff4f 	bl	8006b24 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c96:	2301      	movs	r3, #1
 8007c98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d001      	beq.n	8007ca6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ca2:	f7f8 fdfe 	bl	80008a2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cac:	7bfa      	ldrb	r2, [r7, #15]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fefc 	bl	8006aae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe feb5 	bl	8006a2c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fef7 	bl	8006ace <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <HAL_PCD_SuspendCallback+0x30>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	4a03      	ldr	r2, [pc, #12]	; (8007cfc <HAL_PCD_SuspendCallback+0x30>)
 8007cee:	f043 0306 	orr.w	r3, r3, #6
 8007cf2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	e000ed00 	.word	0xe000ed00

08007d00 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d007      	beq.n	8007d20 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d10:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <HAL_PCD_ResumeCallback+0x34>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	4a07      	ldr	r2, [pc, #28]	; (8007d34 <HAL_PCD_ResumeCallback+0x34>)
 8007d16:	f023 0306 	bic.w	r3, r3, #6
 8007d1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007d1c:	f000 f9f6 	bl	800810c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fee6 	bl	8006af8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	e000ed00 	.word	0xe000ed00

08007d38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a29      	ldr	r2, [pc, #164]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d52:	4a28      	ldr	r2, [pc, #160]	; (8007df4 <USBD_LL_Init+0xbc>)
 8007d54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d56:	4b26      	ldr	r3, [pc, #152]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d58:	2208      	movs	r2, #8
 8007d5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d5c:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d5e:	2202      	movs	r2, #2
 8007d60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d62:	4b23      	ldr	r3, [pc, #140]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d64:	2202      	movs	r2, #2
 8007d66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007d68:	4b21      	ldr	r3, [pc, #132]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d6e:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d74:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d80:	481b      	ldr	r0, [pc, #108]	; (8007df0 <USBD_LL_Init+0xb8>)
 8007d82:	f7f9 ffed 	bl	8001d60 <HAL_PCD_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007d8c:	f7f8 fd89 	bl	80008a2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d96:	2318      	movs	r3, #24
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f7fa fe8e 	bl	8002abc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007da6:	2358      	movs	r3, #88	; 0x58
 8007da8:	2200      	movs	r2, #0
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	f7fa fe86 	bl	8002abc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007db6:	23c0      	movs	r3, #192	; 0xc0
 8007db8:	2200      	movs	r2, #0
 8007dba:	2181      	movs	r1, #129	; 0x81
 8007dbc:	f7fa fe7e 	bl	8002abc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2101      	movs	r1, #1
 8007dce:	f7fa fe75 	bl	8002abc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2182      	movs	r1, #130	; 0x82
 8007de0:	f7fa fe6c 	bl	8002abc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20001f54 	.word	0x20001f54
 8007df4:	40005c00 	.word	0x40005c00

08007df8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fa f861 	bl	8001ed6 <HAL_PCD_Start>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f97c 	bl	8008118 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	70fb      	strb	r3, [r7, #3]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70bb      	strb	r3, [r7, #2]
 8007e44:	4613      	mov	r3, r2
 8007e46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e56:	78bb      	ldrb	r3, [r7, #2]
 8007e58:	883a      	ldrh	r2, [r7, #0]
 8007e5a:	78f9      	ldrb	r1, [r7, #3]
 8007e5c:	f7fa f9d0 	bl	8002200 <HAL_PCD_EP_Open>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f956 	bl	8008118 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fa fa11 	bl	80022c0 <HAL_PCD_EP_Close>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 f937 	bl	8008118 <USBD_Get_USB_Status>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fa fabc 	bl	8002454 <HAL_PCD_EP_SetStall>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f918 	bl	8008118 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fa faf7 	bl	8002508 <HAL_PCD_EP_ClrStall>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f8f9 	bl	8008118 <USBD_Get_USB_Status>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f46:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	da08      	bge.n	8007f62 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	015b      	lsls	r3, r3, #5
 8007f5a:	4413      	add	r3, r2
 8007f5c:	332a      	adds	r3, #42	; 0x2a
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	e008      	b.n	8007f74 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	015b      	lsls	r3, r3, #5
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007f72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fa f909 	bl	80021b6 <HAL_PCD_SetAddress>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f8b4 	bl	8008118 <USBD_Get_USB_Status>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b086      	sub	sp, #24
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	460b      	mov	r3, r1
 8007fcc:	72fb      	strb	r3, [r7, #11]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe0:	893b      	ldrh	r3, [r7, #8]
 8007fe2:	7af9      	ldrb	r1, [r7, #11]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f7fa f9fc 	bl	80023e2 <HAL_PCD_EP_Transmit>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 f891 	bl	8008118 <USBD_Get_USB_Status>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	461a      	mov	r2, r3
 8008010:	460b      	mov	r3, r1
 8008012:	72fb      	strb	r3, [r7, #11]
 8008014:	4613      	mov	r3, r2
 8008016:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008026:	893b      	ldrh	r3, [r7, #8]
 8008028:	7af9      	ldrb	r1, [r7, #11]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f7fa f98a 	bl	8002344 <HAL_PCD_EP_Receive>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f86e 	bl	8008118 <USBD_Get_USB_Status>
 800803c:	4603      	mov	r3, r0
 800803e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008040:	7dbb      	ldrb	r3, [r7, #22]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f7fa f9a9 	bl	80023b8 <HAL_PCD_EP_GetRxCount>
 8008066:	4603      	mov	r3, r0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d002      	beq.n	8008088 <HAL_PCDEx_LPM_Callback+0x18>
 8008082:	2b01      	cmp	r3, #1
 8008084:	d013      	beq.n	80080ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8008086:	e023      	b.n	80080d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008090:	f000 f83c 	bl	800810c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008094:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	4a0f      	ldr	r2, [pc, #60]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800809a:	f023 0306 	bic.w	r3, r3, #6
 800809e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fd26 	bl	8006af8 <USBD_LL_Resume>
    break;
 80080ac:	e010      	b.n	80080d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fd0a 	bl	8006ace <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80080c8:	f043 0306 	orr.w	r3, r3, #6
 80080cc:	6113      	str	r3, [r2, #16]
    break;   
 80080ce:	bf00      	nop
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	e000ed00 	.word	0xe000ed00

080080dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_static_malloc+0x18>)
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000e08 	.word	0x20000e08

080080f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008110:	f7f8 f94b 	bl	80003aa <SystemClock_Config>
}
 8008114:	bf00      	nop
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d817      	bhi.n	800815c <USBD_Get_USB_Status+0x44>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_Get_USB_Status+0x1c>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008145 	.word	0x08008145
 8008138:	0800814b 	.word	0x0800814b
 800813c:	08008151 	.word	0x08008151
 8008140:	08008157 	.word	0x08008157
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73fb      	strb	r3, [r7, #15]
    break;
 8008148:	e00b      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800814a:	2302      	movs	r3, #2
 800814c:	73fb      	strb	r3, [r7, #15]
    break;
 800814e:	e008      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e005      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e002      	b.n	8008162 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800815c:	2302      	movs	r3, #2
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	bf00      	nop
  }
  return usb_status;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4e0d      	ldr	r6, [pc, #52]	; (80081a8 <__libc_init_array+0x38>)
 8008174:	4c0d      	ldr	r4, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008176:	1ba4      	subs	r4, r4, r6
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	2500      	movs	r5, #0
 800817c:	42a5      	cmp	r5, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	4e0b      	ldr	r6, [pc, #44]	; (80081b0 <__libc_init_array+0x40>)
 8008182:	4c0c      	ldr	r4, [pc, #48]	; (80081b4 <__libc_init_array+0x44>)
 8008184:	f000 f820 	bl	80081c8 <_init>
 8008188:	1ba4      	subs	r4, r4, r6
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	2500      	movs	r5, #0
 800818e:	42a5      	cmp	r5, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008198:	4798      	blx	r3
 800819a:	3501      	adds	r5, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a2:	4798      	blx	r3
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	08008238 	.word	0x08008238
 80081ac:	08008238 	.word	0x08008238
 80081b0:	08008238 	.word	0x08008238
 80081b4:	0800823c 	.word	0x0800823c

080081b8 <memset>:
 80081b8:	4402      	add	r2, r0
 80081ba:	4603      	mov	r3, r0
 80081bc:	4293      	cmp	r3, r2
 80081be:	d100      	bne.n	80081c2 <memset+0xa>
 80081c0:	4770      	bx	lr
 80081c2:	f803 1b01 	strb.w	r1, [r3], #1
 80081c6:	e7f9      	b.n	80081bc <memset+0x4>

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr
